{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1","program":"/home/astrale/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","euclid","--edition=2018","/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=bfbc2a94230fb62a","-C","extra-filename=-bfbc2a94230fb62a","--out-dir","/home/astrale/godot/projects/tacticalRPG_v_02/rust/game_manager/target/rls/debug/deps","-L","dependency=/home/astrale/godot/projects/tacticalRPG_v_02/rust/game_manager/target/rls/debug/deps","--extern","num_traits=/home/astrale/godot/projects/tacticalRPG_v_02/rust/game_manager/target/rls/debug/deps/libnum_traits-064a355fae408fd0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/astrale/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/astrale/godot/projects/tacticalRPG_v_02/rust/game_manager/target/rls/debug/deps/libeuclid-bfbc2a94230fb62a.rmeta"},"prelude":{"crate_id":{"name":"euclid","disambiguator":[15662153274720043223,11664265618096295770]},"crate_root":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src","external_crates":[{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":4,"id":{"name":"num_traits","disambiguator":[9312764740457563191,11795223518921266272]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":5,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":6,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":7,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":8,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":9,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":10,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":13,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":14,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":15,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":17,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}}],"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3555},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1894,"byte_end":1899,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"alias_span":null,"name":"Angle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1923,"byte_end":1928,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"alias_span":null,"name":"Box2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1954,"byte_end":1971,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"HomogeneousVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":642},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2027,"byte_end":2033,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"point2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1262},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2035,"byte_end":2041,"line_start":47,"line_end":47,"column_start":32,"column_end":38},"alias_span":null,"name":"point3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2043,"byte_end":2050,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"alias_span":null,"name":"Point2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1044},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2052,"byte_end":2059,"line_start":47,"line_end":47,"column_start":49,"column_end":56},"alias_span":null,"name":"Point3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1729},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1730},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2387},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2119,"byte_end":2130,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2566},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2160,"byte_end":2171,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3511},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2197,"byte_end":2202,"line_start":51,"line_end":51,"column_start":25,"column_end":30},"alias_span":null,"name":"bvec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3512},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2204,"byte_end":2209,"line_start":51,"line_end":51,"column_start":32,"column_end":37},"alias_span":null,"name":"bvec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3718},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2211,"byte_end":2223,"line_start":51,"line_end":51,"column_start":39,"column_end":51},"alias_span":null,"name":"BoolVector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3736},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2225,"byte_end":2237,"line_start":51,"line_end":51,"column_start":53,"column_end":65},"alias_span":null,"name":"BoolVector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3505},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2264,"byte_end":2268,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3508},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2270,"byte_end":2274,"line_start":52,"line_end":52,"column_start":31,"column_end":35},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3040},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2276,"byte_end":2284,"line_start":52,"line_end":52,"column_start":37,"column_end":45},"alias_span":null,"name":"Vector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3256},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2286,"byte_end":2294,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"Vector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":537},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2321,"byte_end":2326,"line_start":54,"line_end":54,"column_start":24,"column_end":29},"alias_span":null,"name":"box3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":377},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2328,"byte_end":2333,"line_start":54,"line_end":54,"column_start":31,"column_end":36},"alias_span":null,"name":"Box3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1473},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2358,"byte_end":2362,"line_start":55,"line_end":55,"column_start":23,"column_end":27},"alias_span":null,"name":"rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1289},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2364,"byte_end":2368,"line_start":55,"line_end":55,"column_start":29,"column_end":33},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3657},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2393,"byte_end":2409,"line_start":56,"line_end":56,"column_start":23,"column_end":39},"alias_span":null,"name":"RigidTransform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1554},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2437,"byte_end":2447,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"alias_span":null,"name":"Rotation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1620},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2449,"byte_end":2459,"line_start":57,"line_end":57,"column_start":39,"column_end":49},"alias_span":null,"name":"Rotation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1846},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2491,"byte_end":2504,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"alias_span":null,"name":"SideOffsets2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2137},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2528,"byte_end":2533,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"alias_span":null,"name":"size2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2353},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2535,"byte_end":2540,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"alias_span":null,"name":"size3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1972},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2542,"byte_end":2548,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"alias_span":null,"name":"Size2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2164},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2550,"byte_end":2556,"line_start":59,"line_end":59,"column_start":45,"column_end":51},"alias_span":null,"name":"Size3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2779},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2588,"byte_end":2601,"line_start":60,"line_end":60,"column_start":30,"column_end":43},"alias_span":null,"name":"Translation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2882},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2603,"byte_end":2616,"line_start":60,"line_end":60,"column_start":45,"column_end":58},"alias_span":null,"name":"Translation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2989},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2640,"byte_end":2644,"line_start":61,"line_end":61,"column_start":22,"column_end":26},"alias_span":null,"name":"Trig","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":3783},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":3793},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":150},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":351},{"krate":0,"index":540},{"krate":0,"index":613},{"krate":0,"index":778},{"krate":0,"index":798},{"krate":0,"index":1265},{"krate":0,"index":1476},{"krate":0,"index":1522},{"krate":0,"index":1707},{"krate":0,"index":1828},{"krate":0,"index":1937},{"krate":0,"index":2356},{"krate":0,"index":2527},{"krate":0,"index":2748},{"krate":0,"index":2988},{"krate":0,"index":2997},{"krate":0,"index":3755},{"krate":0,"index":3775},{"krate":0,"index":3774},{"krate":0,"index":3772},{"krate":0,"index":3770},{"krate":0,"index":3767},{"krate":0,"index":3768},{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3762},{"krate":0,"index":3760},{"krate":0,"index":3757},{"krate":0,"index":3513}],"decl_id":null,"docs":" A collection of strongly typed math tools for computer graphics with an inclination\n towards 2d graphics and layout.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":450,"byte_end":456,"line_start":10,"line_end":10,"column_start":24,"column_end":30}},{"value":"/ A collection of strongly typed math tools for computer graphics with an inclination","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":460,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ towards 2d graphics and layout.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":548,"byte_end":583,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":584,"byte_end":587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ All types are generic over the scalar type of their component (`f32`, `i32`, etc.),","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":588,"byte_end":675,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ and tagged with a generic Unit parameter which is useful to prevent mixing","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":676,"byte_end":754,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ values from different spaces. For example it should not be legal to translate","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":755,"byte_end":836,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ a screen-space position by a world-space vector and this can be expressed using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":837,"byte_end":920,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ the generic Unit parameter.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":921,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":953,"byte_end":956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This unit system is not mandatory and all structures have an alias","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":957,"byte_end":1027,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ with the default unit: `UnknownUnit`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1028,"byte_end":1069,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ for example ```default::Point2D<T>``` is equivalent to ```Point2D<T, UnknownUnit>```.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1070,"byte_end":1159,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"/ Client code typically creates a set of aliases for each type and doesn't need","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1160,"byte_end":1241,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ to deal with the specifics of typed units further. For example:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1242,"byte_end":1309,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1310,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1314,"byte_end":1325,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use euclid::*;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1326,"byte_end":1344,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ pub struct ScreenSpace;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1345,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"/ pub type ScreenPoint = Point2D<f32, ScreenSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1373,"byte_end":1426,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/ pub type ScreenSize = Size2D<f32, ScreenSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1427,"byte_end":1478,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ pub struct WorldSpace;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1479,"byte_end":1505,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ pub type WorldPoint = Point3D<f32, WorldSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1506,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/ pub type ProjectionMatrix = Transform3D<f32, WorldSpace, ScreenSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1558,"byte_end":1632,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ // etc...","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1633,"byte_end":1646,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1647,"byte_end":1654,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1655,"byte_end":1658,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ All euclid types are marked `#[repr(C)]` in order to facilitate exposing them to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1659,"byte_end":1743,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ foreign function interfaces (provided the underlying scalar type is also `repr(C)`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1744,"byte_end":1832,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1833,"byte_end":1836,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":1837,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3555},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6544,"byte_end":6549,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Angle","qualname":"::angle::Angle","value":"Angle { radians }","parent":null,"children":[{"krate":0,"index":3557}],"decl_id":null,"docs":" An angle in radians\n","sig":null,"attributes":[{"value":"/ An angle in radians","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6374,"byte_end":6397,"line_start":19,"line_end":19,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3557},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6563,"byte_end":6570,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"name":"radians","qualname":"::angle::Angle::radians","value":"T","parent":{"krate":0,"index":3555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6622,"byte_end":6629,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"radians","qualname":"<Angle<T>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6601,"byte_end":6610,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6710,"byte_end":6713,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"get","qualname":"<Angle<T>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6689,"byte_end":6698,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6820,"byte_end":6827,"line_start":43,"line_end":43,"column_start":12,"column_end":19},"name":"degrees","qualname":"<Angle<T>>::degrees","value":"pub fn degrees(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6799,"byte_end":6808,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6953,"byte_end":6963,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"to_degrees","qualname":"<Angle<T>>::to_degrees","value":"pub fn to_degrees(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6932,"byte_end":6941,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7217,"byte_end":7225,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"positive","qualname":"<Angle<T>>::positive","value":"pub fn positive(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the [0..2*PI[ range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the [0..2*PI[ range.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7159,"byte_end":7205,"line_start":59,"line_end":59,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7486,"byte_end":7492,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"signed","qualname":"<Angle<T>>::signed","value":"pub fn signed(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the ]-PI..PI] range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the ]-PI..PI] range.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7428,"byte_end":7474,"line_start":69,"line_end":69,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7879,"byte_end":7887,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Angle<T>>::angle_to","value":"pub fn angle_to(&Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the shortest signed angle between two angles.","sig":null,"attributes":[{"value":"/ Returns the shortest signed angle between two angles.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7755,"byte_end":7812,"line_start":85,"line_end":85,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7817,"byte_end":7820,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Takes wrapping and signs into account.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7825,"byte_end":7867,"line_start":87,"line_end":87,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8173,"byte_end":8177,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Angle<T>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two angles, using the shortest path.\n","sig":null,"attributes":[{"value":"/ Linear interpolation between two angles, using the shortest path.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8092,"byte_end":8161,"line_start":96,"line_end":96,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8354,"byte_end":8361,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"sin_cos","qualname":"<Angle<T>>::sin_cos","value":"pub fn sin_cos(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns (sin(self), cos(self)).\n","sig":null,"attributes":[{"value":"/ Returns (sin(self), cos(self)).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8307,"byte_end":8342,"line_start":106,"line_end":106,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8469,"byte_end":8473,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"zero","qualname":"<Angle<T>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8602,"byte_end":8604,"line_start":125,"line_end":125,"column_start":12,"column_end":14},"name":"pi","qualname":"<Angle<T>>::pi","value":"pub fn pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8667,"byte_end":8673,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"two_pi","qualname":"<Angle<T>>::two_pi","value":"pub fn two_pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8746,"byte_end":8755,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"frac_pi_2","qualname":"<Angle<T>>::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8825,"byte_end":8834,"line_start":137,"line_end":137,"column_start":12,"column_end":21},"name":"frac_pi_3","qualname":"<Angle<T>>::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8904,"byte_end":8913,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"frac_pi_4","qualname":"<Angle<T>>::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9104,"byte_end":9108,"line_start":152,"line_end":152,"column_start":12,"column_end":16},"name":"cast","qualname":"<Angle<T>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Angle<NewT>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9026,"byte_end":9078,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9083,"byte_end":9092,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9265,"byte_end":9273,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Angle<T>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Angle<NewT>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9192,"byte_end":9253,"line_start":156,"line_end":156,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9499,"byte_end":9505,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Angle<T>>::to_f32","value":"pub fn to_f32(&Self) -> Angle<f32>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle to `f32`.\n","sig":null,"attributes":[{"value":"/ Cast angle to `f32`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9449,"byte_end":9473,"line_start":163,"line_end":163,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9478,"byte_end":9487,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9607,"byte_end":9613,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Angle<T>>::to_f64","value":"pub fn to_f64(&Self) -> Angle<f64>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle `f64`.\n","sig":null,"attributes":[{"value":"/ Cast angle `f64`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9560,"byte_end":9581,"line_start":169,"line_end":169,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9586,"byte_end":9595,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":150},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxeq","qualname":"::approxeq","value":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":3591},{"krate":0,"index":3594}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14170,"byte_end":14178,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ApproxEq","qualname":"::approxeq::ApproxEq","value":"ApproxEq<Eps>","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" Trait for testing approximate equality\n","sig":null,"attributes":[{"value":"/ Trait for testing approximate equality","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14117,"byte_end":14159,"line_start":10,"line_end":10,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14223,"byte_end":14237,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"approx_epsilon","qualname":"::approxeq::ApproxEq::approx_epsilon","value":"pub fn approx_epsilon() -> Eps","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Default epsilon value\n","sig":null,"attributes":[{"value":"/ Default epsilon value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14190,"byte_end":14215,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14375,"byte_end":14388,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"approx_eq_eps","qualname":"::approxeq::ApproxEq::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &Eps) -> bool","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n a provided epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14253,"byte_end":14333,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14338,"byte_end":14367,"line_start":16,"line_end":16,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14580,"byte_end":14589,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"approx_eq","qualname":"::approxeq::ApproxEq::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n the `approx_epsilon()` epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14446,"byte_end":14526,"line_start":19,"line_end":19,"column_start":5,"column_end":85}},{"value":"/ the `approx_epsilon()` epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxeq.rs","byte_start":14531,"byte_end":14572,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":157},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxord","qualname":"::approxord","value":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160}],"decl_id":null,"docs":" Utilities for testing approximate ordering - especially true for\n floating point types, where NaN's cannot be ordered.\n","sig":null,"attributes":[{"value":"/ Utilities for testing approximate ordering - especially true for","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","byte_start":15566,"byte_end":15634,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ floating point types, where NaN's cannot be ordered.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","byte_start":15635,"byte_end":15691,"line_start":11,"line_end":11,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":158},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","byte_start":15700,"byte_end":15703,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"min","qualname":"::approxord::min","value":"pub fn min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":160},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/approxord.rs","byte_start":15803,"byte_end":15806,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"max","qualname":"::approxord::max","value":"pub fn max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":192},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18658,"byte_end":18663,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Box2D","qualname":"::box2d::Box2D","value":"Box2D { min, max }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","sig":null,"attributes":[{"value":"/ A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17147,"byte_end":17230,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17231,"byte_end":17234,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17235,"byte_end":17255,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17256,"byte_end":17259,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This struct is similar to [`Rect`], but stores rectangle as two endpoints","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17260,"byte_end":17337,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ instead of origin point and size. Such representation has several advantages over","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17338,"byte_end":17423,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ [`Rect`] representation:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17424,"byte_end":17452,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ - Several operations are more efficient with `Box2D`, including [`intersection`],","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17453,"byte_end":17538,"line_start":37,"line_end":37,"column_start":1,"column_end":86}},{"value":"/   [`union`], and point-in-rect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17539,"byte_end":17574,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/ - The representation is less susceptible to overflow. With [`Rect`], computation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17575,"byte_end":17659,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/   of second point can overflow for a large range of values of origin and size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17660,"byte_end":17742,"line_start":40,"line_end":40,"column_start":1,"column_end":83}},{"value":"/   However, with `Box2D`, computation of [`size`] cannot overflow if the coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17743,"byte_end":17830,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/   are signed and the resulting size is unsigned.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17831,"byte_end":17883,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17884,"byte_end":17887,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ A known disadvantage of `Box2D` is that translating the rectangle requires translating","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17888,"byte_end":17978,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ both points, whereas translating [`Rect`] only requires translating one point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":17979,"byte_end":18061,"line_start":45,"line_end":45,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18062,"byte_end":18065,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Empty box","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18066,"byte_end":18081,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18082,"byte_end":18085,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ A box is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18086,"byte_end":18167,"line_start":49,"line_end":49,"column_start":1,"column_end":82}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18168,"byte_end":18193,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`min.x > max.x` or `min.y > max.y`),","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18194,"byte_end":18259,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18260,"byte_end":18283,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18284,"byte_end":18287,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`Rect`]: struct.Rect.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18288,"byte_end":18318,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ [`intersection`]: #method.intersection","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18319,"byte_end":18361,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18362,"byte_end":18396,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ [`union`]: #method.union","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18397,"byte_end":18425,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/ [`size`]: #method.size","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18426,"byte_end":18452,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18453,"byte_end":18463,"line_start":59,"line_end":59,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":195},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18680,"byte_end":18683,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"min","qualname":"::box2d::Box2D::min","value":"point::Point2D<T, U>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":196},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18708,"byte_end":18711,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"max","qualname":"::box2d::Box2D::max","value":"point::Point2D<T, U>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19559,"byte_end":19562,"line_start":105,"line_end":105,"column_start":18,"column_end":21},"name":"new","qualname":"<Box2D<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Point2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19511,"byte_end":19527,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19532,"byte_end":19541,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19958,"byte_end":19969,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box2D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative area.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative area.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19703,"byte_end":19751,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19756,"byte_end":19759,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19764,"byte_end":19856,"line_start":116,"line_end":116,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19861,"byte_end":19932,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19937,"byte_end":19946,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20137,"byte_end":20145,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box2D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20057,"byte_end":20111,"line_start":123,"line_end":123,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20116,"byte_end":20125,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20308,"byte_end":20318,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box2D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two boxes intersect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the two boxes intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20236,"byte_end":20282,"line_start":129,"line_end":129,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20287,"byte_end":20296,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20744,"byte_end":20752,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box2D<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the point. Points are considered\n in the box if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the point. Points are considered","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20514,"byte_end":20586,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"/ in the box if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20591,"byte_end":20670,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20675,"byte_end":20718,"line_start":140,"line_end":140,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20723,"byte_end":20732,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21110,"byte_end":21122,"line_start":150,"line_end":150,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box2D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the interior of the other box. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the interior of the other box. Always","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20886,"byte_end":20963,"line_start":146,"line_end":146,"column_start":5,"column_end":82}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":20968,"byte_end":21044,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box is empty.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21049,"byte_end":21084,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21089,"byte_end":21098,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21448,"byte_end":21460,"line_start":164,"line_end":164,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box2D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21427,"byte_end":21436,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21699,"byte_end":21711,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box2D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes, returning `None` if the boxes do not intersect.\n","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes, returning `None` if the boxes do not intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21582,"byte_end":21673,"line_start":172,"line_end":172,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21678,"byte_end":21687,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22289,"byte_end":22311,"line_start":191,"line_end":191,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box2D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes without check whether they do intersect.","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes without check whether they do intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21893,"byte_end":21976,"line_start":184,"line_end":184,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21981,"byte_end":21984,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The result is a negative box if the boxes do not intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21989,"byte_end":22052,"line_start":186,"line_end":186,"column_start":5,"column_end":68}},{"value":"/ This can be useful for computing the intersection of more than two boxes, as","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22057,"byte_end":22137,"line_start":187,"line_end":187,"column_start":5,"column_end":85}},{"value":"/ it is possible to chain multiple intersection_unchecked calls and check for","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22142,"byte_end":22221,"line_start":188,"line_end":188,"column_start":5,"column_end":84}},{"value":"/ empty/negative result at the end.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22226,"byte_end":22263,"line_start":189,"line_end":189,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22268,"byte_end":22277,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22571,"byte_end":22576,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"union","qualname":"<Box2D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22550,"byte_end":22559,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22957,"byte_end":22966,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box2D<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box, translated by a vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22882,"byte_end":22931,"line_start":211,"line_end":211,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22936,"byte_end":22945,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23193,"byte_end":23197,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"size","qualname":"<Box2D<T, U>>::size","value":"pub fn size(&Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23172,"byte_end":23181,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23295,"byte_end":23300,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"width","qualname":"<Box2D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23274,"byte_end":23283,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23379,"byte_end":23385,"line_start":236,"line_end":236,"column_start":12,"column_end":18},"name":"height","qualname":"<Box2D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23358,"byte_end":23367,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23464,"byte_end":23471,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"to_rect","qualname":"<Box2D<T, U>>::to_rect","value":"pub fn to_rect(&Self) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23443,"byte_end":23452,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23792,"byte_end":23799,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box2D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23680,"byte_end":23750,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23755,"byte_end":23764,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23769,"byte_end":23780,"line_start":255,"line_end":255,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24235,"byte_end":24244,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"name":"inner_box","qualname":"<Box2D<T, U>>::inner_box","value":"pub fn inner_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner box.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24007,"byte_end":24059,"line_start":263,"line_end":263,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24064,"byte_end":24067,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal, vertical","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24072,"byte_end":24143,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ and applicate offsets must not be larger than the original side length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24148,"byte_end":24223,"line_start":266,"line_end":266,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24592,"byte_end":24601,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"outer_box","qualname":"<Box2D<T, U>>::outer_box","value":"pub fn outer_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the b and position of an outer box.","sig":null,"attributes":[{"value":"/ Calculate the b and position of an outer box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24455,"byte_end":24504,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24509,"byte_end":24512,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded box is returned.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24517,"byte_end":24580,"line_start":276,"line_end":276,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24958,"byte_end":24967,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box2D<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box2D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box2D of the given size, at offset zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24878,"byte_end":24932,"line_start":289,"line_end":289,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24937,"byte_end":24946,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":25216,"byte_end":25227,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box2D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":25137,"byte_end":25204,"line_start":297,"line_end":297,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26263,"byte_end":26267,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box2D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box and another box.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box and another box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26179,"byte_end":26237,"line_start":338,"line_end":338,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26242,"byte_end":26251,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26486,"byte_end":26492,"line_start":349,"line_end":349,"column_start":12,"column_end":18},"name":"center","qualname":"<Box2D<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26726,"byte_end":26730,"line_start":360,"line_end":360,"column_start":12,"column_end":16},"name":"area","qualname":"<Box2D<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26705,"byte_end":26714,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26922,"byte_end":26926,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box2D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26867,"byte_end":26910,"line_start":370,"line_end":370,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28775,"byte_end":28785,"line_start":448,"line_end":448,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box2D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28695,"byte_end":28749,"line_start":446,"line_end":446,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28754,"byte_end":28763,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28958,"byte_end":28970,"line_start":454,"line_end":454,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box2D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box2D<T, UnknownUnit>) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28896,"byte_end":28932,"line_start":452,"line_end":452,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28937,"byte_end":28946,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29148,"byte_end":29157,"line_start":460,"line_end":460,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29105,"byte_end":29122,"line_start":458,"line_end":458,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29127,"byte_end":29136,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29280,"byte_end":29285,"line_start":465,"line_end":465,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box2D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29259,"byte_end":29268,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29943,"byte_end":29947,"line_start":483,"line_end":483,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29563,"byte_end":29637,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29642,"byte_end":29645,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29650,"byte_end":29737,"line_start":479,"line_end":479,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29742,"byte_end":29830,"line_start":480,"line_end":480,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29835,"byte_end":29917,"line_start":481,"line_end":481,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29922,"byte_end":29931,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30429,"byte_end":30437,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30054,"byte_end":30137,"line_start":487,"line_end":487,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30142,"byte_end":30145,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30150,"byte_end":30237,"line_start":489,"line_end":489,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30242,"byte_end":30330,"line_start":490,"line_end":490,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30335,"byte_end":30417,"line_start":491,"line_end":491,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30749,"byte_end":30755,"line_start":503,"line_end":503,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box2D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30696,"byte_end":30723,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30728,"byte_end":30737,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30866,"byte_end":30872,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box2D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30813,"byte_end":30840,"line_start":507,"line_end":507,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30845,"byte_end":30854,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31229,"byte_end":31237,"line_start":519,"line_end":519,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box2D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30930,"byte_end":30987,"line_start":513,"line_end":513,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":30992,"byte_end":30995,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31000,"byte_end":31075,"line_start":515,"line_end":515,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31080,"byte_end":31155,"line_start":516,"line_end":516,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31160,"byte_end":31203,"line_start":517,"line_end":517,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31208,"byte_end":31217,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31594,"byte_end":31600,"line_start":529,"line_end":529,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box2D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31297,"byte_end":31352,"line_start":523,"line_end":523,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31357,"byte_end":31360,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31365,"byte_end":31440,"line_start":525,"line_end":525,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31445,"byte_end":31520,"line_start":526,"line_end":526,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31525,"byte_end":31568,"line_start":527,"line_end":527,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31573,"byte_end":31582,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31955,"byte_end":31961,"line_start":539,"line_end":539,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box2D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31658,"byte_end":31713,"line_start":533,"line_end":533,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31718,"byte_end":31721,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31726,"byte_end":31801,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31806,"byte_end":31881,"line_start":536,"line_end":536,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31886,"byte_end":31929,"line_start":537,"line_end":537,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":31934,"byte_end":31943,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32316,"byte_end":32322,"line_start":549,"line_end":549,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box2D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32019,"byte_end":32074,"line_start":543,"line_end":543,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32079,"byte_end":32082,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32087,"byte_end":32162,"line_start":545,"line_end":545,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32167,"byte_end":32242,"line_start":546,"line_end":546,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32247,"byte_end":32290,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32295,"byte_end":32304,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32971,"byte_end":32976,"line_start":568,"line_end":568,"column_start":12,"column_end":17},"name":"round","qualname":"<Box2D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with edges rounded to integer coordinates, such that\n the returned box has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box with edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32427,"byte_end":32496,"line_start":558,"line_end":558,"column_start":5,"column_end":74}},{"value":"/ the returned box has the same set of pixel centers as the original","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32501,"byte_end":32571,"line_start":559,"line_end":559,"column_start":5,"column_end":75}},{"value":"/ one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32576,"byte_end":32584,"line_start":560,"line_end":560,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32589,"byte_end":32622,"line_start":561,"line_end":561,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32627,"byte_end":32689,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32694,"byte_end":32766,"line_start":563,"line_end":563,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32771,"byte_end":32803,"line_start":564,"line_end":564,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32808,"byte_end":32891,"line_start":565,"line_end":565,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32896,"byte_end":32943,"line_start":566,"line_end":566,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32948,"byte_end":32959,"line_start":567,"line_end":567,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33270,"byte_end":33278,"line_start":580,"line_end":580,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box2D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box contains the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33114,"byte_end":33189,"line_start":577,"line_end":577,"column_start":5,"column_end":80}},{"value":"/ the original box contains the resulting box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33194,"byte_end":33242,"line_start":578,"line_end":578,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33247,"byte_end":33258,"line_start":579,"line_end":579,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33568,"byte_end":33577,"line_start":589,"line_end":589,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box2D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box is contained in the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33405,"byte_end":33480,"line_start":586,"line_end":586,"column_start":5,"column_end":80}},{"value":"/ the original box is contained in the resulting box.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33485,"byte_end":33540,"line_start":587,"line_end":587,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33545,"byte_end":33556,"line_start":588,"line_end":588,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42038,"byte_end":42043,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Box3D","qualname":"::box3d::Box3D","value":"Box3D { min, max }","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"decl_id":null,"docs":" An axis aligned 3D box represented by its minimum and maximum coordinates.\n","sig":null,"attributes":[{"value":"/ An axis aligned 3D box represented by its minimum and maximum coordinates.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":41754,"byte_end":41832,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":41833,"byte_end":41843,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":380},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42060,"byte_end":42063,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"min","qualname":"::box3d::Box3D::min","value":"point::Point3D<T, U>","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":381},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42088,"byte_end":42091,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"max","qualname":"::box3d::Box3D::max","value":"point::Point3D<T, U>","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42939,"byte_end":42942,"line_start":75,"line_end":75,"column_start":18,"column_end":21},"name":"new","qualname":"<Box3D<T, U>>::new","value":"pub const fn new(Point3D<T, U>, Point3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42891,"byte_end":42907,"line_start":73,"line_end":73,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42912,"byte_end":42921,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43340,"byte_end":43351,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box3D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative volume.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative volume.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43083,"byte_end":43133,"line_start":84,"line_end":84,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43138,"byte_end":43141,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43146,"byte_end":43238,"line_start":86,"line_end":86,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43243,"byte_end":43314,"line_start":87,"line_end":87,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43319,"byte_end":43328,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43546,"byte_end":43554,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box3D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43466,"byte_end":43520,"line_start":93,"line_end":93,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43525,"byte_end":43534,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43693,"byte_end":43703,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box3D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43672,"byte_end":43681,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44213,"byte_end":44221,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box3D<T, U>>::contains","value":"pub fn contains(&Self, Point3D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the point. Points are considered\n in the box3d if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the point. Points are considered","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43979,"byte_end":44053,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ in the box3d if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44058,"byte_end":44139,"line_start":110,"line_end":110,"column_start":5,"column_end":86}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44144,"byte_end":44187,"line_start":111,"line_end":111,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44192,"byte_end":44201,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44714,"byte_end":44726,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box3D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the interior of the other box3d. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box3d is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the interior of the other box3d. Always","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44484,"byte_end":44565,"line_start":122,"line_end":122,"column_start":5,"column_end":86}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44570,"byte_end":44646,"line_start":123,"line_end":123,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box3d is empty.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44651,"byte_end":44688,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":44693,"byte_end":44702,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45142,"byte_end":45154,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box3D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45121,"byte_end":45130,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45297,"byte_end":45309,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box3D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45276,"byte_end":45285,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45498,"byte_end":45520,"line_start":161,"line_end":161,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box3D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46077,"byte_end":46082,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"union","qualname":"<Box3D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing both of the provided boxes.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing both of the provided boxes.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45984,"byte_end":46051,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46056,"byte_end":46065,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46673,"byte_end":46682,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box3D<T, U>>::translate","value":"pub fn translate(&Self, Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box3d, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box3d, translated by a vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46580,"byte_end":46631,"line_start":199,"line_end":199,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46636,"byte_end":46645,"line_start":200,"line_end":200,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46650,"byte_end":46661,"line_start":201,"line_end":201,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46909,"byte_end":46913,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"size","qualname":"<Box3D<T, U>>::size","value":"pub fn size(&Self) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46888,"byte_end":46897,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47113,"byte_end":47118,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"width","qualname":"<Box3D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47092,"byte_end":47101,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47197,"byte_end":47203,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"height","qualname":"<Box3D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47176,"byte_end":47185,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47282,"byte_end":47287,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"depth","qualname":"<Box3D<T, U>>::depth","value":"pub fn depth(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47261,"byte_end":47270,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47545,"byte_end":47552,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box3D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47433,"byte_end":47503,"line_start":243,"line_end":243,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47508,"byte_end":47517,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47522,"byte_end":47533,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47962,"byte_end":47971,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box3D<T, U>>::from_size","value":"pub fn from_size(Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box3D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box3D of the given size, at offset zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47882,"byte_end":47936,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47941,"byte_end":47950,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":48220,"byte_end":48231,"line_start":267,"line_end":267,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box3D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":48141,"byte_end":48208,"line_start":266,"line_end":266,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49456,"byte_end":49460,"line_start":315,"line_end":315,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box3D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box3d and another box3d.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box3d and another box3d.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49368,"byte_end":49430,"line_start":313,"line_end":313,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49435,"byte_end":49444,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49679,"byte_end":49685,"line_start":324,"line_end":324,"column_start":12,"column_end":18},"name":"center","qualname":"<Box3D<T, U>>::center","value":"pub fn center(&Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49919,"byte_end":49925,"line_start":335,"line_end":335,"column_start":12,"column_end":18},"name":"volume","qualname":"<Box3D<T, U>>::volume","value":"pub fn volume(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49898,"byte_end":49907,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50050,"byte_end":50057,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"xy_area","qualname":"<Box3D<T, U>>::xy_area","value":"pub fn xy_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50029,"byte_end":50038,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50169,"byte_end":50176,"line_start":347,"line_end":347,"column_start":12,"column_end":19},"name":"yz_area","qualname":"<Box3D<T, U>>::yz_area","value":"pub fn yz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50148,"byte_end":50157,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50288,"byte_end":50295,"line_start":353,"line_end":353,"column_start":12,"column_end":19},"name":"xz_area","qualname":"<Box3D<T, U>>::xz_area","value":"pub fn xz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50267,"byte_end":50276,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50486,"byte_end":50490,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box3D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50431,"byte_end":50474,"line_start":363,"line_end":363,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52415,"byte_end":52425,"line_start":443,"line_end":443,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box3D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52335,"byte_end":52389,"line_start":441,"line_end":441,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52394,"byte_end":52403,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52639,"byte_end":52651,"line_start":452,"line_end":452,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box3D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box3D<T, UnknownUnit>) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52577,"byte_end":52613,"line_start":450,"line_end":450,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52618,"byte_end":52627,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52870,"byte_end":52879,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52827,"byte_end":52844,"line_start":459,"line_end":459,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52849,"byte_end":52858,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53002,"byte_end":53007,"line_start":466,"line_end":466,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box3D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52981,"byte_end":52990,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53709,"byte_end":53713,"line_start":484,"line_end":484,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53329,"byte_end":53403,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53408,"byte_end":53411,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53416,"byte_end":53503,"line_start":480,"line_end":480,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53508,"byte_end":53596,"line_start":481,"line_end":481,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53601,"byte_end":53683,"line_start":482,"line_end":482,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53688,"byte_end":53697,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54195,"byte_end":54203,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53820,"byte_end":53903,"line_start":488,"line_end":488,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53908,"byte_end":53911,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53916,"byte_end":54003,"line_start":490,"line_end":490,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54008,"byte_end":54096,"line_start":491,"line_end":491,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54101,"byte_end":54183,"line_start":492,"line_end":492,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54517,"byte_end":54523,"line_start":504,"line_end":504,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box3D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box3d.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54462,"byte_end":54491,"line_start":502,"line_end":502,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54496,"byte_end":54505,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54636,"byte_end":54642,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box3D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box3d.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54581,"byte_end":54610,"line_start":508,"line_end":508,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54615,"byte_end":54624,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55003,"byte_end":55011,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box3D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box3d, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54700,"byte_end":54759,"line_start":514,"line_end":514,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54764,"byte_end":54767,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54772,"byte_end":54849,"line_start":516,"line_end":516,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54854,"byte_end":54929,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54934,"byte_end":54977,"line_start":518,"line_end":518,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":54982,"byte_end":54991,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55372,"byte_end":55378,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box3D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box3d, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55071,"byte_end":55128,"line_start":524,"line_end":524,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55133,"byte_end":55136,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55141,"byte_end":55218,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55223,"byte_end":55298,"line_start":527,"line_end":527,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55303,"byte_end":55346,"line_start":528,"line_end":528,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55351,"byte_end":55360,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55737,"byte_end":55743,"line_start":540,"line_end":540,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box3D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box3d, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55436,"byte_end":55493,"line_start":534,"line_end":534,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55498,"byte_end":55501,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55506,"byte_end":55583,"line_start":536,"line_end":536,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55588,"byte_end":55663,"line_start":537,"line_end":537,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55668,"byte_end":55711,"line_start":538,"line_end":538,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55716,"byte_end":55725,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56102,"byte_end":56108,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box3D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box3d, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55801,"byte_end":55858,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55863,"byte_end":55866,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55871,"byte_end":55948,"line_start":546,"line_end":546,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":55953,"byte_end":56028,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56033,"byte_end":56076,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56081,"byte_end":56090,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56761,"byte_end":56766,"line_start":569,"line_end":569,"column_start":12,"column_end":17},"name":"round","qualname":"<Box3D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with edges rounded to integer coordinates, such that\n the returned box3d has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box3d with edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56213,"byte_end":56284,"line_start":559,"line_end":559,"column_start":5,"column_end":76}},{"value":"/ the returned box3d has the same set of pixel centers as the original","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56289,"byte_end":56361,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56366,"byte_end":56374,"line_start":561,"line_end":561,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56379,"byte_end":56412,"line_start":562,"line_end":562,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56417,"byte_end":56479,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56484,"byte_end":56556,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56561,"byte_end":56593,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56598,"byte_end":56681,"line_start":566,"line_end":566,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56686,"byte_end":56733,"line_start":567,"line_end":567,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56738,"byte_end":56749,"line_start":568,"line_end":568,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57066,"byte_end":57074,"line_start":581,"line_end":581,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box3D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d contains the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56904,"byte_end":56981,"line_start":578,"line_end":578,"column_start":5,"column_end":82}},{"value":"/ the original box3d contains the resulting box3d.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56986,"byte_end":57038,"line_start":579,"line_end":579,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57043,"byte_end":57054,"line_start":580,"line_end":580,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57367,"byte_end":57376,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box3D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d is contained in the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57198,"byte_end":57275,"line_start":588,"line_end":588,"column_start":5,"column_end":82}},{"value":"/ the original box3d is contained in the resulting box3d.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57280,"byte_end":57339,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57344,"byte_end":57355,"line_start":590,"line_end":590,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57751,"byte_end":57756,"line_start":609,"line_end":609,"column_start":8,"column_end":13},"name":"box3d","qualname":"::box3d::box3d","value":"pub fn box3d<T: Copy, U>(T, T, T, T, T, T) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57660,"byte_end":57743,"line_start":608,"line_end":608,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67611,"byte_end":67628,"line_start":25,"line_end":25,"column_start":12,"column_end":29},"name":"HomogeneousVector","qualname":"::homogen::HomogeneousVector","value":"HomogeneousVector { x, y, z, w, _unit }","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"decl_id":null,"docs":" Homogeneous vector in 3D space.\n","sig":null,"attributes":[{"value":"/ Homogeneous vector in 3D space.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67553,"byte_end":67588,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67589,"byte_end":67599,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":560},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67645,"byte_end":67646,"line_start":26,"line_end":26,"column_start":9,"column_end":10},"name":"x","qualname":"::homogen::HomogeneousVector::x","value":"T","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":561},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67659,"byte_end":67660,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"y","qualname":"::homogen::HomogeneousVector::y","value":"T","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":562},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67673,"byte_end":67674,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"z","qualname":"::homogen::HomogeneousVector::z","value":"T","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":563},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67687,"byte_end":67688,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"w","qualname":"::homogen::HomogeneousVector::w","value":"T","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":564},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67720,"byte_end":67725,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"_unit","qualname":"::homogen::HomogeneousVector::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69479,"byte_end":69482,"line_start":107,"line_end":107,"column_start":18,"column_end":21},"name":"new","qualname":"<HomogeneousVector<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69401,"byte_end":69447,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69452,"byte_end":69461,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69884,"byte_end":69894,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"to_point2d","qualname":"<HomogeneousVector<T, U>>::to_point2d","value":"pub fn to_point2d(Self) -> Option<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 2D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 2D point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69744,"byte_end":69780,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69785,"byte_end":69788,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69793,"byte_end":69858,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69863,"byte_end":69872,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70220,"byte_end":70230,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_point3d","qualname":"<HomogeneousVector<T, U>>::to_point3d","value":"pub fn to_point3d(Self) -> Option<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 3D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 3D point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70080,"byte_end":70116,"line_start":131,"line_end":131,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70121,"byte_end":70124,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70129,"byte_end":70194,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70199,"byte_end":70208,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73944,"byte_end":73950,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"Length","qualname":"::length::Length","value":"","parent":null,"children":[],"decl_id":null,"docs":" A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","sig":null,"attributes":[{"value":"/ A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73256,"byte_end":73349,"line_start":27,"line_end":27,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73350,"byte_end":73353,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `T` can be any numeric type, for example a primitive type like `u64` or `f32`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73354,"byte_end":73436,"line_start":29,"line_end":29,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73437,"byte_end":73440,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ `Unit` is not used in the representation of a `Length` value. It is used only at compile time","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73441,"byte_end":73538,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ to ensure that a `Length` stored with one unit is converted explicitly before being used in an","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73539,"byte_end":73637,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ expression that requires a different unit.  It may be a type without values, such as an empty","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73638,"byte_end":73735,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ enum.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73736,"byte_end":73745,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73746,"byte_end":73749,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ You can multiply a `Length` by a `scale::Scale` to convert it from one unit to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73750,"byte_end":73832,"line_start":36,"line_end":36,"column_start":1,"column_end":83}},{"value":"/ another. See the [`Scale`] docs for an example.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73833,"byte_end":73884,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73885,"byte_end":73888,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`Scale`]: struct.Scale.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73889,"byte_end":73921,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73922,"byte_end":73932,"line_start":40,"line_end":40,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":645},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73960,"byte_end":73965,"line_start":41,"line_end":41,"column_start":28,"column_end":33},"name":"0","qualname":"::length::Length::0","value":"T","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":646},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":73982,"byte_end":74003,"line_start":41,"line_end":41,"column_start":50,"column_end":71},"name":"1","qualname":"::length::Length::1","value":"core::marker::PhantomData<Unit>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74829,"byte_end":74832,"line_start":80,"line_end":80,"column_start":18,"column_end":21},"name":"new","qualname":"<Length<T, U>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Associate a value with a unit of measure.\n","sig":null,"attributes":[{"value":"/ Associate a value with a unit of measure.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74752,"byte_end":74797,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74802,"byte_end":74811,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74987,"byte_end":74990,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"get","qualname":"<Length<T, U>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unpack the underlying value from the wrapper.\n","sig":null,"attributes":[{"value":"/ Unpack the underlying value from the wrapper.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74926,"byte_end":74975,"line_start":86,"line_end":86,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75073,"byte_end":75082,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Length<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Length<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75030,"byte_end":75047,"line_start":91,"line_end":91,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75052,"byte_end":75061,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75726,"byte_end":75730,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Length<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this length and another length.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this length and another length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75149,"byte_end":75213,"line_start":97,"line_end":97,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75218,"byte_end":75221,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75226,"byte_end":75239,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75244,"byte_end":75247,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75252,"byte_end":75263,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Length;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75268,"byte_end":75300,"line_start":102,"line_end":102,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75305,"byte_end":75308,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let from = Length::new(0.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75313,"byte_end":75345,"line_start":104,"line_end":104,"column_start":5,"column_end":37}},{"value":"/ let to = Length::new(8.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75350,"byte_end":75380,"line_start":105,"line_end":105,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75385,"byte_end":75388,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), Length::new(-8.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75393,"byte_end":75448,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), Length::new( 0.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75453,"byte_end":75508,"line_start":108,"line_end":108,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), Length::new( 4.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75513,"byte_end":75568,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), Length::new( 8.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75573,"byte_end":75628,"line_start":110,"line_end":110,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), Length::new(16.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75633,"byte_end":75688,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75693,"byte_end":75700,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75705,"byte_end":75714,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76086,"byte_end":76089,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"min","qualname":"<Length<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns minimum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns minimum between this length and another length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76001,"byte_end":76060,"line_start":124,"line_end":124,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76065,"byte_end":76074,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76240,"byte_end":76243,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"max","qualname":"<Length<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns maximum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns maximum between this length and another length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76155,"byte_end":76214,"line_start":130,"line_end":130,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76219,"byte_end":76228,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76454,"byte_end":76458,"line_start":140,"line_end":140,"column_start":12,"column_end":16},"name":"cast","qualname":"<Length<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Length<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76354,"byte_end":76428,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76433,"byte_end":76442,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76640,"byte_end":76648,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Length<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Length<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76545,"byte_end":76628,"line_start":144,"line_end":144,"column_start":5,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":778},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":3597},{"krate":0,"index":3599},{"krate":0,"index":3601},{"krate":0,"index":3603},{"krate":0,"index":3605},{"krate":0,"index":3607},{"krate":0,"index":3609},{"krate":0,"index":3611},{"krate":0,"index":3613},{"krate":0,"index":3615},{"krate":0,"index":3617},{"krate":0,"index":3619},{"krate":0,"index":3621},{"krate":0,"index":3623},{"krate":0,"index":3625},{"krate":0,"index":3627},{"krate":0,"index":3629},{"krate":0,"index":3631},{"krate":0,"index":3633},{"krate":0,"index":3635},{"krate":0,"index":3637},{"krate":0,"index":3639},{"krate":0,"index":3641},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3651},{"krate":0,"index":3653},{"krate":0,"index":3655}],"decl_id":null,"docs":" A one-dimensional length, tagged with its units.\n","sig":null,"attributes":[{"value":"/ A one-dimensional length, tagged with its units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":87745,"byte_end":87797,"line_start":9,"line_end":9,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":780},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":88926,"byte_end":88930,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Zero","qualname":"::num::Zero","value":"Zero","parent":null,"children":[{"krate":0,"index":781}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":88940,"byte_end":88944,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"zero","qualname":"::num::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":785},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89071,"byte_end":89074,"line_start":38,"line_end":38,"column_start":11,"column_end":14},"name":"One","qualname":"::num::One","value":"One","parent":null,"children":[{"krate":0,"index":786}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89084,"byte_end":89087,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"one","qualname":"::num::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":785},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":790},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89270,"byte_end":89275,"line_start":49,"line_end":49,"column_start":11,"column_end":16},"name":"Round","qualname":"::num::Round","value":"Round: Copy","parent":null,"children":[{"krate":0,"index":791}],"decl_id":null,"docs":" Defines the nearest integer value to the original value.\n","sig":null,"attributes":[{"value":"/ Defines the nearest integer value to the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89199,"byte_end":89259,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89440,"byte_end":89445,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"round","qualname":"::num::Round::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":" Rounds to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89288,"byte_end":89328,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89333,"byte_end":89336,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89341,"byte_end":89416,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89421,"byte_end":89432,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":792},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89545,"byte_end":89550,"line_start":57,"line_end":57,"column_start":11,"column_end":16},"name":"Floor","qualname":"::num::Floor","value":"Floor: Copy","parent":null,"children":[{"krate":0,"index":793}],"decl_id":null,"docs":" Defines the biggest integer equal or lower than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89463,"byte_end":89534,"line_start":56,"line_end":56,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89748,"byte_end":89753,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"floor","qualname":"::num::Floor::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":" Rounds to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89563,"byte_end":89636,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89641,"byte_end":89644,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89649,"byte_end":89724,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89729,"byte_end":89740,"line_start":61,"line_end":61,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":794},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89856,"byte_end":89860,"line_start":65,"line_end":65,"column_start":11,"column_end":15},"name":"Ceil","qualname":"::num::Ceil","value":"Ceil: Copy","parent":null,"children":[{"krate":0,"index":795}],"decl_id":null,"docs":" Defines the smallest integer equal or greater than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89771,"byte_end":89845,"line_start":64,"line_end":64,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":90061,"byte_end":90065,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"ceil","qualname":"::num::Ceil::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":794},"children":[],"decl_id":null,"docs":" Rounds to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89873,"byte_end":89949,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89954,"byte_end":89957,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89962,"byte_end":90037,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":90042,"byte_end":90053,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":834},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92227,"byte_end":92234,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Point2D","qualname":"::point::Point2D","value":"Point2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":" A 2d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Point tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92170,"byte_end":92204,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92205,"byte_end":92215,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":837},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92251,"byte_end":92252,"line_start":32,"line_end":32,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point2D::x","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":838},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92265,"byte_end":92266,"line_start":33,"line_end":33,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point2D::y","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":839},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92298,"byte_end":92303,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94115,"byte_end":94121,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point2D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94041,"byte_end":94089,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94094,"byte_end":94103,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94290,"byte_end":94294,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94219,"byte_end":94264,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94269,"byte_end":94278,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94450,"byte_end":94453,"line_start":137,"line_end":137,"column_start":18,"column_end":21},"name":"new","qualname":"<Point2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94372,"byte_end":94418,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94423,"byte_end":94432,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94668,"byte_end":94680,"line_start":147,"line_end":147,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94577,"byte_end":94642,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94647,"byte_end":94656,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94823,"byte_end":94835,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point2D<T, U>>::from_untyped","value":"pub fn from_untyped(Point2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94761,"byte_end":94797,"line_start":151,"line_end":151,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94802,"byte_end":94811,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95036,"byte_end":95042,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"extend","qualname":"<Point2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d point from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d point from this one, using the specified z value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94945,"byte_end":95010,"line_start":159,"line_end":159,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95015,"byte_end":95024,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95249,"byte_end":95258,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95119,"byte_end":95153,"line_start":165,"line_end":165,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95158,"byte_end":95161,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin from this point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95166,"byte_end":95223,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95228,"byte_end":95237,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95682,"byte_end":95684,"line_start":190,"line_end":190,"column_start":12,"column_end":14},"name":"yx","qualname":"<Point2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95403,"byte_end":95420,"line_start":177,"line_end":177,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95425,"byte_end":95428,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95433,"byte_end":95446,"line_start":179,"line_end":179,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95451,"byte_end":95454,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95459,"byte_end":95470,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95475,"byte_end":95511,"line_start":182,"line_end":182,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95516,"byte_end":95530,"line_start":183,"line_end":183,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95535,"byte_end":95538,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95543,"byte_end":95589,"line_start":185,"line_end":185,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95594,"byte_end":95597,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.yx(), point2(-8, 1));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95602,"byte_end":95644,"line_start":187,"line_end":187,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95649,"byte_end":95656,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95661,"byte_end":95670,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96114,"byte_end":96124,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95743,"byte_end":95797,"line_start":194,"line_end":194,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95802,"byte_end":95805,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95810,"byte_end":95823,"line_start":196,"line_end":196,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95828,"byte_end":95831,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95836,"byte_end":95847,"line_start":198,"line_end":198,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95852,"byte_end":95888,"line_start":199,"line_end":199,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95893,"byte_end":95907,"line_start":200,"line_end":200,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95912,"byte_end":95915,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95920,"byte_end":95966,"line_start":202,"line_end":202,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95971,"byte_end":95974,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":95979,"byte_end":96025,"line_start":204,"line_end":204,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96030,"byte_end":96076,"line_start":205,"line_end":205,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96081,"byte_end":96088,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96093,"byte_end":96102,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96596,"byte_end":96605,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96202,"byte_end":96250,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96255,"byte_end":96258,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96263,"byte_end":96276,"line_start":214,"line_end":214,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96281,"byte_end":96284,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96289,"byte_end":96300,"line_start":216,"line_end":216,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96305,"byte_end":96341,"line_start":217,"line_end":217,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96346,"byte_end":96360,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96365,"byte_end":96379,"line_start":219,"line_end":219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96384,"byte_end":96387,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96392,"byte_end":96438,"line_start":221,"line_end":221,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96443,"byte_end":96446,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96451,"byte_end":96502,"line_start":223,"line_end":223,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96507,"byte_end":96558,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96563,"byte_end":96570,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96575,"byte_end":96584,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96974,"byte_end":96982,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96676,"byte_end":96712,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96717,"byte_end":96720,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96725,"byte_end":96738,"line_start":233,"line_end":233,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96743,"byte_end":96746,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96751,"byte_end":96762,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96767,"byte_end":96803,"line_start":236,"line_end":236,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96808,"byte_end":96822,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96827,"byte_end":96830,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96835,"byte_end":96881,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96886,"byte_end":96889,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8]);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96894,"byte_end":96936,"line_start":241,"line_end":241,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96941,"byte_end":96948,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":96953,"byte_end":96962,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97334,"byte_end":97342,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97037,"byte_end":97072,"line_start":248,"line_end":248,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97077,"byte_end":97080,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97085,"byte_end":97098,"line_start":250,"line_end":250,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97103,"byte_end":97106,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97111,"byte_end":97122,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97127,"byte_end":97163,"line_start":253,"line_end":253,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97168,"byte_end":97182,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97187,"byte_end":97190,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97195,"byte_end":97241,"line_start":256,"line_end":256,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97246,"byte_end":97249,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97254,"byte_end":97296,"line_start":258,"line_end":258,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97301,"byte_end":97308,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97313,"byte_end":97322,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97484,"byte_end":97489,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Point2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Point3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d point with z-coordinate equals to zero.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d point with z-coordinate equals to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97397,"byte_end":97458,"line_start":265,"line_end":265,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97463,"byte_end":97472,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97964,"byte_end":97969,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"round","qualname":"<Point2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97602,"byte_end":97657,"line_start":274,"line_end":274,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97662,"byte_end":97665,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97670,"byte_end":97745,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97750,"byte_end":97753,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97758,"byte_end":97769,"line_start":278,"line_end":278,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97774,"byte_end":97799,"line_start":279,"line_end":279,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97804,"byte_end":97818,"line_start":280,"line_end":280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97823,"byte_end":97826,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).round(), point2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97831,"byte_end":97910,"line_start":282,"line_end":282,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97915,"byte_end":97922,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97927,"byte_end":97936,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":97941,"byte_end":97952,"line_start":285,"line_end":285,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98472,"byte_end":98476,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98076,"byte_end":98167,"line_start":293,"line_end":293,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98172,"byte_end":98175,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98180,"byte_end":98255,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98260,"byte_end":98263,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98268,"byte_end":98279,"line_start":297,"line_end":297,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98284,"byte_end":98309,"line_start":298,"line_end":298,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98314,"byte_end":98328,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98333,"byte_end":98336,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).ceil(), point2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98341,"byte_end":98418,"line_start":301,"line_end":301,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98423,"byte_end":98430,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98435,"byte_end":98444,"line_start":303,"line_end":303,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98449,"byte_end":98460,"line_start":304,"line_end":304,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98976,"byte_end":98981,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98580,"byte_end":98668,"line_start":312,"line_end":312,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98673,"byte_end":98676,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98681,"byte_end":98756,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98761,"byte_end":98764,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98769,"byte_end":98780,"line_start":316,"line_end":316,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98785,"byte_end":98810,"line_start":317,"line_end":317,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98815,"byte_end":98829,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98834,"byte_end":98837,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).floor(), point2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98842,"byte_end":98922,"line_start":320,"line_end":320,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98927,"byte_end":98934,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98939,"byte_end":98948,"line_start":322,"line_end":322,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":98953,"byte_end":98964,"line_start":323,"line_end":323,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99729,"byte_end":99733,"line_start":349,"line_end":349,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99088,"byte_end":99150,"line_start":331,"line_end":331,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99155,"byte_end":99158,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99163,"byte_end":99176,"line_start":333,"line_end":333,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99181,"byte_end":99184,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99189,"byte_end":99200,"line_start":335,"line_end":335,"column_start":5,"column_end":16}},{"value":"/ use euclid::point2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99205,"byte_end":99228,"line_start":336,"line_end":336,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99233,"byte_end":99266,"line_start":337,"line_end":337,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99271,"byte_end":99274,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let from: Point2D<_> = point2(0.0, 10.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99279,"byte_end":99324,"line_start":339,"line_end":339,"column_start":5,"column_end":50}},{"value":"/ let to:  Point2D<_> = point2(8.0, -4.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99329,"byte_end":99373,"line_start":340,"line_end":340,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99378,"byte_end":99381,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point2(-8.0,  24.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99386,"byte_end":99443,"line_start":342,"line_end":342,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point2( 0.0,  10.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99448,"byte_end":99505,"line_start":343,"line_end":343,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point2( 4.0,   3.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99510,"byte_end":99567,"line_start":344,"line_end":344,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point2( 8.0,  -4.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99572,"byte_end":99629,"line_start":345,"line_end":345,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point2(16.0, -18.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99634,"byte_end":99691,"line_start":346,"line_end":346,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99696,"byte_end":99703,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99708,"byte_end":99717,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100035,"byte_end":100038,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"min","qualname":"<Point2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100014,"byte_end":100023,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100159,"byte_end":100162,"line_start":365,"line_end":365,"column_start":12,"column_end":15},"name":"max","qualname":"<Point2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100138,"byte_end":100147,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100456,"byte_end":100461,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100262,"byte_end":100332,"line_start":369,"line_end":369,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100337,"byte_end":100373,"line_start":370,"line_end":370,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100378,"byte_end":100381,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100386,"byte_end":100430,"line_start":372,"line_end":372,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100435,"byte_end":100444,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101002,"byte_end":101006,"line_start":389,"line_end":389,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100622,"byte_end":100696,"line_start":383,"line_end":383,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100701,"byte_end":100704,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100709,"byte_end":100796,"line_start":385,"line_end":385,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100801,"byte_end":100889,"line_start":386,"line_end":386,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100894,"byte_end":100976,"line_start":387,"line_end":387,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100981,"byte_end":100990,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101469,"byte_end":101477,"line_start":398,"line_end":398,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101094,"byte_end":101177,"line_start":393,"line_end":393,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101182,"byte_end":101185,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101190,"byte_end":101277,"line_start":395,"line_end":395,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101282,"byte_end":101370,"line_start":396,"line_end":396,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101375,"byte_end":101457,"line_start":397,"line_end":397,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101792,"byte_end":101798,"line_start":409,"line_end":409,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101737,"byte_end":101766,"line_start":407,"line_end":407,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101771,"byte_end":101780,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101912,"byte_end":101918,"line_start":415,"line_end":415,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101857,"byte_end":101886,"line_start":413,"line_end":413,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101891,"byte_end":101900,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102271,"byte_end":102279,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":101977,"byte_end":102036,"line_start":419,"line_end":419,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102041,"byte_end":102044,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102049,"byte_end":102125,"line_start":421,"line_end":421,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102130,"byte_end":102204,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102209,"byte_end":102245,"line_start":423,"line_end":423,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102250,"byte_end":102259,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102632,"byte_end":102638,"line_start":435,"line_end":435,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102340,"byte_end":102397,"line_start":429,"line_end":429,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102402,"byte_end":102405,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102410,"byte_end":102486,"line_start":431,"line_end":431,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102491,"byte_end":102565,"line_start":432,"line_end":432,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102570,"byte_end":102606,"line_start":433,"line_end":433,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102611,"byte_end":102620,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102987,"byte_end":102993,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102697,"byte_end":102752,"line_start":439,"line_end":439,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102757,"byte_end":102760,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102765,"byte_end":102841,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102846,"byte_end":102920,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102925,"byte_end":102961,"line_start":443,"line_end":443,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":102966,"byte_end":102975,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103342,"byte_end":103348,"line_start":455,"line_end":455,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103052,"byte_end":103107,"line_start":449,"line_end":449,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103112,"byte_end":103115,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103120,"byte_end":103196,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103201,"byte_end":103275,"line_start":452,"line_end":452,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103280,"byte_end":103316,"line_start":453,"line_end":453,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103321,"byte_end":103330,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103484,"byte_end":103492,"line_start":462,"line_end":462,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point2D<T, U>>::add_size","value":"pub fn add_size(Self, &Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103463,"byte_end":103472,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103680,"byte_end":103691,"line_start":469,"line_end":469,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point2D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103659,"byte_end":103668,"line_start":468,"line_end":468,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1044},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108966,"byte_end":108973,"line_start":693,"line_end":693,"column_start":12,"column_end":19},"name":"Point3D","qualname":"::point::Point3D","value":"Point3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050}],"decl_id":null,"docs":" A 3d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Point tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108909,"byte_end":108943,"line_start":691,"line_end":691,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108944,"byte_end":108954,"line_start":692,"line_end":692,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1047},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108990,"byte_end":108991,"line_start":694,"line_end":694,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point3D::x","value":"T","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1048},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109004,"byte_end":109005,"line_start":695,"line_end":695,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point3D::y","value":"T","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1049},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109018,"byte_end":109019,"line_start":696,"line_end":696,"column_start":9,"column_end":10},"name":"z","qualname":"::point::Point3D::z","value":"T","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1050},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109051,"byte_end":109056,"line_start":698,"line_end":698,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1044},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111061,"byte_end":111067,"line_start":789,"line_end":789,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point3D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110987,"byte_end":111035,"line_start":787,"line_end":787,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111040,"byte_end":111049,"line_start":788,"line_end":788,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111250,"byte_end":111254,"line_start":798,"line_end":798,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111179,"byte_end":111224,"line_start":796,"line_end":796,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111229,"byte_end":111238,"line_start":797,"line_end":797,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111410,"byte_end":111413,"line_start":807,"line_end":807,"column_start":18,"column_end":21},"name":"new","qualname":"<Point3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111332,"byte_end":111378,"line_start":805,"line_end":805,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111383,"byte_end":111392,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111649,"byte_end":111661,"line_start":818,"line_end":818,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111558,"byte_end":111623,"line_start":816,"line_end":816,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111628,"byte_end":111637,"line_start":817,"line_end":817,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111826,"byte_end":111838,"line_start":824,"line_end":824,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point3D<T, U>>::from_untyped","value":"pub fn from_untyped(Point3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111764,"byte_end":111800,"line_start":822,"line_end":822,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111805,"byte_end":111814,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112081,"byte_end":112090,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111953,"byte_end":111987,"line_start":830,"line_end":830,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111992,"byte_end":111995,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin to this point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112000,"byte_end":112055,"line_start":832,"line_end":832,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112060,"byte_end":112069,"line_start":833,"line_end":833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112345,"byte_end":112347,"line_start":845,"line_end":845,"column_start":12,"column_end":14},"name":"xy","qualname":"<Point3D<T, U>>::xy","value":"pub fn xy(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and y coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112258,"byte_end":112319,"line_start":843,"line_end":843,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112324,"byte_end":112333,"line_start":844,"line_end":844,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112502,"byte_end":112504,"line_start":851,"line_end":851,"column_start":12,"column_end":14},"name":"xz","qualname":"<Point3D<T, U>>::xz","value":"pub fn xz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112415,"byte_end":112476,"line_start":849,"line_end":849,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112481,"byte_end":112490,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112659,"byte_end":112661,"line_start":857,"line_end":857,"column_start":12,"column_end":14},"name":"yz","qualname":"<Point3D<T, U>>::yz","value":"pub fn yz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112572,"byte_end":112633,"line_start":855,"line_end":855,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112638,"byte_end":112647,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113036,"byte_end":113044,"line_start":874,"line_end":874,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112729,"byte_end":112768,"line_start":861,"line_end":861,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112773,"byte_end":112776,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112781,"byte_end":112794,"line_start":863,"line_end":863,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112799,"byte_end":112802,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112807,"byte_end":112818,"line_start":865,"line_end":865,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112823,"byte_end":112859,"line_start":866,"line_end":866,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112864,"byte_end":112878,"line_start":867,"line_end":867,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112883,"byte_end":112886,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112891,"byte_end":112940,"line_start":869,"line_end":869,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112945,"byte_end":112948,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8, 0]);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":112953,"byte_end":112998,"line_start":871,"line_end":871,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113003,"byte_end":113010,"line_start":872,"line_end":872,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113015,"byte_end":113024,"line_start":873,"line_end":873,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113128,"byte_end":113139,"line_start":879,"line_end":879,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Point3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113107,"byte_end":113116,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113550,"byte_end":113558,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113244,"byte_end":113282,"line_start":886,"line_end":886,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113287,"byte_end":113290,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113295,"byte_end":113308,"line_start":888,"line_end":888,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113313,"byte_end":113316,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113321,"byte_end":113332,"line_start":890,"line_end":890,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113337,"byte_end":113373,"line_start":891,"line_end":891,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113378,"byte_end":113392,"line_start":892,"line_end":892,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113397,"byte_end":113400,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113405,"byte_end":113454,"line_start":894,"line_end":894,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113459,"byte_end":113462,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8, 0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113467,"byte_end":113512,"line_start":896,"line_end":896,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113517,"byte_end":113524,"line_start":897,"line_end":897,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113529,"byte_end":113538,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113645,"byte_end":113656,"line_start":904,"line_end":904,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Point3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113624,"byte_end":113633,"line_start":903,"line_end":903,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114192,"byte_end":114202,"line_start":926,"line_end":926,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113767,"byte_end":113821,"line_start":911,"line_end":911,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113826,"byte_end":113829,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113834,"byte_end":113847,"line_start":913,"line_end":913,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113852,"byte_end":113855,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113860,"byte_end":113871,"line_start":915,"line_end":915,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113876,"byte_end":113912,"line_start":916,"line_end":916,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113917,"byte_end":113931,"line_start":917,"line_end":917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113936,"byte_end":113939,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113944,"byte_end":113993,"line_start":919,"line_end":919,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":113998,"byte_end":114001,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114006,"byte_end":114052,"line_start":921,"line_end":921,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114057,"byte_end":114103,"line_start":922,"line_end":922,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.z, point.to_untyped().z);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114108,"byte_end":114154,"line_start":923,"line_end":923,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114159,"byte_end":114166,"line_start":924,"line_end":924,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114171,"byte_end":114180,"line_start":925,"line_end":925,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114741,"byte_end":114750,"line_start":946,"line_end":946,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114288,"byte_end":114336,"line_start":930,"line_end":930,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114341,"byte_end":114344,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114349,"byte_end":114362,"line_start":932,"line_end":932,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114367,"byte_end":114370,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114375,"byte_end":114386,"line_start":934,"line_end":934,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114391,"byte_end":114427,"line_start":935,"line_end":935,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114432,"byte_end":114446,"line_start":936,"line_end":936,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114451,"byte_end":114465,"line_start":937,"line_end":937,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114470,"byte_end":114473,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114478,"byte_end":114527,"line_start":939,"line_end":939,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114532,"byte_end":114535,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114540,"byte_end":114591,"line_start":941,"line_end":941,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114596,"byte_end":114647,"line_start":942,"line_end":942,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.z, point.cast_unit::<Cm>().z);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114652,"byte_end":114703,"line_start":943,"line_end":943,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114708,"byte_end":114715,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114720,"byte_end":114729,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114883,"byte_end":114888,"line_start":952,"line_end":952,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Point3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d point.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114829,"byte_end":114857,"line_start":950,"line_end":950,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114862,"byte_end":114871,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115315,"byte_end":115320,"line_start":968,"line_end":968,"column_start":12,"column_end":17},"name":"round","qualname":"<Point3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":114943,"byte_end":114998,"line_start":956,"line_end":956,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115003,"byte_end":115006,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115011,"byte_end":115086,"line_start":958,"line_end":958,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115091,"byte_end":115094,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115099,"byte_end":115110,"line_start":960,"line_end":960,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115115,"byte_end":115140,"line_start":961,"line_end":961,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115145,"byte_end":115159,"line_start":962,"line_end":962,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115164,"byte_end":115167,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).round(), point3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115172,"byte_end":115261,"line_start":964,"line_end":964,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115266,"byte_end":115273,"line_start":965,"line_end":965,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115278,"byte_end":115287,"line_start":966,"line_end":966,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115292,"byte_end":115303,"line_start":967,"line_end":967,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115849,"byte_end":115853,"line_start":987,"line_end":987,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115443,"byte_end":115534,"line_start":975,"line_end":975,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115539,"byte_end":115542,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115547,"byte_end":115622,"line_start":977,"line_end":977,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115627,"byte_end":115630,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115635,"byte_end":115646,"line_start":979,"line_end":979,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115651,"byte_end":115676,"line_start":980,"line_end":980,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115681,"byte_end":115695,"line_start":981,"line_end":981,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115700,"byte_end":115703,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), point3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115708,"byte_end":115795,"line_start":983,"line_end":983,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115800,"byte_end":115807,"line_start":984,"line_end":984,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115812,"byte_end":115821,"line_start":985,"line_end":985,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115826,"byte_end":115837,"line_start":986,"line_end":986,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116378,"byte_end":116383,"line_start":1006,"line_end":1006,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":115972,"byte_end":116060,"line_start":994,"line_end":994,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116065,"byte_end":116068,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116073,"byte_end":116148,"line_start":996,"line_end":996,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116153,"byte_end":116156,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116161,"byte_end":116172,"line_start":998,"line_end":998,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116177,"byte_end":116202,"line_start":999,"line_end":999,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116207,"byte_end":116221,"line_start":1000,"line_end":1000,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116226,"byte_end":116229,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).floor(), point3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116234,"byte_end":116324,"line_start":1002,"line_end":1002,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116329,"byte_end":116336,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116341,"byte_end":116350,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116355,"byte_end":116366,"line_start":1005,"line_end":1005,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117189,"byte_end":117193,"line_start":1031,"line_end":1031,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116506,"byte_end":116568,"line_start":1013,"line_end":1013,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116573,"byte_end":116576,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116581,"byte_end":116594,"line_start":1015,"line_end":1015,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116599,"byte_end":116602,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116607,"byte_end":116618,"line_start":1017,"line_end":1017,"column_start":5,"column_end":16}},{"value":"/ use euclid::point3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116623,"byte_end":116646,"line_start":1018,"line_end":1018,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116651,"byte_end":116684,"line_start":1019,"line_end":1019,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116689,"byte_end":116692,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ let from: Point3D<_> = point3(0.0, 10.0, -1.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116697,"byte_end":116748,"line_start":1021,"line_end":1021,"column_start":5,"column_end":56}},{"value":"/ let to:  Point3D<_> = point3(8.0, -4.0,  0.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116753,"byte_end":116803,"line_start":1022,"line_end":1022,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116808,"byte_end":116811,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116816,"byte_end":116879,"line_start":1024,"line_end":1024,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116884,"byte_end":116947,"line_start":1025,"line_end":1025,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":116952,"byte_end":117015,"line_start":1026,"line_end":1026,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117020,"byte_end":117083,"line_start":1027,"line_end":1027,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point3(16.0, -18.0,  1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117088,"byte_end":117151,"line_start":1028,"line_end":1028,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117156,"byte_end":117163,"line_start":1029,"line_end":1029,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117168,"byte_end":117177,"line_start":1030,"line_end":1030,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117572,"byte_end":117575,"line_start":1046,"line_end":1046,"column_start":12,"column_end":15},"name":"min","qualname":"<Point3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117551,"byte_end":117560,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117765,"byte_end":117768,"line_start":1055,"line_end":1055,"column_start":12,"column_end":15},"name":"max","qualname":"<Point3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117744,"byte_end":117753,"line_start":1054,"line_end":1054,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118131,"byte_end":118136,"line_start":1068,"line_end":1068,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117937,"byte_end":118007,"line_start":1063,"line_end":1063,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118012,"byte_end":118048,"line_start":1064,"line_end":1064,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118053,"byte_end":118056,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118061,"byte_end":118105,"line_start":1066,"line_end":1066,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118110,"byte_end":118119,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118677,"byte_end":118681,"line_start":1083,"line_end":1083,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118297,"byte_end":118371,"line_start":1077,"line_end":1077,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118376,"byte_end":118379,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118384,"byte_end":118471,"line_start":1079,"line_end":1079,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118476,"byte_end":118564,"line_start":1080,"line_end":1080,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118569,"byte_end":118651,"line_start":1081,"line_end":1081,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118656,"byte_end":118665,"line_start":1082,"line_end":1082,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119144,"byte_end":119152,"line_start":1092,"line_end":1092,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118769,"byte_end":118852,"line_start":1087,"line_end":1087,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118857,"byte_end":118860,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118865,"byte_end":118952,"line_start":1089,"line_end":1089,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118957,"byte_end":119045,"line_start":1090,"line_end":1090,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119050,"byte_end":119132,"line_start":1091,"line_end":1091,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119549,"byte_end":119555,"line_start":1107,"line_end":1107,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119494,"byte_end":119523,"line_start":1105,"line_end":1105,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119528,"byte_end":119537,"line_start":1106,"line_end":1106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119669,"byte_end":119675,"line_start":1113,"line_end":1113,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119614,"byte_end":119643,"line_start":1111,"line_end":1111,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119648,"byte_end":119657,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120028,"byte_end":120036,"line_start":1123,"line_end":1123,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119734,"byte_end":119793,"line_start":1117,"line_end":1117,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119798,"byte_end":119801,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119806,"byte_end":119882,"line_start":1119,"line_end":1119,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119887,"byte_end":119961,"line_start":1120,"line_end":1120,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":119966,"byte_end":120002,"line_start":1121,"line_end":1121,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120007,"byte_end":120016,"line_start":1122,"line_end":1122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120389,"byte_end":120395,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120097,"byte_end":120154,"line_start":1127,"line_end":1127,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120159,"byte_end":120162,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120167,"byte_end":120243,"line_start":1129,"line_end":1129,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120248,"byte_end":120322,"line_start":1130,"line_end":1130,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120327,"byte_end":120363,"line_start":1131,"line_end":1131,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120368,"byte_end":120377,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120746,"byte_end":120752,"line_start":1143,"line_end":1143,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120454,"byte_end":120511,"line_start":1137,"line_end":1137,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120516,"byte_end":120519,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120524,"byte_end":120600,"line_start":1139,"line_end":1139,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120605,"byte_end":120679,"line_start":1140,"line_end":1140,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120684,"byte_end":120720,"line_start":1141,"line_end":1141,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120725,"byte_end":120734,"line_start":1142,"line_end":1142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121103,"byte_end":121109,"line_start":1153,"line_end":1153,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` point, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120811,"byte_end":120868,"line_start":1147,"line_end":1147,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120873,"byte_end":120876,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120881,"byte_end":120957,"line_start":1149,"line_end":1149,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":120962,"byte_end":121036,"line_start":1150,"line_end":1150,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121041,"byte_end":121077,"line_start":1151,"line_end":1151,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121082,"byte_end":121091,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121245,"byte_end":121253,"line_start":1160,"line_end":1160,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point3D<T, U>>::add_size","value":"pub fn add_size(Self, Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121224,"byte_end":121233,"line_start":1159,"line_end":1159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121509,"byte_end":121520,"line_start":1171,"line_end":1171,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point3D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121488,"byte_end":121497,"line_start":1170,"line_end":1170,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1259},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127513,"byte_end":127519,"line_start":1429,"line_end":1429,"column_start":14,"column_end":20},"name":"point2","qualname":"::point::point2","value":"pub const fn point2<T, U>(T, T) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point2D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point2D::new(x, y)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127450,"byte_end":127489,"line_start":1427,"line_end":1427,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127490,"byte_end":127499,"line_start":1428,"line_end":1428,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1262},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127693,"byte_end":127699,"line_start":1439,"line_end":1439,"column_start":14,"column_end":20},"name":"point3","qualname":"::point::point3","value":"pub const fn point3<T, U>(T, T, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point3D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point3D::new(x, y)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127630,"byte_end":127669,"line_start":1437,"line_end":1437,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127670,"byte_end":127679,"line_start":1438,"line_end":1438,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1289},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142586,"byte_end":142590,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect { origin, size }","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293}],"decl_id":null,"docs":" A 2d Rectangle optionally tagged with a unit.","sig":null,"attributes":[{"value":"/ A 2d Rectangle optionally tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":141878,"byte_end":141927,"line_start":29,"line_end":29,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":141928,"byte_end":141931,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":141932,"byte_end":141952,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":141953,"byte_end":141956,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `Rect` is represented by an origin point and a size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":141957,"byte_end":142013,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142014,"byte_end":142017,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See [`Rect`] for a rectangle represented by two endpoints.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142018,"byte_end":142080,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142081,"byte_end":142084,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Empty rectangle","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142085,"byte_end":142106,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142107,"byte_end":142110,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A rectangle is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142111,"byte_end":142198,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142199,"byte_end":142224,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`size.x < 0` or `size.y < 0`),","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142225,"byte_end":142284,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142285,"byte_end":142308,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142309,"byte_end":142312,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142313,"byte_end":142347,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142348,"byte_end":142380,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142381,"byte_end":142391,"line_start":46,"line_end":46,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1292},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142607,"byte_end":142613,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"origin","qualname":"::rect::Rect::origin","value":"point::Point2D<T, U>","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1293},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142638,"byte_end":142642,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"size","qualname":"::rect::Rect::size","value":"size::Size2D<T, U>","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143688,"byte_end":143691,"line_start":99,"line_end":99,"column_start":18,"column_end":21},"name":"new","qualname":"<Rect<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143640,"byte_end":143656,"line_start":97,"line_end":97,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143661,"byte_end":143670,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143900,"byte_end":143904,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"zero","qualname":"<Rect<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143831,"byte_end":143874,"line_start":108,"line_end":108,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143879,"byte_end":143888,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144060,"byte_end":144069,"line_start":116,"line_end":116,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Rect<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rect of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a rect of the given size, at offset zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143981,"byte_end":144034,"line_start":114,"line_end":114,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144039,"byte_end":144048,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144278,"byte_end":144281,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"min","qualname":"<Rect<T, U>>::min","value":"pub fn min(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144257,"byte_end":144266,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144360,"byte_end":144363,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect<T, U>>::max","value":"pub fn max(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144339,"byte_end":144348,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144454,"byte_end":144459,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"max_x","qualname":"<Rect<T, U>>::max_x","value":"pub fn max_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144433,"byte_end":144442,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144546,"byte_end":144551,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"min_x","qualname":"<Rect<T, U>>::min_x","value":"pub fn min_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144525,"byte_end":144534,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144620,"byte_end":144625,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"max_y","qualname":"<Rect<T, U>>::max_y","value":"pub fn max_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144599,"byte_end":144608,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144713,"byte_end":144718,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"min_y","qualname":"<Rect<T, U>>::min_y","value":"pub fn min_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144692,"byte_end":144701,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144787,"byte_end":144792,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144766,"byte_end":144775,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144863,"byte_end":144869,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144842,"byte_end":144851,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144941,"byte_end":144948,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Rect<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144920,"byte_end":144929,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145037,"byte_end":145044,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Rect<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145016,"byte_end":145025,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145209,"byte_end":145218,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"translate","qualname":"<Rect<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same rectangle, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same rectangle, translated by a vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145112,"byte_end":145167,"line_start":178,"line_end":178,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145172,"byte_end":145181,"line_start":179,"line_end":179,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145186,"byte_end":145197,"line_start":180,"line_end":180,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145335,"byte_end":145343,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"to_box2d","qualname":"<Rect<T, U>>::to_box2d","value":"pub fn to_box2d(&Self) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145314,"byte_end":145323,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145767,"byte_end":145775,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"contains","qualname":"<Rect<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the point. Points are considered\n in the rectangle if they are on the left or top edge, but outside if they\n are on the right or bottom edge.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the point. Points are considered","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145542,"byte_end":145618,"line_start":198,"line_end":198,"column_start":5,"column_end":81}},{"value":"/ in the rectangle if they are on the left or top edge, but outside if they","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145623,"byte_end":145700,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"/ are on the right or bottom edge.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145705,"byte_end":145741,"line_start":200,"line_end":200,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145746,"byte_end":145755,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145879,"byte_end":145889,"line_start":207,"line_end":207,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Rect<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145858,"byte_end":145867,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146107,"byte_end":146119,"line_start":217,"line_end":217,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Rect<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146086,"byte_end":146095,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146470,"byte_end":146477,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Rect<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146433,"byte_end":146442,"line_start":232,"line_end":232,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146447,"byte_end":146458,"line_start":233,"line_end":233,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147075,"byte_end":147088,"line_start":253,"line_end":253,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<Rect<T, U>>::contains_rect","value":"pub fn contains_rect(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the interior of rect. Always\n returns true if rect is empty, and always returns false if rect is\n nonempty but this rectangle is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the interior of rect. Always","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146856,"byte_end":146928,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ returns true if rect is empty, and always returns false if rect is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146933,"byte_end":147003,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/ nonempty but this rectangle is empty.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147008,"byte_end":147049,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147054,"byte_end":147063,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147723,"byte_end":147733,"line_start":271,"line_end":271,"column_start":12,"column_end":22},"name":"inner_rect","qualname":"<Rect<T, U>>::inner_rect","value":"pub fn inner_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147451,"byte_end":147509,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147514,"byte_end":147517,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal and vertical","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147522,"byte_end":147596,"line_start":268,"line_end":268,"column_start":5,"column_end":79}},{"value":"/ offsets must not be larger than the original side length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147601,"byte_end":147662,"line_start":269,"line_end":269,"column_start":5,"column_end":66}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147667,"byte_end":147711,"line_start":270,"line_end":270,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148483,"byte_end":148493,"line_start":293,"line_end":293,"column_start":12,"column_end":22},"name":"outer_rect","qualname":"<Rect<T, U>>::outer_rect","value":"pub fn outer_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an outer rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an outer rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148282,"byte_end":148340,"line_start":289,"line_end":289,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148345,"byte_end":148348,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded rectangle is returned.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148353,"byte_end":148422,"line_start":291,"line_end":291,"column_start":5,"column_end":74}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148427,"byte_end":148471,"line_start":292,"line_end":292,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149463,"byte_end":149474,"line_start":317,"line_end":317,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Rect<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest rectangle defined by the top/bottom/left/right-most\n points provided as parameter.","sig":null,"attributes":[{"value":"/ Returns the smallest rectangle defined by the top/bottom/left/right-most","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148903,"byte_end":148979,"line_start":308,"line_end":308,"column_start":5,"column_end":81}},{"value":"/ points provided as parameter.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148984,"byte_end":149017,"line_start":309,"line_end":309,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149022,"byte_end":149025,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Note: This function has a behavior that can be surprising because","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149030,"byte_end":149099,"line_start":311,"line_end":311,"column_start":5,"column_end":74}},{"value":"/ the right-most and bottom-most points are exactly on the edge","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149104,"byte_end":149169,"line_start":312,"line_end":312,"column_start":5,"column_end":70}},{"value":"/ of the rectangle while the `contains` function is has exclusive","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149174,"byte_end":149241,"line_start":313,"line_end":313,"column_start":5,"column_end":72}},{"value":"/ semantic on these edges. This means that the right-most and bottom-most","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149246,"byte_end":149321,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ points provided to `from_points` will count as not contained by the rect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149326,"byte_end":149403,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/ This behavior may change in the future.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149408,"byte_end":149451,"line_start":316,"line_end":316,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149835,"byte_end":149839,"line_start":332,"line_end":332,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rect<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this rectangle and another rectangle.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this rectangle and another rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149739,"byte_end":149809,"line_start":330,"line_end":330,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149814,"byte_end":149823,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150100,"byte_end":150106,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"center","qualname":"<Rect<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150361,"byte_end":150366,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"name":"union","qualname":"<Rect<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150340,"byte_end":150349,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150668,"byte_end":150673,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"scale","qualname":"<Rect<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Copy + Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150647,"byte_end":150656,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151010,"byte_end":151014,"line_start":382,"line_end":382,"column_start":12,"column_end":16},"name":"area","qualname":"<Rect<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150989,"byte_end":150998,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151138,"byte_end":151146,"line_start":389,"line_end":389,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Rect<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151117,"byte_end":151126,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151277,"byte_end":151289,"line_start":396,"line_end":396,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Rect<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151256,"byte_end":151265,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153217,"byte_end":153227,"line_start":474,"line_end":474,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rect<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153137,"byte_end":153191,"line_start":472,"line_end":472,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153196,"byte_end":153205,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153402,"byte_end":153414,"line_start":480,"line_end":480,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rect<T, U>>::from_untyped","value":"pub fn from_untyped(&Rect<T, UnknownUnit>) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153340,"byte_end":153376,"line_start":478,"line_end":478,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153381,"byte_end":153390,"line_start":479,"line_end":479,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153627,"byte_end":153636,"line_start":489,"line_end":489,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rect<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Rect<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153584,"byte_end":153601,"line_start":487,"line_end":487,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153606,"byte_end":153615,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154162,"byte_end":154166,"line_start":501,"line_end":501,"column_start":12,"column_end":16},"name":"cast","qualname":"<Rect<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Rect<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153782,"byte_end":153856,"line_start":495,"line_end":495,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153861,"byte_end":153864,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153869,"byte_end":153956,"line_start":497,"line_end":497,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153961,"byte_end":154049,"line_start":498,"line_end":498,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154054,"byte_end":154136,"line_start":499,"line_end":499,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154141,"byte_end":154150,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154650,"byte_end":154658,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Rect<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Rect<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154275,"byte_end":154358,"line_start":505,"line_end":505,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154363,"byte_end":154366,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154371,"byte_end":154458,"line_start":507,"line_end":507,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154463,"byte_end":154551,"line_start":508,"line_end":508,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154556,"byte_end":154638,"line_start":509,"line_end":509,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154994,"byte_end":155000,"line_start":521,"line_end":521,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Rect<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Rect<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154935,"byte_end":154968,"line_start":519,"line_end":519,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":154973,"byte_end":154982,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155116,"byte_end":155122,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Rect<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Rect<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155057,"byte_end":155090,"line_start":525,"line_end":525,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155095,"byte_end":155104,"line_start":526,"line_end":526,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155489,"byte_end":155497,"line_start":537,"line_end":537,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Rect<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Rect<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` rectangle, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155179,"byte_end":155242,"line_start":531,"line_end":531,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155247,"byte_end":155250,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155255,"byte_end":155335,"line_start":533,"line_end":533,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155340,"byte_end":155415,"line_start":534,"line_end":534,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155420,"byte_end":155463,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155468,"byte_end":155477,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155864,"byte_end":155870,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Rect<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Rect<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` rectangle, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155556,"byte_end":155617,"line_start":541,"line_end":541,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155622,"byte_end":155625,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155630,"byte_end":155710,"line_start":543,"line_end":543,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155715,"byte_end":155790,"line_start":544,"line_end":544,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155795,"byte_end":155838,"line_start":545,"line_end":545,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155843,"byte_end":155852,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156235,"byte_end":156241,"line_start":557,"line_end":557,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Rect<T, U>>::to_u64","value":"pub fn to_u64(&Self) -> Rect<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` rectangle, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155927,"byte_end":155988,"line_start":551,"line_end":551,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":155993,"byte_end":155996,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156001,"byte_end":156081,"line_start":553,"line_end":553,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156086,"byte_end":156161,"line_start":554,"line_end":554,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156166,"byte_end":156209,"line_start":555,"line_end":555,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156214,"byte_end":156223,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156606,"byte_end":156612,"line_start":567,"line_end":567,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Rect<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Rect<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` rectangle, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156298,"byte_end":156359,"line_start":561,"line_end":561,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156364,"byte_end":156367,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156372,"byte_end":156452,"line_start":563,"line_end":563,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156457,"byte_end":156532,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156537,"byte_end":156580,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156585,"byte_end":156594,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156977,"byte_end":156983,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Rect<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Rect<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` rectangle, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156669,"byte_end":156730,"line_start":571,"line_end":571,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156735,"byte_end":156738,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156743,"byte_end":156823,"line_start":573,"line_end":573,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156828,"byte_end":156903,"line_start":574,"line_end":574,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156908,"byte_end":156951,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":156956,"byte_end":156965,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157978,"byte_end":157983,"line_start":600,"line_end":600,"column_start":12,"column_end":17},"name":"round","qualname":"<Rect<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the returned rectangle has the same set of pixel centers as the original\n one.\n Edges at offset 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157130,"byte_end":157205,"line_start":583,"line_end":583,"column_start":5,"column_end":80}},{"value":"/ the returned rectangle has the same set of pixel centers as the original","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157210,"byte_end":157286,"line_start":584,"line_end":584,"column_start":5,"column_end":81}},{"value":"/ one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157291,"byte_end":157299,"line_start":585,"line_end":585,"column_start":5,"column_end":13}},{"value":"/ Edges at offset 0.5 round up.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157304,"byte_end":157337,"line_start":586,"line_end":586,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157342,"byte_end":157404,"line_start":587,"line_end":587,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157409,"byte_end":157481,"line_start":588,"line_end":588,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157486,"byte_end":157518,"line_start":589,"line_end":589,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157523,"byte_end":157606,"line_start":590,"line_end":590,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157611,"byte_end":157658,"line_start":591,"line_end":591,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157663,"byte_end":157666,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157671,"byte_end":157688,"line_start":593,"line_end":593,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157693,"byte_end":157778,"line_start":594,"line_end":594,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157783,"byte_end":157869,"line_start":595,"line_end":595,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157874,"byte_end":157905,"line_start":596,"line_end":596,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157910,"byte_end":157913,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157918,"byte_end":157950,"line_start":598,"line_end":598,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157955,"byte_end":157966,"line_start":599,"line_end":599,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158514,"byte_end":158522,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Rect<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle contains the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158054,"byte_end":158129,"line_start":604,"line_end":604,"column_start":5,"column_end":80}},{"value":"/ the original rectangle contains the resulting rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158134,"byte_end":158194,"line_start":605,"line_end":605,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158199,"byte_end":158202,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158207,"byte_end":158224,"line_start":607,"line_end":607,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158229,"byte_end":158314,"line_start":608,"line_end":608,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158319,"byte_end":158405,"line_start":609,"line_end":609,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158410,"byte_end":158441,"line_start":610,"line_end":610,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158446,"byte_end":158449,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158454,"byte_end":158486,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158491,"byte_end":158502,"line_start":613,"line_end":613,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159063,"byte_end":159072,"line_start":628,"line_end":628,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Rect<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle is contained in the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158596,"byte_end":158671,"line_start":618,"line_end":618,"column_start":5,"column_end":80}},{"value":"/ the original rectangle is contained in the resulting rectangle.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158676,"byte_end":158743,"line_start":619,"line_end":619,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158748,"byte_end":158751,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158756,"byte_end":158773,"line_start":621,"line_end":621,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158778,"byte_end":158863,"line_start":622,"line_end":622,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158868,"byte_end":158954,"line_start":623,"line_end":623,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158959,"byte_end":158990,"line_start":624,"line_end":624,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":158995,"byte_end":158998,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159003,"byte_end":159035,"line_start":626,"line_end":626,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159040,"byte_end":159051,"line_start":627,"line_end":627,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1473},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159375,"byte_end":159379,"line_start":643,"line_end":643,"column_start":14,"column_end":18},"name":"rect","qualname":"::rect::rect","value":"pub const fn rect<T, U>(T, T, T, T) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159292,"byte_end":159361,"line_start":642,"line_end":642,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3657},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169571,"byte_end":169587,"line_start":23,"line_end":23,"column_start":12,"column_end":28},"name":"RigidTransform3D","qualname":"::rigid::RigidTransform3D","value":"RigidTransform3D { rotation, translation }","parent":null,"children":[{"krate":0,"index":3661},{"krate":0,"index":3662}],"decl_id":null,"docs":" A rigid transformation. All lengths are preserved under such a transformation.","sig":null,"attributes":[{"value":"/ A rigid transformation. All lengths are preserved under such a transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169063,"byte_end":169145,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169146,"byte_end":169149,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169150,"byte_end":169153,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Internally, this is a rotation and a translation, with the rotation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169154,"byte_end":169225,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ applied first (i.e. `Rotation * Translation`, in row-vector notation)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169226,"byte_end":169299,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169300,"byte_end":169303,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This can be more efficient to use over full matrices, especially if you","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169304,"byte_end":169379,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ have to deal with the decomposed quantities often.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169380,"byte_end":169434,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169549,"byte_end":169559,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3661},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169611,"byte_end":169619,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"rotation","qualname":"::rigid::RigidTransform3D::rotation","value":"rotation::Rotation3D<T, Src, Dst>","parent":{"krate":0,"index":3657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3662},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169654,"byte_end":169665,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"translation","qualname":"::rigid::RigidTransform3D::translation","value":"vector::Vector3D<T, Dst>","parent":{"krate":0,"index":3657},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169850,"byte_end":169853,"line_start":31,"line_end":31,"column_start":18,"column_end":21},"name":"new","qualname":"<RigidTransform3D<T, Src, Dst>>::new","value":"pub const fn new(Rotation3D<T, Src, Dst>, Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `rotation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `rotation` applies first","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169742,"byte_end":169818,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169823,"byte_end":169832,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170078,"byte_end":170087,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<RigidTransform3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> RigidTransform3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170430,"byte_end":170438,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"identity","qualname":"<RigidTransform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an identity transform\n","sig":null,"attributes":[{"value":"/ Construct an identity transform","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170369,"byte_end":170404,"line_start":49,"line_end":49,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170409,"byte_end":170418,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170681,"byte_end":170698,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"new_from_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::new_from_reversed","value":"pub fn new_from_reversed(Vector3D<T, Src>, Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `translation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `translation` applies first","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170576,"byte_end":170655,"line_start":58,"line_end":58,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170660,"byte_end":170669,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171256,"byte_end":171269,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"from_rotation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_rotation","value":"pub fn from_rotation(Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171235,"byte_end":171244,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171437,"byte_end":171453,"line_start":89,"line_end":89,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_translation","value":"pub fn from_translation(Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171416,"byte_end":171425,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171774,"byte_end":171792,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"decompose_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::decompose_reversed","value":"pub fn decompose_reversed(&Self)\n-> (Vector3D<T, Src>, Rotation3D<T, Src, Dst>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose this into a translation and an rotation to be applied in the opposite order","sig":null,"attributes":[{"value":"/ Decompose this into a translation and an rotation to be applied in the opposite order","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171602,"byte_end":171691,"line_start":96,"line_end":96,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171696,"byte_end":171699,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ i.e., the translation is applied _first_","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171704,"byte_end":171748,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":171753,"byte_end":171762,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172404,"byte_end":172408,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"then","qualname":"<RigidTransform3D<T, Src, Dst>>::then","value":"pub fn then<Dst2>(&Self, &RigidTransform3D<T, Dst, Dst2>)\n-> RigidTransform3D<T, Src, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n other's transformation applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172174,"byte_end":172236,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ other's transformation applies after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172241,"byte_end":172304,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172309,"byte_end":172312,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `self * other` in row-vector notation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172317,"byte_end":172378,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":172383,"byte_end":172392,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":173298,"byte_end":173305,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"inverse","qualname":"<RigidTransform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> RigidTransform3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation\n","sig":null,"attributes":[{"value":"/ Inverts the transformation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":173242,"byte_end":173272,"line_start":142,"line_end":142,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":173277,"byte_end":173286,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":173856,"byte_end":173868,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174104,"byte_end":174114,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174024,"byte_end":174078,"line_start":167,"line_end":167,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174083,"byte_end":174092,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174389,"byte_end":174401,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&RigidTransform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174327,"byte_end":174363,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174368,"byte_end":174377,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178668,"byte_end":178678,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"Rotation2D","qualname":"::rotation::Rotation2D","value":"Rotation2D { angle, _unit }","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1559}],"decl_id":null,"docs":" A transform that can represent rotations in 2d, represented as an angle in radians.\n","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 2d, represented as an angle in radians.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178339,"byte_end":178426,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178427,"byte_end":178437,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1558},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178727,"byte_end":178732,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"angle","qualname":"::rotation::Rotation2D::angle","value":"T","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":" Angle in radians\n","sig":null,"attributes":[{"value":"/ Angle in radians","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178698,"byte_end":178718,"line_start":34,"line_end":34,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1559},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178764,"byte_end":178769,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1554},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179579,"byte_end":179582,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2D<T, Src, Dst>>::new","value":"pub fn new(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179505,"byte_end":179553,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179558,"byte_end":179567,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179778,"byte_end":179785,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"radians","qualname":"<Rotation2D<T, Src, Dst>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179718,"byte_end":179766,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179918,"byte_end":179926,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179858,"byte_end":179892,"line_start":86,"line_end":86,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179897,"byte_end":179906,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1595},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180509,"byte_end":180518,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation2D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation2D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180066,"byte_end":180114,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180119,"byte_end":180122,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180127,"byte_end":180140,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180145,"byte_end":180148,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180153,"byte_end":180164,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180169,"byte_end":180198,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180203,"byte_end":180220,"line_start":103,"line_end":103,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180225,"byte_end":180242,"line_start":104,"line_end":104,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180247,"byte_end":180250,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180255,"byte_end":180273,"line_start":106,"line_end":106,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180278,"byte_end":180296,"line_start":107,"line_end":107,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180301,"byte_end":180304,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180309,"byte_end":180381,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180386,"byte_end":180389,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.cast_unit::<Local2, World2>().angle);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180394,"byte_end":180471,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180476,"byte_end":180483,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180488,"byte_end":180497,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181052,"byte_end":181062,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180674,"byte_end":180728,"line_start":121,"line_end":121,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180733,"byte_end":180736,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180741,"byte_end":180754,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180759,"byte_end":180762,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180767,"byte_end":180778,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180783,"byte_end":180812,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180817,"byte_end":180834,"line_start":127,"line_end":127,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180839,"byte_end":180856,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180861,"byte_end":180864,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180869,"byte_end":180941,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180946,"byte_end":180949,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.to_untyped().angle);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180954,"byte_end":181014,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181019,"byte_end":181026,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181031,"byte_end":181040,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181574,"byte_end":181586,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181151,"byte_end":181187,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181192,"byte_end":181195,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181200,"byte_end":181213,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181218,"byte_end":181221,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181226,"byte_end":181237,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181242,"byte_end":181271,"line_start":144,"line_end":144,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181276,"byte_end":181304,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181309,"byte_end":181326,"line_start":146,"line_end":146,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181331,"byte_end":181348,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181353,"byte_end":181356,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation2D<_, UnknownUnit, UnknownUnit> = Rotation2D::radians(42);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181361,"byte_end":181440,"line_start":149,"line_end":149,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181445,"byte_end":181448,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.angle, Rotation2D::<_, Local, World>::from_untyped(&rot).angle);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181453,"byte_end":181536,"line_start":151,"line_end":151,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181541,"byte_end":181548,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181553,"byte_end":181562,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181806,"byte_end":181815,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"get_angle","qualname":"<Rotation2D<T, Src, Dst>>::get_angle","value":"pub fn get_angle(&Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns self.angle as a strongly typed `Angle<T>`.\n","sig":null,"attributes":[{"value":"/ Returns self.angle as a strongly typed `Angle<T>`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181740,"byte_end":181794,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182030,"byte_end":182035,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Rotation2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Rotation3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3d rotation (around the z axis) from this 2d rotation.\n","sig":null,"attributes":[{"value":"/ Creates a 3d rotation (around the z axis) from this 2d rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181936,"byte_end":182004,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182009,"byte_end":182018,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182197,"byte_end":182204,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation2D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182130,"byte_end":182171,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182176,"byte_end":182185,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182400,"byte_end":182404,"line_start":184,"line_end":184,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation2D<T, Src, Dst>>::then","value":"pub fn then<NewSrc>(&Self, &Rotation2D<T, NewSrc, Src>)\n-> Rotation2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182293,"byte_end":182374,"line_start":182,"line_end":182,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182379,"byte_end":182388,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182761,"byte_end":182776,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182576,"byte_end":182636,"line_start":191,"line_end":191,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182641,"byte_end":182644,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182649,"byte_end":182735,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182740,"byte_end":182749,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183156,"byte_end":183172,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":182970,"byte_end":183031,"line_start":200,"line_end":200,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183036,"byte_end":183039,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183044,"byte_end":183130,"line_start":202,"line_end":202,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183135,"byte_end":183144,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183513,"byte_end":183525,"line_start":215,"line_end":215,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183432,"byte_end":183487,"line_start":213,"line_end":213,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183492,"byte_end":183501,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1620},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184371,"byte_end":184381,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"Rotation3D","qualname":"::rotation::Rotation3D","value":"Rotation3D { i, j, k, r, _unit }","parent":null,"children":[{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628}],"decl_id":null,"docs":" A transform that can represent rotations in 3d, represented as a quaternion.","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 3d, represented as a quaternion.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183620,"byte_end":183700,"line_start":220,"line_end":220,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183701,"byte_end":183704,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Most methods expect the quaternion to be normalized.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183705,"byte_end":183761,"line_start":222,"line_end":222,"column_start":1,"column_end":57}},{"value":"/ When in doubt, use `unit_quaternion` instead of `quaternion` to create","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183762,"byte_end":183836,"line_start":223,"line_end":223,"column_start":1,"column_end":75}},{"value":"/ a rotation as the former will ensure that its result is normalized.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183837,"byte_end":183908,"line_start":224,"line_end":224,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183909,"byte_end":183912,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Some people use the `x, y, z, w` (or `w, x, y, z`) notations. The equivalence is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183913,"byte_end":183997,"line_start":226,"line_end":226,"column_start":1,"column_end":85}},{"value":"/ as follows: `x -> i`, `y -> j`, `z -> k`, `w -> r`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183998,"byte_end":184053,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ The memory layout of this type corresponds to the `x, y, z, w` notation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184054,"byte_end":184129,"line_start":228,"line_end":228,"column_start":1,"column_end":76}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184130,"byte_end":184140,"line_start":229,"line_end":229,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1624},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184463,"byte_end":184464,"line_start":240,"line_end":240,"column_start":9,"column_end":10},"name":"i","qualname":"::rotation::Rotation3D::i","value":"T","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `i`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `i`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184401,"byte_end":184454,"line_start":239,"line_end":239,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1625},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184535,"byte_end":184536,"line_start":242,"line_end":242,"column_start":9,"column_end":10},"name":"j","qualname":"::rotation::Rotation3D::j","value":"T","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `j`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `j`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184473,"byte_end":184526,"line_start":241,"line_end":241,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1626},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184607,"byte_end":184608,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"k","qualname":"::rotation::Rotation3D::k","value":"T","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `k`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `k`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184545,"byte_end":184598,"line_start":243,"line_end":243,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1627},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184644,"byte_end":184645,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"r","qualname":"::rotation::Rotation3D::r","value":"T","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":" The real part.\n","sig":null,"attributes":[{"value":"/ The real part.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184617,"byte_end":184635,"line_start":245,"line_end":245,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1628},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184677,"byte_end":184682,"line_start":248,"line_end":248,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186076,"byte_end":186086,"line_start":299,"line_end":299,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<Rotation3D<T, Src, Dst>>::quaternion","value":"pub fn quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185626,"byte_end":185689,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185694,"byte_end":185697,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185702,"byte_end":185783,"line_start":291,"line_end":291,"column_start":5,"column_end":86}},{"value":"/ where `a`, `b` and `c` describe the vector part and the last parameter `r` is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185788,"byte_end":185869,"line_start":292,"line_end":292,"column_start":5,"column_end":86}},{"value":"/ the real part.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185874,"byte_end":185892,"line_start":293,"line_end":293,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185897,"byte_end":185900,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is not necessarily normalized. See [`unit_quaternion`].","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185905,"byte_end":185989,"line_start":295,"line_end":295,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185994,"byte_end":185997,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`unit_quaternion`]: #method.unit_quaternion","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186002,"byte_end":186050,"line_start":297,"line_end":297,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186055,"byte_end":186064,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186324,"byte_end":186332,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186264,"byte_end":186298,"line_start":309,"line_end":309,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186303,"byte_end":186312,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186609,"byte_end":186620,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"vector_part","qualname":"<Rotation3D<T, Src, Dst>>::vector_part","value":"pub fn vector_part(&Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector part (i, j, k) of this quaternion.\n","sig":null,"attributes":[{"value":"/ Returns the vector part (i, j, k) of this quaternion.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186526,"byte_end":186583,"line_start":323,"line_end":323,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186588,"byte_end":186597,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187374,"byte_end":187383,"line_start":349,"line_end":349,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186706,"byte_end":186754,"line_start":329,"line_end":329,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186759,"byte_end":186762,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186767,"byte_end":186780,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186785,"byte_end":186788,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186793,"byte_end":186804,"line_start":333,"line_end":333,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186809,"byte_end":186838,"line_start":334,"line_end":334,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186843,"byte_end":186860,"line_start":335,"line_end":335,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186865,"byte_end":186882,"line_start":336,"line_end":336,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186887,"byte_end":186890,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186895,"byte_end":186913,"line_start":338,"line_end":338,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186918,"byte_end":186936,"line_start":339,"line_end":339,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186941,"byte_end":186944,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186949,"byte_end":187032,"line_start":341,"line_end":341,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187037,"byte_end":187040,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.cast_unit::<Local2, World2>().i);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187045,"byte_end":187114,"line_start":343,"line_end":343,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.j, to_world.cast_unit::<Local2, World2>().j);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187119,"byte_end":187188,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.k, to_world.cast_unit::<Local2, World2>().k);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187193,"byte_end":187262,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.r, to_world.cast_unit::<Local2, World2>().r);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187267,"byte_end":187336,"line_start":346,"line_end":346,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187341,"byte_end":187348,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187353,"byte_end":187362,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188152,"byte_end":188162,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187600,"byte_end":187654,"line_start":359,"line_end":359,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187659,"byte_end":187662,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187667,"byte_end":187680,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187685,"byte_end":187688,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187693,"byte_end":187704,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187709,"byte_end":187738,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187743,"byte_end":187760,"line_start":365,"line_end":365,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187765,"byte_end":187782,"line_start":366,"line_end":366,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187787,"byte_end":187790,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187795,"byte_end":187878,"line_start":368,"line_end":368,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187883,"byte_end":187886,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.to_untyped().i);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187891,"byte_end":187943,"line_start":370,"line_end":370,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.j, to_world.to_untyped().j);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":187948,"byte_end":188000,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.k, to_world.to_untyped().k);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188005,"byte_end":188057,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.r, to_world.to_untyped().r);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188062,"byte_end":188114,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188119,"byte_end":188126,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188131,"byte_end":188140,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188917,"byte_end":188929,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188251,"byte_end":188287,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188292,"byte_end":188295,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188300,"byte_end":188313,"line_start":382,"line_end":382,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188318,"byte_end":188321,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188326,"byte_end":188337,"line_start":384,"line_end":384,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188342,"byte_end":188371,"line_start":385,"line_end":385,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188376,"byte_end":188404,"line_start":386,"line_end":386,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188409,"byte_end":188426,"line_start":387,"line_end":387,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188431,"byte_end":188448,"line_start":388,"line_end":388,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188453,"byte_end":188456,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation3D<_, UnknownUnit, UnknownUnit> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188461,"byte_end":188551,"line_start":390,"line_end":390,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188556,"byte_end":188559,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.i, Rotation3D::<_, Local, World>::from_untyped(&rot).i);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188564,"byte_end":188639,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.j, Rotation3D::<_, Local, World>::from_untyped(&rot).j);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188644,"byte_end":188719,"line_start":393,"line_end":393,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.k, Rotation3D::<_, Local, World>::from_untyped(&rot).k);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188724,"byte_end":188799,"line_start":394,"line_end":394,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.r, Rotation3D::<_, Local, World>::from_untyped(&rot).r);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188804,"byte_end":188879,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188884,"byte_end":188891,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":188896,"byte_end":188905,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189416,"byte_end":189431,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"unit_quaternion","qualname":"<Rotation3D<T, Src, Dst>>::unit_quaternion","value":"pub fn unit_quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation and normalizes it.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation and normalizes it.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189084,"byte_end":189165,"line_start":407,"line_end":407,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189170,"byte_end":189173,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189178,"byte_end":189259,"line_start":409,"line_end":409,"column_start":5,"column_end":86}},{"value":"/ before normalization, where `a`, `b` and `c` describe the vector part and the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189264,"byte_end":189345,"line_start":410,"line_end":410,"column_start":5,"column_end":86}},{"value":"/ last parameter `r` is the real part.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189350,"byte_end":189390,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189395,"byte_end":189404,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189581,"byte_end":189592,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"around_axis","qualname":"<Rotation3D<T, Src, Dst>>::around_axis","value":"pub fn around_axis(Vector3D<T, Src>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around a given axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around a given axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189526,"byte_end":189569,"line_start":417,"line_end":417,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189910,"byte_end":189918,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"around_x","qualname":"<Rotation3D<T, Src, Dst>>::around_x","value":"pub fn around_x(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the x axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189857,"byte_end":189898,"line_start":425,"line_end":425,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190183,"byte_end":190191,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"around_y","qualname":"<Rotation3D<T, Src, Dst>>::around_y","value":"pub fn around_y(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the y axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190130,"byte_end":190171,"line_start":433,"line_end":433,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190456,"byte_end":190464,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"around_z","qualname":"<Rotation3D<T, Src, Dst>>::around_z","value":"pub fn around_z(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the z axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190403,"byte_end":190444,"line_start":441,"line_end":441,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191024,"byte_end":191029,"line_start":456,"line_end":456,"column_start":12,"column_end":17},"name":"euler","qualname":"<Rotation3D<T, Src, Dst>>::euler","value":"pub fn euler(Angle<T>, Angle<T>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from Euler angles.","sig":null,"attributes":[{"value":"/ Creates a rotation from Euler angles.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190676,"byte_end":190717,"line_start":449,"line_end":449,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190722,"byte_end":190725,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ The rotations are applied in roll then pitch then yaw order.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190730,"byte_end":190794,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190799,"byte_end":190802,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/  - Roll (also called bank) is a rotation around the x axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190807,"byte_end":190870,"line_start":453,"line_end":453,"column_start":5,"column_end":68}},{"value":"/  - Pitch (also called bearing) is a rotation around the y axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190875,"byte_end":190942,"line_start":454,"line_end":454,"column_start":5,"column_end":72}},{"value":"/  - Yaw (also called heading) is a rotation around the z axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":190947,"byte_end":191012,"line_start":455,"line_end":455,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191595,"byte_end":191602,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191528,"byte_end":191569,"line_start":471,"line_end":471,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191574,"byte_end":191583,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191783,"byte_end":191787,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"norm","qualname":"<Rotation3D<T, Src, Dst>>::norm","value":"pub fn norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the norm of this quaternion.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191716,"byte_end":191757,"line_start":477,"line_end":477,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191762,"byte_end":191771,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191922,"byte_end":191933,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"square_norm","qualname":"<Rotation3D<T, Src, Dst>>::square_norm","value":"pub fn square_norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the squared norm of this quaternion.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191847,"byte_end":191896,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":191901,"byte_end":191910,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192201,"byte_end":192210,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Rotation3D<T, Src, Dst>>::normalize","value":"pub fn normalize(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a [unit quaternion] from this one.","sig":null,"attributes":[{"value":"/ Returns a [unit quaternion] from this one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192037,"byte_end":192083,"line_start":489,"line_end":489,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192088,"byte_end":192091,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ [unit quaternion]: https://en.wikipedia.org/wiki/Quaternion#Unit_quaternion","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192096,"byte_end":192175,"line_start":491,"line_end":491,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192180,"byte_end":192189,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192414,"byte_end":192427,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Rotation3D<T, Src, Dst>>::is_normalized","value":"pub fn is_normalized(&Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [norm] of this quaternion is (approximately) one.","sig":null,"attributes":[{"value":"/ Returns `true` if [norm] of this quaternion is (approximately) one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192280,"byte_end":192351,"line_start":497,"line_end":497,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192356,"byte_end":192359,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ [norm]: #method.norm","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192364,"byte_end":192388,"line_start":499,"line_end":499,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192393,"byte_end":192402,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192752,"byte_end":192757,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Rotation3D<T, Src, Dst>>::slerp","value":"pub fn slerp(&Self, &Self, T) -> Self where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between this rotation and another rotation.","sig":null,"attributes":[{"value":"/ Spherical linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192602,"byte_end":192680,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192685,"byte_end":192688,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ `t` is expected to be between zero and one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":192693,"byte_end":192740,"line_start":511,"line_end":511,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194019,"byte_end":194023,"line_start":553,"line_end":553,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rotation3D<T, Src, Dst>>::lerp","value":"pub fn lerp(&Self, &Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Basic Linear interpolation between this rotation and another rotation.\n","sig":null,"attributes":[{"value":"/ Basic Linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":193919,"byte_end":193993,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":193998,"byte_end":194007,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194331,"byte_end":194348,"line_start":561,"line_end":561,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Point3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194160,"byte_end":194220,"line_start":558,"line_end":558,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194225,"byte_end":194228,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194233,"byte_end":194319,"line_start":560,"line_end":560,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195096,"byte_end":195113,"line_start":581,"line_end":581,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Point2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194880,"byte_end":194971,"line_start":577,"line_end":577,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194976,"byte_end":194979,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":194984,"byte_end":195070,"line_start":579,"line_end":579,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195075,"byte_end":195084,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195453,"byte_end":195471,"line_start":592,"line_end":592,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195266,"byte_end":195327,"line_start":588,"line_end":588,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195332,"byte_end":195335,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195340,"byte_end":195427,"line_start":590,"line_end":590,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195432,"byte_end":195441,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195856,"byte_end":195874,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195638,"byte_end":195730,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195735,"byte_end":195738,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195743,"byte_end":195830,"line_start":601,"line_end":601,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":195835,"byte_end":195844,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":196113,"byte_end":196125,"line_start":612,"line_end":612,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":196032,"byte_end":196087,"line_start":610,"line_end":610,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":196092,"byte_end":196101,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":197237,"byte_end":197241,"line_start":656,"line_end":656,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Rotation3D<T, Dst, NewDst>)\n-> Rotation3D<T, Src, NewDst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":197130,"byte_end":197211,"line_start":654,"line_end":654,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":197216,"byte_end":197225,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1729},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209467,"byte_end":209472,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Scale","qualname":"::scale::Scale","value":"","parent":null,"children":[],"decl_id":null,"docs":" A scaling factor between two different units of measurement.","sig":null,"attributes":[{"value":"/ A scaling factor between two different units of measurement.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208500,"byte_end":208564,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208565,"byte_end":208568,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is effectively a type-safe float, intended to be used in combination with other types like","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208569,"byte_end":208668,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ `length::Length` to enforce conversion between systems of measurement at compile time.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208669,"byte_end":208759,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208760,"byte_end":208763,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `Src` and `Dst` represent the units before and after multiplying a value by a `Scale`. They","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208764,"byte_end":208859,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ may be types without values, such as empty enums.  For example:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208860,"byte_end":208927,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208928,"byte_end":208931,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208932,"byte_end":208943,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208944,"byte_end":208966,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ use euclid::Length;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208967,"byte_end":208990,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":208991,"byte_end":209006,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/ enum Inch {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209007,"byte_end":209024,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209025,"byte_end":209028,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let mm_per_inch: Scale<f32, Inch, Mm> = Scale::new(25.4);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209029,"byte_end":209090,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209091,"byte_end":209094,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let one_foot: Length<f32, Inch> = Length::new(12.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209095,"byte_end":209151,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/ let one_foot_in_mm: Length<f32, Mm> = one_foot * mm_per_inch;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209152,"byte_end":209217,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209218,"byte_end":209225,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209226,"byte_end":209236,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1734},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209486,"byte_end":209491,"line_start":51,"line_end":51,"column_start":31,"column_end":36},"name":"0","qualname":"::scale::Scale::0","value":"T","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1735},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209508,"byte_end":209535,"line_start":51,"line_end":51,"column_start":53,"column_end":80},"name":"1","qualname":"::scale::Scale::1","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209609,"byte_end":209612,"line_start":55,"line_end":55,"column_start":18,"column_end":21},"name":"new","qualname":"<Scale<T, Src, Dst>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209582,"byte_end":209591,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209732,"byte_end":209740,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"identity","qualname":"<Scale<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity scale (1.0).\n","sig":null,"attributes":[{"value":"/ Creates an identity scale (1.0).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209670,"byte_end":209706,"line_start":59,"line_end":59,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209711,"byte_end":209720,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210192,"byte_end":210207,"line_start":82,"line_end":82,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Scale<T, Src, Dst>>::transform_point","value":"pub fn transform_point(Self, Point2D<T, Src>) -> Point2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209822,"byte_end":209876,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209881,"byte_end":209884,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209889,"byte_end":209902,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209907,"byte_end":209910,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209915,"byte_end":209926,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209931,"byte_end":209963,"line_start":73,"line_end":73,"column_start":5,"column_end":37}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209968,"byte_end":209983,"line_start":74,"line_end":74,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209988,"byte_end":210003,"line_start":75,"line_end":75,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210008,"byte_end":210011,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210016,"byte_end":210067,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210072,"byte_end":210075,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_point(point2(42, -42)), point2(420, -420));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210080,"byte_end":210154,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210159,"byte_end":210166,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210171,"byte_end":210180,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210452,"byte_end":210469,"line_start":91,"line_end":91,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Scale<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(Self, Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210372,"byte_end":210426,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210431,"byte_end":210440,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211018,"byte_end":211034,"line_start":112,"line_end":112,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Scale<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(Self, Vector2D<T, Src>) -> Vector2D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210652,"byte_end":210707,"line_start":98,"line_end":98,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210712,"byte_end":210715,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210720,"byte_end":210733,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210738,"byte_end":210741,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210746,"byte_end":210757,"line_start":102,"line_end":102,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, vec2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210762,"byte_end":210792,"line_start":103,"line_end":103,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210797,"byte_end":210812,"line_start":104,"line_end":104,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210817,"byte_end":210832,"line_start":105,"line_end":105,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210837,"byte_end":210840,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210845,"byte_end":210896,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210901,"byte_end":210904,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_vector(vec2(42, -42)), vec2(420, -420));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210909,"byte_end":210980,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210985,"byte_end":210992,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":210997,"byte_end":211006,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211563,"byte_end":211577,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Scale<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211196,"byte_end":211251,"line_start":119,"line_end":119,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211256,"byte_end":211259,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211264,"byte_end":211277,"line_start":121,"line_end":121,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211282,"byte_end":211285,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211290,"byte_end":211301,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, size2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211306,"byte_end":211337,"line_start":124,"line_end":124,"column_start":5,"column_end":36}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211342,"byte_end":211357,"line_start":125,"line_end":125,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211362,"byte_end":211377,"line_start":126,"line_end":126,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211382,"byte_end":211385,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211390,"byte_end":211441,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211446,"byte_end":211449,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_size(size2(42, -42)), size2(420, -420));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211454,"byte_end":211525,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211530,"byte_end":211537,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211542,"byte_end":211551,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212122,"byte_end":212136,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Scale<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given rect transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given rect transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211745,"byte_end":211798,"line_start":140,"line_end":140,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211803,"byte_end":211806,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211811,"byte_end":211824,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211829,"byte_end":211832,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211837,"byte_end":211848,"line_start":144,"line_end":144,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, rect};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211853,"byte_end":211883,"line_start":145,"line_end":145,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211888,"byte_end":211903,"line_start":146,"line_end":146,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211908,"byte_end":211923,"line_start":147,"line_end":147,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211928,"byte_end":211931,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211936,"byte_end":211987,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":211992,"byte_end":211995,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_rect(&rect(1, 2, 42, -42)), rect(10, 20, 420, -420));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212000,"byte_end":212084,"line_start":151,"line_end":151,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212089,"byte_end":212096,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212101,"byte_end":212110,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212436,"byte_end":212451,"line_start":166,"line_end":166,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Scale<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212358,"byte_end":212410,"line_start":164,"line_end":164,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212415,"byte_end":212424,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212748,"byte_end":212763,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Scale<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212670,"byte_end":212722,"line_start":176,"line_end":176,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212727,"byte_end":212736,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1749},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213504,"byte_end":213515,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Scale<T, Src, Dst>>::is_identity","value":"pub fn is_identity(Self) -> bool where T: PartialEq + One","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this scale has no effect.","sig":null,"attributes":[{"value":"/ Returns `true` if this scale has no effect.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":212986,"byte_end":213033,"line_start":188,"line_end":188,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213038,"byte_end":213041,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213046,"byte_end":213059,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213064,"byte_end":213067,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213072,"byte_end":213083,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213088,"byte_end":213110,"line_start":193,"line_end":193,"column_start":5,"column_end":27}},{"value":"/ use euclid::num::One;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213115,"byte_end":213140,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213145,"byte_end":213160,"line_start":195,"line_end":195,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213165,"byte_end":213180,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213185,"byte_end":213188,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Mm, Cm> = Scale::new(0.1);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213193,"byte_end":213249,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/ let mm_per_mm: Scale<f32, Mm, Mm> = Scale::new(1.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213254,"byte_end":213310,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213315,"byte_end":213318,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213323,"byte_end":213370,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(mm_per_mm.is_identity(), true);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213375,"byte_end":213421,"line_start":202,"line_end":202,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(mm_per_mm, Scale::one());","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213426,"byte_end":213466,"line_start":203,"line_end":203,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213471,"byte_end":213478,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213483,"byte_end":213492,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213685,"byte_end":213688,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"get","qualname":"<Scale<T, Src, Dst>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying scalar scale factor.\n","sig":null,"attributes":[{"value":"/ Returns the underlying scalar scale factor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213612,"byte_end":213659,"line_start":213,"line_end":213,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213664,"byte_end":213673,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214040,"byte_end":214047,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Scale<T, Src, Dst>>::inverse","value":"pub fn inverse(Self) -> Scale<T::Output, Dst, Src> where T: One + Div","parent":null,"children":[],"decl_id":null,"docs":" The inverse Scale (1.0 / self).","sig":null,"attributes":[{"value":"/ The inverse Scale (1.0 / self).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213728,"byte_end":213763,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213768,"byte_end":213771,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213776,"byte_end":213789,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213794,"byte_end":213797,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213802,"byte_end":213813,"line_start":223,"line_end":223,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213818,"byte_end":213840,"line_start":224,"line_end":224,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213845,"byte_end":213860,"line_start":225,"line_end":225,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213865,"byte_end":213880,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213885,"byte_end":213888,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Cm, Mm> = Scale::new(0.1);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213893,"byte_end":213949,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213954,"byte_end":213957,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.inverse(), Scale::new(10.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":213962,"byte_end":214016,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214021,"byte_end":214028,"line_start":231,"line_end":231,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215128,"byte_end":215132,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"cast","qualname":"<Scale<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Scale<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214249,"byte_end":214323,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214328,"byte_end":214331,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214336,"byte_end":214348,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214353,"byte_end":214356,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214361,"byte_end":214438,"line_start":246,"line_end":246,"column_start":5,"column_end":82}},{"value":"/ method panics. Use `try_cast` if that must be case.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214443,"byte_end":214498,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214503,"byte_end":214506,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214511,"byte_end":214524,"line_start":249,"line_end":249,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214529,"byte_end":214532,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214537,"byte_end":214548,"line_start":251,"line_end":251,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214553,"byte_end":214575,"line_start":252,"line_end":252,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214580,"byte_end":214595,"line_start":253,"line_end":253,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214600,"byte_end":214615,"line_start":254,"line_end":254,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214620,"byte_end":214623,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214628,"byte_end":214679,"line_start":256,"line_end":256,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214684,"byte_end":214687,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.cast::<f32>(), Scale::new(10.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214692,"byte_end":214746,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214751,"byte_end":214758,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ That conversion will panic, because `i32` not enough to store such big numbers:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214763,"byte_end":214846,"line_start":260,"line_end":260,"column_start":5,"column_end":88}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214851,"byte_end":214875,"line_start":261,"line_end":261,"column_start":5,"column_end":29}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214880,"byte_end":214902,"line_start":262,"line_end":262,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};// millimeter = 10^-2 meters","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214907,"byte_end":214950,"line_start":263,"line_end":263,"column_start":5,"column_end":48}},{"value":"/ enum Em {};// exameter   = 10^18 meters","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214955,"byte_end":214998,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215003,"byte_end":215006,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ // Panics","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215011,"byte_end":215024,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/ let to_em: Scale<i32, Mm, Em> = Scale::new(10e20).cast();","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215029,"byte_end":215090,"line_start":267,"line_end":267,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215095,"byte_end":215102,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215107,"byte_end":215116,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215905,"byte_end":215913,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Scale<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Scale<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n If the source value cannot be represented by the target type `NewT`, then `None`\n is returned.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215225,"byte_end":215308,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then `None`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215313,"byte_end":215397,"line_start":275,"line_end":275,"column_start":5,"column_end":89}},{"value":"/ is returned.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215402,"byte_end":215418,"line_start":276,"line_end":276,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215423,"byte_end":215426,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215431,"byte_end":215444,"line_start":278,"line_end":278,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215449,"byte_end":215452,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215457,"byte_end":215468,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215473,"byte_end":215495,"line_start":281,"line_end":281,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215500,"byte_end":215515,"line_start":282,"line_end":282,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215520,"byte_end":215535,"line_start":283,"line_end":283,"column_start":5,"column_end":20}},{"value":"/ enum Em {};// Exameter = 10^18 meters","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215540,"byte_end":215581,"line_start":284,"line_end":284,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215586,"byte_end":215589,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215594,"byte_end":215645,"line_start":286,"line_end":286,"column_start":5,"column_end":56}},{"value":"/ let to_em: Scale<f32, Mm, Em> = Scale::new(10e20);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215650,"byte_end":215704,"line_start":287,"line_end":287,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215709,"byte_end":215712,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.try_cast::<f32>(), Some(Scale::new(10.0)));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215717,"byte_end":215781,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/ // Integer to small to store that number","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215786,"byte_end":215830,"line_start":290,"line_end":290,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(to_em.try_cast::<i32>(), None);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215835,"byte_end":215881,"line_start":291,"line_end":291,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":215886,"byte_end":215893,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1846},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220447,"byte_end":220460,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"SideOffsets2D","qualname":"::side_offsets::SideOffsets2D","value":"SideOffsets2D { top, right, bottom, left, _unit }","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853}],"decl_id":null,"docs":" A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,\n and margins in CSS, optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220091,"byte_end":220186,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ and margins in CSS, optionally tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220187,"byte_end":220241,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220242,"byte_end":220252,"line_start":27,"line_end":27,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1849},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220477,"byte_end":220480,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"name":"top","qualname":"::side_offsets::SideOffsets2D::top","value":"T","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1850},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220493,"byte_end":220498,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"right","qualname":"::side_offsets::SideOffsets2D::right","value":"T","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1851},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220511,"byte_end":220517,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"bottom","qualname":"::side_offsets::SideOffsets2D::bottom","value":"T","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1852},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220530,"byte_end":220534,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"left","qualname":"::side_offsets::SideOffsets2D::left","value":"T","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220566,"byte_end":220571,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"_unit","qualname":"::side_offsets::SideOffsets2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222289,"byte_end":222292,"line_start":109,"line_end":109,"column_start":18,"column_end":21},"name":"new","qualname":"<SideOffsets2D<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a scalar for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a scalar for each side.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222122,"byte_end":222168,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222173,"byte_end":222176,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222181,"byte_end":222245,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222250,"byte_end":222271,"line_start":108,"line_end":108,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222659,"byte_end":222671,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<SideOffsets2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>, Length<T, U>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a typed Length for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a typed Length for each side.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222492,"byte_end":222544,"line_start":119,"line_end":119,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222549,"byte_end":222552,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222557,"byte_end":222621,"line_start":121,"line_end":121,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222626,"byte_end":222647,"line_start":122,"line_end":122,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223167,"byte_end":223185,"line_start":137,"line_end":137,"column_start":12,"column_end":30},"name":"from_vectors_outer","qualname":"<SideOffsets2D<T, U>>::from_vectors_outer","value":"pub fn from_vectors_outer(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222875,"byte_end":222936,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222941,"byte_end":222944,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The outer rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222949,"byte_end":223026,"line_start":134,"line_end":134,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223031,"byte_end":223106,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223111,"byte_end":223155,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223753,"byte_end":223771,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"name":"from_vectors_inner","qualname":"<SideOffsets2D<T, U>>::from_vectors_inner","value":"pub fn from_vectors_inner(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223461,"byte_end":223522,"line_start":150,"line_end":150,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223527,"byte_end":223530,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The inner rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223535,"byte_end":223612,"line_start":152,"line_end":152,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223617,"byte_end":223692,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":223697,"byte_end":223741,"line_start":154,"line_end":154,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224102,"byte_end":224106,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"zero","qualname":"<SideOffsets2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224047,"byte_end":224090,"line_start":168,"line_end":168,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224300,"byte_end":224307,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<SideOffsets2D<T, U>>::is_zero","value":"pub fn is_zero(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all side offsets are zero.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all side offsets are zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224240,"byte_end":224288,"line_start":175,"line_end":175,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224596,"byte_end":224608,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"new_all_same","qualname":"<SideOffsets2D<T, U>>::new_all_same","value":"pub fn new_all_same(T) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a scalar value directly.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a scalar value directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224500,"byte_end":224584,"line_start":184,"line_end":184,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224799,"byte_end":224819,"line_start":192,"line_end":192,"column_start":12,"column_end":32},"name":"from_length_all_same","qualname":"<SideOffsets2D<T, U>>::from_length_all_same","value":"pub fn from_length_all_same(Length<T, U>) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a typed Length.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a typed Length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224712,"byte_end":224787,"line_start":191,"line_end":191,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":224937,"byte_end":224947,"line_start":198,"line_end":198,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<SideOffsets2D<T, U>>::horizontal","value":"pub fn horizontal(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225058,"byte_end":225066,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"vertical","qualname":"<SideOffsets2D<T, U>>::vertical","value":"pub fn vertical(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1972},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231791,"byte_end":231797,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Size2D","qualname":"::size::Size2D","value":"Size2D { width, height, _unit }","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977}],"decl_id":null,"docs":" A 2d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d size tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231735,"byte_end":231768,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231769,"byte_end":231779,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1975},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231906,"byte_end":231911,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size2D::width","value":"T","parent":{"krate":0,"index":1972},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis (usually horizontal).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis (usually horizontal).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231810,"byte_end":231897,"line_start":32,"line_end":32,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":1976},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232014,"byte_end":232020,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size2D::height","value":"T","parent":{"krate":0,"index":1972},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis (usually vertical).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis (usually vertical).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":231920,"byte_end":232005,"line_start":34,"line_end":34,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":1977},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232052,"byte_end":232057,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1972},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234146,"byte_end":234150,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233979,"byte_end":234050,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234055,"byte_end":234058,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234063,"byte_end":234120,"line_start":123,"line_end":123,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234125,"byte_end":234134,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234322,"byte_end":234325,"line_start":134,"line_end":134,"column_start":18,"column_end":21},"name":"new","qualname":"<Size2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234253,"byte_end":234290,"line_start":132,"line_end":132,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234295,"byte_end":234304,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234544,"byte_end":234556,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234465,"byte_end":234518,"line_start":141,"line_end":141,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234523,"byte_end":234532,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234722,"byte_end":234734,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size2D<T, U>>::from_untyped","value":"pub fn from_untyped(Size2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234660,"byte_end":234696,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234701,"byte_end":234710,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234952,"byte_end":234960,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of two elements (width, then height).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234856,"byte_end":234926,"line_start":155,"line_end":155,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234931,"byte_end":234940,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235119,"byte_end":235127,"line_start":163,"line_end":163,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a tuple of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as a tuple of two elements (width, then height).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235024,"byte_end":235093,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235098,"byte_end":235107,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235272,"byte_end":235281,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width and height.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width and height.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235191,"byte_end":235246,"line_start":167,"line_end":167,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235251,"byte_end":235260,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235437,"byte_end":235447,"line_start":175,"line_end":175,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235357,"byte_end":235411,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235416,"byte_end":235425,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235561,"byte_end":235570,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235518,"byte_end":235535,"line_start":179,"line_end":179,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235540,"byte_end":235549,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2022},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236013,"byte_end":236018,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"round","qualname":"<Size2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235654,"byte_end":235709,"line_start":185,"line_end":185,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235714,"byte_end":235717,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235722,"byte_end":235797,"line_start":187,"line_end":187,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235802,"byte_end":235805,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235810,"byte_end":235821,"line_start":189,"line_end":189,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235826,"byte_end":235850,"line_start":190,"line_end":190,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235855,"byte_end":235869,"line_start":191,"line_end":191,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235874,"byte_end":235877,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).round(), size2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235882,"byte_end":235959,"line_start":193,"line_end":193,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235964,"byte_end":235971,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235976,"byte_end":235985,"line_start":195,"line_end":195,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":235990,"byte_end":236001,"line_start":196,"line_end":196,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2023},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236532,"byte_end":236536,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236139,"byte_end":236230,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236235,"byte_end":236238,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236243,"byte_end":236318,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236323,"byte_end":236326,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236331,"byte_end":236342,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236347,"byte_end":236371,"line_start":209,"line_end":209,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236376,"byte_end":236390,"line_start":210,"line_end":210,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236395,"byte_end":236398,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).ceil(), size2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236403,"byte_end":236478,"line_start":212,"line_end":212,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236483,"byte_end":236490,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236495,"byte_end":236504,"line_start":214,"line_end":214,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236509,"byte_end":236520,"line_start":215,"line_end":215,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237047,"byte_end":237052,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236654,"byte_end":236742,"line_start":223,"line_end":223,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236747,"byte_end":236750,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236755,"byte_end":236830,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236835,"byte_end":236838,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236843,"byte_end":236854,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236859,"byte_end":236883,"line_start":228,"line_end":228,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236888,"byte_end":236902,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236907,"byte_end":236910,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).floor(), size2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236915,"byte_end":236993,"line_start":231,"line_end":231,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":236998,"byte_end":237005,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237010,"byte_end":237019,"line_start":233,"line_end":233,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237024,"byte_end":237035,"line_start":234,"line_end":234,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2025},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237240,"byte_end":237244,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"area","qualname":"<Size2D<T, U>>::area","value":"pub fn area(Self) -> T::Output where T: Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of both components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of both components","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237173,"byte_end":237228,"line_start":242,"line_end":242,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237983,"byte_end":237987,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this size and another size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237340,"byte_end":237415,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237420,"byte_end":237423,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237428,"byte_end":237441,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237446,"byte_end":237449,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237454,"byte_end":237465,"line_start":254,"line_end":254,"column_start":5,"column_end":16}},{"value":"/ use euclid::size2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237470,"byte_end":237492,"line_start":255,"line_end":255,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237497,"byte_end":237529,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237534,"byte_end":237537,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let from: Size2D<_> = size2(0.0, 10.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237542,"byte_end":237585,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/ let to:  Size2D<_> = size2(8.0, -4.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237590,"byte_end":237632,"line_start":259,"line_end":259,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237637,"byte_end":237640,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size2(-8.0,  24.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237645,"byte_end":237701,"line_start":261,"line_end":261,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size2( 0.0,  10.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237706,"byte_end":237762,"line_start":262,"line_end":262,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size2( 4.0,   3.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237767,"byte_end":237823,"line_start":263,"line_end":263,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size2( 8.0,  -4.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237828,"byte_end":237884,"line_start":264,"line_end":264,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size2(16.0, -18.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237889,"byte_end":237945,"line_start":265,"line_end":265,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237950,"byte_end":237957,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":237962,"byte_end":237971,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238609,"byte_end":238613,"line_start":284,"line_end":284,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238229,"byte_end":238303,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238308,"byte_end":238311,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238316,"byte_end":238403,"line_start":280,"line_end":280,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238408,"byte_end":238496,"line_start":281,"line_end":281,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238501,"byte_end":238583,"line_start":282,"line_end":282,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238588,"byte_end":238597,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239075,"byte_end":239083,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238700,"byte_end":238783,"line_start":288,"line_end":288,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238788,"byte_end":238791,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238796,"byte_end":238883,"line_start":290,"line_end":290,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238888,"byte_end":238976,"line_start":291,"line_end":291,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238981,"byte_end":239063,"line_start":292,"line_end":292,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2034},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239410,"byte_end":239416,"line_start":304,"line_end":304,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239356,"byte_end":239384,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239389,"byte_end":239398,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239528,"byte_end":239534,"line_start":310,"line_end":310,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239474,"byte_end":239502,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239507,"byte_end":239516,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239883,"byte_end":239891,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239592,"byte_end":239649,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239654,"byte_end":239657,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239662,"byte_end":239737,"line_start":316,"line_end":316,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239742,"byte_end":239816,"line_start":317,"line_end":317,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239821,"byte_end":239857,"line_start":318,"line_end":318,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239862,"byte_end":239871,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2037},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240241,"byte_end":240247,"line_start":330,"line_end":330,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":239951,"byte_end":240007,"line_start":324,"line_end":324,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240012,"byte_end":240015,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240020,"byte_end":240095,"line_start":326,"line_end":326,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240100,"byte_end":240174,"line_start":327,"line_end":327,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240179,"byte_end":240215,"line_start":328,"line_end":328,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240220,"byte_end":240229,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240595,"byte_end":240601,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Size2D<T, U>>::to_u64","value":"pub fn to_u64(Self) -> Size2D<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240305,"byte_end":240361,"line_start":334,"line_end":334,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240366,"byte_end":240369,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240374,"byte_end":240449,"line_start":336,"line_end":336,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240454,"byte_end":240528,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240533,"byte_end":240569,"line_start":338,"line_end":338,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240574,"byte_end":240583,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240949,"byte_end":240955,"line_start":350,"line_end":350,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240659,"byte_end":240715,"line_start":344,"line_end":344,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240720,"byte_end":240723,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240728,"byte_end":240803,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240808,"byte_end":240882,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240887,"byte_end":240923,"line_start":348,"line_end":348,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":240928,"byte_end":240937,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241303,"byte_end":241309,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241013,"byte_end":241069,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241074,"byte_end":241077,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241082,"byte_end":241157,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241162,"byte_end":241236,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241241,"byte_end":241277,"line_start":358,"line_end":358,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241282,"byte_end":241291,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2044},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241671,"byte_end":241674,"line_start":371,"line_end":371,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size2D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241403,"byte_end":241453,"line_start":366,"line_end":366,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241458,"byte_end":241461,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241466,"byte_end":241554,"line_start":368,"line_end":368,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241559,"byte_end":241562,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241567,"byte_end":241659,"line_start":370,"line_end":370,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241861,"byte_end":241872,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size2D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if both components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if both components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241753,"byte_end":241849,"line_start":375,"line_end":375,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242110,"byte_end":242113,"line_start":384,"line_end":384,"column_start":12,"column_end":15},"name":"min","qualname":"<Size2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242002,"byte_end":242084,"line_start":382,"line_end":382,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242089,"byte_end":242098,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242338,"byte_end":242341,"line_start":390,"line_end":390,"column_start":12,"column_end":15},"name":"max","qualname":"<Size2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242230,"byte_end":242312,"line_start":388,"line_end":388,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242317,"byte_end":242326,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2051},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242651,"byte_end":242656,"line_start":399,"line_end":399,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242458,"byte_end":242527,"line_start":394,"line_end":394,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242532,"byte_end":242568,"line_start":395,"line_end":395,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242573,"byte_end":242576,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242581,"byte_end":242625,"line_start":397,"line_end":397,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242630,"byte_end":242639,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242862,"byte_end":242874,"line_start":407,"line_end":407,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater then\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":242772,"byte_end":242850,"line_start":406,"line_end":406,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243128,"byte_end":243138,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower then\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243040,"byte_end":243116,"line_start":414,"line_end":414,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243386,"byte_end":243394,"line_start":423,"line_end":423,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size2D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative, or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative, or NaN.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243304,"byte_end":243374,"line_start":422,"line_end":422,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243763,"byte_end":243768,"line_start":436,"line_end":436,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243680,"byte_end":243751,"line_start":435,"line_end":435,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244023,"byte_end":244032,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243936,"byte_end":244011,"line_start":443,"line_end":443,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2137},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247577,"byte_end":247582,"line_start":594,"line_end":594,"column_start":14,"column_end":19},"name":"size2","qualname":"::size::size2","value":"pub const fn size2<T, U>(T, T) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size2D::new(w, h)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size2D::new(w, h)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247515,"byte_end":247553,"line_start":592,"line_end":592,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247554,"byte_end":247563,"line_start":593,"line_end":593,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2164},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254461,"byte_end":254467,"line_start":858,"line_end":858,"column_start":12,"column_end":18},"name":"Size3D","qualname":"::size::Size3D","value":"Size3D { width, height, depth, _unit }","parent":null,"children":[{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170}],"decl_id":null,"docs":" A 3d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d size tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254405,"byte_end":254438,"line_start":856,"line_end":856,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254439,"byte_end":254449,"line_start":857,"line_end":857,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2167},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254555,"byte_end":254560,"line_start":860,"line_end":860,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size3D::width","value":"T","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254480,"byte_end":254546,"line_start":859,"line_end":859,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2168},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254644,"byte_end":254650,"line_start":862,"line_end":862,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size3D::height","value":"T","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254569,"byte_end":254635,"line_start":861,"line_end":861,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2169},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254734,"byte_end":254739,"line_start":864,"line_end":864,"column_start":9,"column_end":14},"name":"depth","qualname":"::size::Size3D::depth","value":"T","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `z` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `z` axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254659,"byte_end":254725,"line_start":863,"line_end":863,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2170},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254771,"byte_end":254776,"line_start":866,"line_end":866,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256955,"byte_end":256959,"line_start":956,"line_end":956,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256802,"byte_end":256873,"line_start":953,"line_end":953,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256878,"byte_end":256881,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256886,"byte_end":256943,"line_start":955,"line_end":955,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257145,"byte_end":257148,"line_start":965,"line_end":965,"column_start":18,"column_end":21},"name":"new","qualname":"<Size3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257076,"byte_end":257113,"line_start":963,"line_end":963,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257118,"byte_end":257127,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2203},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257397,"byte_end":257409,"line_start":976,"line_end":976,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257318,"byte_end":257371,"line_start":974,"line_end":974,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257376,"byte_end":257385,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257605,"byte_end":257617,"line_start":982,"line_end":982,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size3D<T, U>>::from_untyped","value":"pub fn from_untyped(Size3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257543,"byte_end":257579,"line_start":980,"line_end":980,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257584,"byte_end":257593,"line_start":981,"line_end":981,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257858,"byte_end":257866,"line_start":990,"line_end":990,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257748,"byte_end":257832,"line_start":988,"line_end":988,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257837,"byte_end":257846,"line_start":989,"line_end":989,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258052,"byte_end":258060,"line_start":996,"line_end":996,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257942,"byte_end":258026,"line_start":994,"line_end":994,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258031,"byte_end":258040,"line_start":995,"line_end":995,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258227,"byte_end":258236,"line_start":1002,"line_end":1002,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width, height and depth.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width, height and depth.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258139,"byte_end":258201,"line_start":1000,"line_end":1000,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258206,"byte_end":258215,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258404,"byte_end":258414,"line_start":1008,"line_end":1008,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258324,"byte_end":258378,"line_start":1006,"line_end":1006,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258383,"byte_end":258392,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258528,"byte_end":258537,"line_start":1014,"line_end":1014,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258485,"byte_end":258502,"line_start":1012,"line_end":1012,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258507,"byte_end":258516,"line_start":1013,"line_end":1013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259002,"byte_end":259007,"line_start":1030,"line_end":1030,"column_start":12,"column_end":17},"name":"round","qualname":"<Size3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258633,"byte_end":258688,"line_start":1018,"line_end":1018,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258693,"byte_end":258696,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258701,"byte_end":258776,"line_start":1020,"line_end":1020,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258781,"byte_end":258784,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258789,"byte_end":258800,"line_start":1022,"line_end":1022,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258805,"byte_end":258829,"line_start":1023,"line_end":1023,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258834,"byte_end":258848,"line_start":1024,"line_end":1024,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258853,"byte_end":258856,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).round(), size3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258861,"byte_end":258948,"line_start":1026,"line_end":1026,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258953,"byte_end":258960,"line_start":1027,"line_end":1027,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258965,"byte_end":258974,"line_start":1028,"line_end":1028,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":258979,"byte_end":258990,"line_start":1029,"line_end":1029,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259551,"byte_end":259555,"line_start":1049,"line_end":1049,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259148,"byte_end":259239,"line_start":1037,"line_end":1037,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259244,"byte_end":259247,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259252,"byte_end":259327,"line_start":1039,"line_end":1039,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259332,"byte_end":259335,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259340,"byte_end":259351,"line_start":1041,"line_end":1041,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259356,"byte_end":259380,"line_start":1042,"line_end":1042,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259385,"byte_end":259399,"line_start":1043,"line_end":1043,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259404,"byte_end":259407,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), size3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259412,"byte_end":259497,"line_start":1045,"line_end":1045,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259502,"byte_end":259509,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259514,"byte_end":259523,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259528,"byte_end":259539,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260095,"byte_end":260100,"line_start":1068,"line_end":1068,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259692,"byte_end":259780,"line_start":1056,"line_end":1056,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259785,"byte_end":259788,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259793,"byte_end":259868,"line_start":1058,"line_end":1058,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259873,"byte_end":259876,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259881,"byte_end":259892,"line_start":1060,"line_end":1060,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259897,"byte_end":259921,"line_start":1061,"line_end":1061,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259926,"byte_end":259940,"line_start":1062,"line_end":1062,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259945,"byte_end":259948,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).floor(), size3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":259953,"byte_end":260041,"line_start":1064,"line_end":1064,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260046,"byte_end":260053,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260058,"byte_end":260067,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260072,"byte_end":260083,"line_start":1067,"line_end":1067,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260307,"byte_end":260313,"line_start":1076,"line_end":1076,"column_start":12,"column_end":18},"name":"volume","qualname":"<Size3D<T, U>>::volume","value":"pub fn volume(Self) -> T where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of all components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of all components","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260241,"byte_end":260295,"line_start":1075,"line_end":1075,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2219},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261096,"byte_end":261100,"line_start":1101,"line_end":1101,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this size and another size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260426,"byte_end":260486,"line_start":1083,"line_end":1083,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260491,"byte_end":260494,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260499,"byte_end":260512,"line_start":1085,"line_end":1085,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260517,"byte_end":260520,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260525,"byte_end":260536,"line_start":1087,"line_end":1087,"column_start":5,"column_end":16}},{"value":"/ use euclid::size3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260541,"byte_end":260563,"line_start":1088,"line_end":1088,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260568,"byte_end":260600,"line_start":1089,"line_end":1089,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260605,"byte_end":260608,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ let from: Size3D<_> = size3(0.0, 10.0, -1.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260613,"byte_end":260662,"line_start":1091,"line_end":1091,"column_start":5,"column_end":54}},{"value":"/ let to:  Size3D<_> = size3(8.0, -4.0,  0.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260667,"byte_end":260715,"line_start":1092,"line_end":1092,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260720,"byte_end":260723,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260728,"byte_end":260790,"line_start":1094,"line_end":1094,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260795,"byte_end":260857,"line_start":1095,"line_end":1095,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260862,"byte_end":260924,"line_start":1096,"line_end":1096,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260929,"byte_end":260991,"line_start":1097,"line_end":1097,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size3(16.0, -18.0,  1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":260996,"byte_end":261058,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261063,"byte_end":261070,"line_start":1099,"line_end":1099,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261075,"byte_end":261084,"line_start":1100,"line_end":1100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261722,"byte_end":261726,"line_start":1117,"line_end":1117,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261342,"byte_end":261416,"line_start":1111,"line_end":1111,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261421,"byte_end":261424,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261429,"byte_end":261516,"line_start":1113,"line_end":1113,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261521,"byte_end":261609,"line_start":1114,"line_end":1114,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261614,"byte_end":261696,"line_start":1115,"line_end":1115,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261701,"byte_end":261710,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262188,"byte_end":262196,"line_start":1126,"line_end":1126,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261813,"byte_end":261896,"line_start":1121,"line_end":1121,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261901,"byte_end":261904,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261909,"byte_end":261996,"line_start":1123,"line_end":1123,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262001,"byte_end":262089,"line_start":1124,"line_end":1124,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262094,"byte_end":262176,"line_start":1125,"line_end":1125,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2227},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262609,"byte_end":262615,"line_start":1141,"line_end":1141,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262555,"byte_end":262583,"line_start":1139,"line_end":1139,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262588,"byte_end":262597,"line_start":1140,"line_end":1140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262727,"byte_end":262733,"line_start":1147,"line_end":1147,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262673,"byte_end":262701,"line_start":1145,"line_end":1145,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262706,"byte_end":262715,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2229},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263082,"byte_end":263090,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262791,"byte_end":262848,"line_start":1151,"line_end":1151,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262853,"byte_end":262856,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262861,"byte_end":262936,"line_start":1153,"line_end":1153,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":262941,"byte_end":263015,"line_start":1154,"line_end":1154,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263020,"byte_end":263056,"line_start":1155,"line_end":1155,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263061,"byte_end":263070,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263440,"byte_end":263446,"line_start":1167,"line_end":1167,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263150,"byte_end":263206,"line_start":1161,"line_end":1161,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263211,"byte_end":263214,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263219,"byte_end":263294,"line_start":1163,"line_end":1163,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263299,"byte_end":263373,"line_start":1164,"line_end":1164,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263378,"byte_end":263414,"line_start":1165,"line_end":1165,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263419,"byte_end":263428,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263794,"byte_end":263800,"line_start":1177,"line_end":1177,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263504,"byte_end":263560,"line_start":1171,"line_end":1171,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263565,"byte_end":263568,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263573,"byte_end":263648,"line_start":1173,"line_end":1173,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263653,"byte_end":263727,"line_start":1174,"line_end":1174,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263732,"byte_end":263768,"line_start":1175,"line_end":1175,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263773,"byte_end":263782,"line_start":1176,"line_end":1176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264148,"byte_end":264154,"line_start":1187,"line_end":1187,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263858,"byte_end":263914,"line_start":1181,"line_end":1181,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263919,"byte_end":263922,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":263927,"byte_end":264002,"line_start":1183,"line_end":1183,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264007,"byte_end":264081,"line_start":1184,"line_end":1184,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264086,"byte_end":264122,"line_start":1185,"line_end":1185,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264127,"byte_end":264136,"line_start":1186,"line_end":1186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264516,"byte_end":264519,"line_start":1198,"line_end":1198,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size3D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264248,"byte_end":264298,"line_start":1193,"line_end":1193,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264303,"byte_end":264306,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264311,"byte_end":264399,"line_start":1195,"line_end":1195,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264404,"byte_end":264407,"line_start":1196,"line_end":1196,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264412,"byte_end":264504,"line_start":1197,"line_end":1197,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264723,"byte_end":264734,"line_start":1203,"line_end":1203,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size3D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264616,"byte_end":264711,"line_start":1202,"line_end":1202,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265000,"byte_end":265003,"line_start":1211,"line_end":1211,"column_start":12,"column_end":15},"name":"min","qualname":"<Size3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264892,"byte_end":264974,"line_start":1209,"line_end":1209,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264979,"byte_end":264988,"line_start":1210,"line_end":1210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265305,"byte_end":265308,"line_start":1221,"line_end":1221,"column_start":12,"column_end":15},"name":"max","qualname":"<Size3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265197,"byte_end":265279,"line_start":1219,"line_end":1219,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265284,"byte_end":265293,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265695,"byte_end":265700,"line_start":1234,"line_end":1234,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265502,"byte_end":265571,"line_start":1229,"line_end":1229,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265576,"byte_end":265612,"line_start":1230,"line_end":1230,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265617,"byte_end":265620,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265625,"byte_end":265669,"line_start":1232,"line_end":1232,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265674,"byte_end":265683,"line_start":1233,"line_end":1233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265906,"byte_end":265918,"line_start":1242,"line_end":1242,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":265816,"byte_end":265894,"line_start":1241,"line_end":1241,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2245},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266213,"byte_end":266223,"line_start":1251,"line_end":1251,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266125,"byte_end":266201,"line_start":1250,"line_end":1250,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266511,"byte_end":266519,"line_start":1260,"line_end":1260,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size3D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative or NaN.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266430,"byte_end":266499,"line_start":1259,"line_end":1259,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266803,"byte_end":266808,"line_start":1271,"line_end":1271,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266720,"byte_end":266791,"line_start":1270,"line_end":1270,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2251},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267105,"byte_end":267114,"line_start":1280,"line_end":1280,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267018,"byte_end":267093,"line_start":1279,"line_end":1279,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2353},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272420,"byte_end":272425,"line_start":1513,"line_end":1513,"column_start":14,"column_end":19},"name":"size3","qualname":"::size::size3","value":"pub const fn size3<T, U>(T, T, T) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size3D::new(w, h, d)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size3D::new(w, h, d)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272355,"byte_end":272396,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272397,"byte_end":272406,"line_start":1512,"line_end":1512,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2387},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280622,"byte_end":280633,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform2D","qualname":"::transform2d::Transform2D","value":"Transform2D { m11, m12, m21, m22, m31, m32, _unit }","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397}],"decl_id":null,"docs":" A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","sig":null,"attributes":[{"value":"/ A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279134,"byte_end":279224,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279225,"byte_end":279228,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279229,"byte_end":279316,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279317,"byte_end":279360,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform2D<f32, WorldSpace, ScreenSpace>::transform_point4d`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279361,"byte_end":279440,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ takes a `Point2D<f32, WorldSpace>` and returns a `Point2D<f32, ScreenSpace>`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279441,"byte_end":279522,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279523,"byte_end":279526,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279527,"byte_end":279612,"line_start":39,"line_end":39,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279613,"byte_end":279696,"line_start":40,"line_end":40,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279697,"byte_end":279784,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279785,"byte_end":279837,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279838,"byte_end":279841,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The matrix representation is conceptually equivalent to a 3 by 3 matrix transformation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279842,"byte_end":279932,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ compressed to 3 by 2 with the components that aren't needed to describe the set of 2d","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":279933,"byte_end":280022,"line_start":45,"line_end":45,"column_start":1,"column_end":90}},{"value":"/ transformations we are interested in implicitly defined:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280023,"byte_end":280083,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280084,"byte_end":280087,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280088,"byte_end":280099,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/  | m11 m12 0 |   |x|   |x'|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280100,"byte_end":280131,"line_start":49,"line_end":49,"column_start":1,"column_end":32}},{"value":"/  | m21 m22 0 | x |y| = |y'|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280132,"byte_end":280163,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/  | m31 m32 1 |   |1|   |w |","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280164,"byte_end":280195,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280196,"byte_end":280203,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280204,"byte_end":280207,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ When translating Transform2D into general matrix representations, consider that the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280208,"byte_end":280295,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ representation follows the column-major notation with column vectors.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280296,"byte_end":280369,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280370,"byte_end":280373,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m31 and m32.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280374,"byte_end":280416,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280417,"byte_end":280427,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2391},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280657,"byte_end":280660,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform2d::Transform2D::m11","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2392},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280669,"byte_end":280672,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform2d::Transform2D::m12","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2393},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280685,"byte_end":280688,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform2d::Transform2D::m21","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2394},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280697,"byte_end":280700,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform2d::Transform2D::m22","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2395},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280713,"byte_end":280716,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform2d::Transform2D::m31","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2396},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280725,"byte_end":280728,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform2d::Transform2D::m32","value":"T","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2397},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280760,"byte_end":280765,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform2d::Transform2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282453,"byte_end":282456,"line_start":133,"line_end":133,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform2D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in using the column-major-column-vector\n matrix notation.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in using the column-major-column-vector","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281987,"byte_end":282075,"line_start":118,"line_end":118,"column_start":5,"column_end":93}},{"value":"/ matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282080,"byte_end":282100,"line_start":119,"line_end":119,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282105,"byte_end":282108,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m31 and m32 are the last two parameters parameters.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282113,"byte_end":282203,"line_start":121,"line_end":121,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282208,"byte_end":282211,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282216,"byte_end":282223,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282228,"byte_end":282265,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282270,"byte_end":282287,"line_start":125,"line_end":125,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282292,"byte_end":282309,"line_start":126,"line_end":126,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform2D::new(","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282314,"byte_end":282353,"line_start":127,"line_end":127,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282358,"byte_end":282373,"line_start":128,"line_end":128,"column_start":5,"column_end":20}},{"value":"/   0.0, 1.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282378,"byte_end":282393,"line_start":129,"line_end":129,"column_start":5,"column_end":20}},{"value":"/   tx,  ty,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282398,"byte_end":282412,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/ );","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282417,"byte_end":282423,"line_start":131,"line_end":131,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282428,"byte_end":282435,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282982,"byte_end":282991,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform2D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282656,"byte_end":282737,"line_start":142,"line_end":142,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282742,"byte_end":282772,"line_start":143,"line_end":143,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282777,"byte_end":282780,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282785,"byte_end":282865,"line_start":145,"line_end":145,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282870,"byte_end":282873,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282878,"byte_end":282956,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":282961,"byte_end":282970,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283453,"byte_end":283466,"line_start":161,"line_end":161,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform2D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283116,"byte_end":283197,"line_start":154,"line_end":154,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283202,"byte_end":283231,"line_start":155,"line_end":155,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283236,"byte_end":283239,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283244,"byte_end":283328,"line_start":157,"line_end":157,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283333,"byte_end":283336,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283341,"byte_end":283427,"line_start":159,"line_end":159,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283432,"byte_end":283441,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284032,"byte_end":284040,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283663,"byte_end":283718,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283723,"byte_end":283726,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283731,"byte_end":283787,"line_start":170,"line_end":170,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform2D::new`, that is following the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283792,"byte_end":283850,"line_start":171,"line_end":171,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283855,"byte_end":283902,"line_start":172,"line_end":172,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283907,"byte_end":283910,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found in the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283915,"byte_end":283969,"line_start":174,"line_end":174,"column_start":5,"column_end":59}},{"value":"/ last two slots of the array.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283974,"byte_end":284006,"line_start":175,"line_end":175,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284011,"byte_end":284020,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284588,"byte_end":284607,"line_start":194,"line_end":194,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform2D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284186,"byte_end":284252,"line_start":185,"line_end":185,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284257,"byte_end":284260,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284265,"byte_end":284334,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284339,"byte_end":284408,"line_start":188,"line_end":188,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284413,"byte_end":284461,"line_start":189,"line_end":189,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284466,"byte_end":284469,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 2 and 5","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284474,"byte_end":284540,"line_start":191,"line_end":191,"column_start":5,"column_end":71}},{"value":"/ in the array.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284545,"byte_end":284562,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284567,"byte_end":284576,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2437},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284861,"byte_end":284870,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform2D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed two at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed two at a time","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284741,"byte_end":284804,"line_start":201,"line_end":201,"column_start":5,"column_end":68}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284809,"byte_end":284835,"line_start":202,"line_end":202,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":284840,"byte_end":284849,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285335,"byte_end":285345,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform2D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 6 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285028,"byte_end":285088,"line_start":212,"line_end":212,"column_start":5,"column_end":65}},{"value":"/ of 6 elements instead of as individual parameters.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285093,"byte_end":285147,"line_start":213,"line_end":213,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285152,"byte_end":285155,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285160,"byte_end":285210,"line_start":215,"line_end":215,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285215,"byte_end":285277,"line_start":216,"line_end":216,"column_start":5,"column_end":67}},{"value":"/ as `Transform2D::new`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285282,"byte_end":285309,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285314,"byte_end":285323,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285791,"byte_end":285802,"line_start":234,"line_end":234,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform2D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed two at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed two at a time","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285507,"byte_end":285572,"line_start":227,"line_end":227,"column_start":5,"column_end":70}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285577,"byte_end":285603,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285608,"byte_end":285611,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285616,"byte_end":285666,"line_start":230,"line_end":230,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285671,"byte_end":285733,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285738,"byte_end":285765,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285770,"byte_end":285779,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2445},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286067,"byte_end":286077,"line_start":244,"line_end":244,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":285987,"byte_end":286041,"line_start":242,"line_end":242,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286046,"byte_end":286055,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286335,"byte_end":286347,"line_start":254,"line_end":254,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286273,"byte_end":286309,"line_start":252,"line_end":252,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286314,"byte_end":286323,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286614,"byte_end":286625,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform2D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286528,"byte_end":286588,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286593,"byte_end":286602,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286908,"byte_end":286924,"line_start":274,"line_end":274,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform2D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286817,"byte_end":286882,"line_start":272,"line_end":272,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":286887,"byte_end":286896,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287180,"byte_end":287185,"line_start":283,"line_end":283,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Transform2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a 3D transform from the current transform\n","sig":null,"attributes":[{"value":"/ Create a 3D transform from the current transform","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287116,"byte_end":287168,"line_start":282,"line_end":282,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2456},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287522,"byte_end":287526,"line_start":294,"line_end":294,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform2D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform2D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287422,"byte_end":287496,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287501,"byte_end":287510,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287721,"byte_end":287729,"line_start":299,"line_end":299,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform2D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform2D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287626,"byte_end":287709,"line_start":298,"line_end":298,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288505,"byte_end":288513,"line_start":329,"line_end":329,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix:","sig":null,"attributes":[{"value":"/ Create an identity matrix:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288377,"byte_end":288407,"line_start":321,"line_end":321,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288412,"byte_end":288415,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288420,"byte_end":288431,"line_start":323,"line_end":323,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288436,"byte_end":288443,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288448,"byte_end":288455,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288460,"byte_end":288467,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288472,"byte_end":288479,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288484,"byte_end":288493,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289206,"byte_end":289210,"line_start":353,"line_end":353,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform2D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform2D<T, Dst, NewDst>)\n-> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289052,"byte_end":289133,"line_start":350,"line_end":350,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289138,"byte_end":289178,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289183,"byte_end":289194,"line_start":352,"line_end":352,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289956,"byte_end":289967,"line_start":380,"line_end":380,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform2D<T, Src, Dst>>::translation","value":"pub fn translation(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d translation transform:","sig":null,"attributes":[{"value":"/ Create a 2d translation transform:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289820,"byte_end":289858,"line_start":372,"line_end":372,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289863,"byte_end":289866,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289871,"byte_end":289882,"line_start":374,"line_end":374,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289887,"byte_end":289894,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289899,"byte_end":289906,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ x y","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289911,"byte_end":289918,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289923,"byte_end":289930,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289935,"byte_end":289944,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2479},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290294,"byte_end":290308,"line_start":394,"line_end":394,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform2D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector2D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290162,"byte_end":290252,"line_start":391,"line_end":391,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290257,"byte_end":290266,"line_start":392,"line_end":392,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290271,"byte_end":290282,"line_start":393,"line_end":393,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290613,"byte_end":290626,"line_start":404,"line_end":404,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform2D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector2D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290480,"byte_end":290571,"line_start":401,"line_end":401,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290576,"byte_end":290585,"line_start":402,"line_end":402,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290590,"byte_end":290601,"line_start":403,"line_end":403,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291054,"byte_end":291062,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform2D<T, Src, Dst>>::rotation","value":"pub fn rotation(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation transform.\n","sig":null,"attributes":[{"value":"/ Returns a rotation transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290995,"byte_end":291028,"line_start":417,"line_end":417,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291033,"byte_end":291042,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291439,"byte_end":291450,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform2D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291310,"byte_end":291397,"line_start":430,"line_end":430,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291402,"byte_end":291411,"line_start":431,"line_end":431,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291416,"byte_end":291427,"line_start":432,"line_end":432,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291675,"byte_end":291685,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform2D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291545,"byte_end":291633,"line_start":437,"line_end":437,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291638,"byte_end":291647,"line_start":438,"line_end":438,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291652,"byte_end":291663,"line_start":439,"line_end":439,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292017,"byte_end":292022,"line_start":455,"line_end":455,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform2D<T, Src, Dst>>::scale","value":"pub fn scale(T, T) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d scale transform:","sig":null,"attributes":[{"value":"/ Create a 2d scale transform:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291887,"byte_end":291919,"line_start":447,"line_end":447,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291924,"byte_end":291927,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291932,"byte_end":291943,"line_start":449,"line_end":449,"column_start":5,"column_end":16}},{"value":"/ x 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291948,"byte_end":291955,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ 0 y","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291960,"byte_end":291967,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291972,"byte_end":291979,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291984,"byte_end":291991,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291996,"byte_end":292005,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292347,"byte_end":292357,"line_start":471,"line_end":471,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform2D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale after self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292221,"byte_end":292305,"line_start":468,"line_end":468,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292310,"byte_end":292319,"line_start":469,"line_end":469,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292324,"byte_end":292335,"line_start":470,"line_end":470,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292644,"byte_end":292653,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform2D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T) -> Self where T: Copy + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale before self's transformation and returns the resulting transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292517,"byte_end":292602,"line_start":478,"line_end":478,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292607,"byte_end":292616,"line_start":479,"line_end":479,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292621,"byte_end":292632,"line_start":480,"line_end":480,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293145,"byte_end":293160,"line_start":501,"line_end":501,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this transform.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293045,"byte_end":293103,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293108,"byte_end":293117,"line_start":499,"line_end":499,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293122,"byte_end":293133,"line_start":500,"line_end":500,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293481,"byte_end":293497,"line_start":511,"line_end":511,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this matrix.\n","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this matrix.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293383,"byte_end":293439,"line_start":508,"line_end":508,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293444,"byte_end":293453,"line_start":509,"line_end":509,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293458,"byte_end":293469,"line_start":510,"line_end":510,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293817,"byte_end":293839,"line_start":520,"line_end":520,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293661,"byte_end":293756,"line_start":516,"line_end":516,"column_start":5,"column_end":100}},{"value":"/ transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293761,"byte_end":293775,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293780,"byte_end":293789,"line_start":518,"line_end":518,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":293794,"byte_end":293805,"line_start":519,"line_end":519,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294394,"byte_end":294415,"line_start":539,"line_end":539,"column_start":12,"column_end":33},"name":"outer_transformed_box","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_box","value":"pub fn outer_transformed_box(&Self, &Box2D<T, Src>) -> Box2D<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a box that encompasses the result of transforming the given box by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294250,"byte_end":294333,"line_start":535,"line_end":535,"column_start":5,"column_end":88}},{"value":"/ transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294338,"byte_end":294352,"line_start":536,"line_end":536,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294357,"byte_end":294366,"line_start":537,"line_end":537,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294371,"byte_end":294382,"line_start":538,"line_end":538,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294994,"byte_end":295005,"line_start":558,"line_end":558,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform2D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes and returns the determinant of this transform.\n","sig":null,"attributes":[{"value":"/ Computes and returns the determinant of this transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294923,"byte_end":294982,"line_start":557,"line_end":557,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295175,"byte_end":295188,"line_start":564,"line_end":564,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform2D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295081,"byte_end":295149,"line_start":562,"line_end":562,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295154,"byte_end":295163,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295334,"byte_end":295341,"line_start":570,"line_end":570,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform2D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295260,"byte_end":295306,"line_start":568,"line_end":568,"column_start":5,"column_end":51}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295311,"byte_end":295322,"line_start":569,"line_end":569,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2566},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304389,"byte_end":304400,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform3D","qualname":"::transform3d::Transform3D","value":"Transform3D { m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, _unit }","parent":null,"children":[{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586}],"decl_id":null,"docs":" A 3d transform stored as a column-major 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ A 3d transform stored as a column-major 4 by 4 matrix.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303118,"byte_end":303176,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303177,"byte_end":303180,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303181,"byte_end":303268,"line_start":37,"line_end":37,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303269,"byte_end":303312,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform3D<f32, WorldSpace, ScreenSpace>::transform_point3d`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303313,"byte_end":303392,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ takes a `Point3D<f32, WorldSpace>` and returns a `Point3D<f32, ScreenSpace>`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303393,"byte_end":303474,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303475,"byte_end":303478,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303479,"byte_end":303564,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303565,"byte_end":303648,"line_start":43,"line_end":43,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303649,"byte_end":303736,"line_start":44,"line_end":44,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303737,"byte_end":303789,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303790,"byte_end":303793,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ When translating Transform3D into general matrix representations, consider that the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303794,"byte_end":303881,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ representation follows the column major notation with column vectors.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303882,"byte_end":303955,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303956,"byte_end":303959,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303960,"byte_end":303971,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/  |x'|   | m11 m12 m13 m14 |   |x|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":303972,"byte_end":304009,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/  |y'|   | m21 m22 m23 m24 |   |y|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304010,"byte_end":304047,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/  |z'| = | m31 m32 m33 m34 | x |y|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304048,"byte_end":304085,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/  |w |   | m41 m42 m43 m44 |   |1|","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304086,"byte_end":304123,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304124,"byte_end":304131,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304132,"byte_end":304135,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m41, m42 and m43.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304136,"byte_end":304183,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304184,"byte_end":304194,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2570},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304424,"byte_end":304427,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform3d::Transform3D::m11","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2571},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304436,"byte_end":304439,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform3d::Transform3D::m12","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2572},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304448,"byte_end":304451,"line_start":65,"line_end":65,"column_start":33,"column_end":36},"name":"m13","qualname":"::transform3d::Transform3D::m13","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2573},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304460,"byte_end":304463,"line_start":65,"line_end":65,"column_start":45,"column_end":48},"name":"m14","qualname":"::transform3d::Transform3D::m14","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2574},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304476,"byte_end":304479,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform3d::Transform3D::m21","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2575},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304488,"byte_end":304491,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform3d::Transform3D::m22","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2576},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304500,"byte_end":304503,"line_start":66,"line_end":66,"column_start":33,"column_end":36},"name":"m23","qualname":"::transform3d::Transform3D::m23","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2577},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304512,"byte_end":304515,"line_start":66,"line_end":66,"column_start":45,"column_end":48},"name":"m24","qualname":"::transform3d::Transform3D::m24","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2578},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304528,"byte_end":304531,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform3d::Transform3D::m31","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2579},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304540,"byte_end":304543,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform3d::Transform3D::m32","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2580},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304552,"byte_end":304555,"line_start":67,"line_end":67,"column_start":33,"column_end":36},"name":"m33","qualname":"::transform3d::Transform3D::m33","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2581},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304564,"byte_end":304567,"line_start":67,"line_end":67,"column_start":45,"column_end":48},"name":"m34","qualname":"::transform3d::Transform3D::m34","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2582},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304580,"byte_end":304583,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"m41","qualname":"::transform3d::Transform3D::m41","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2583},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304592,"byte_end":304595,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"name":"m42","qualname":"::transform3d::Transform3D::m42","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2584},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304604,"byte_end":304607,"line_start":68,"line_end":68,"column_start":33,"column_end":36},"name":"m43","qualname":"::transform3d::Transform3D::m43","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2585},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304616,"byte_end":304619,"line_start":68,"line_end":68,"column_start":45,"column_end":48},"name":"m44","qualname":"::transform3d::Transform3D::m44","value":"T","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2586},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304651,"byte_end":304656,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform3d::Transform3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2566},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2615},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307541,"byte_end":307544,"line_start":168,"line_end":168,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying all of it's component as a 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ Create a transform specifying all of it's component as a 4 by 4 matrix.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306858,"byte_end":306933,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306938,"byte_end":306941,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Components are specified following column-major-column-vector matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306946,"byte_end":307028,"line_start":151,"line_end":151,"column_start":5,"column_end":87}},{"value":"/ For example, the translation terms m41, m42, m43 are the 13rd, 14th and 15th parameters.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307033,"byte_end":307125,"line_start":152,"line_end":152,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307130,"byte_end":307133,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307138,"byte_end":307145,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307150,"byte_end":307187,"line_start":155,"line_end":155,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307192,"byte_end":307209,"line_start":156,"line_end":156,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307214,"byte_end":307231,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/ let tz = 3.0;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307236,"byte_end":307253,"line_start":158,"line_end":158,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform3D::new(","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307258,"byte_end":307297,"line_start":159,"line_end":159,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0, 0.0, 0.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307302,"byte_end":307327,"line_start":160,"line_end":160,"column_start":5,"column_end":30}},{"value":"/   0.0, 1.0, 0.0, 0.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307332,"byte_end":307357,"line_start":161,"line_end":161,"column_start":5,"column_end":30}},{"value":"/   0.0, 0.0, 1.0, 0.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307362,"byte_end":307387,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"/   tx,  ty,  tz,  1.0,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307392,"byte_end":307417,"line_start":163,"line_end":163,"column_start":5,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307422,"byte_end":307428,"line_start":164,"line_end":164,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307433,"byte_end":307440,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307445,"byte_end":307454,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308339,"byte_end":308345,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"new_2d","qualname":"<Transform3D<T, Src, Dst>>::new_2d","value":"pub fn new_2d(T, T, T, T, T, T) -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a transform representing a 2d transformation from the components\n of a 2 by 3 matrix transformation.","sig":null,"attributes":[{"value":"/ Create a transform representing a 2d transformation from the components","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":307925,"byte_end":308000,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"/ of a 2 by 3 matrix transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308005,"byte_end":308043,"line_start":184,"line_end":184,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308048,"byte_end":308051,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Components follow the column-major-column-vector notation (m41 and m42","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308056,"byte_end":308130,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ representating the translation terms).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308135,"byte_end":308177,"line_start":187,"line_end":187,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308182,"byte_end":308185,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308190,"byte_end":308201,"line_start":189,"line_end":189,"column_start":5,"column_end":16}},{"value":"/ m11  m12   0   0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308206,"byte_end":308226,"line_start":190,"line_end":190,"column_start":5,"column_end":25}},{"value":"/ m21  m22   0   0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308231,"byte_end":308251,"line_start":191,"line_end":191,"column_start":5,"column_end":25}},{"value":"/   0    0   1   0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308256,"byte_end":308276,"line_start":192,"line_end":192,"column_start":5,"column_end":25}},{"value":"/ m41  m42   0   1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308281,"byte_end":308301,"line_start":193,"line_end":193,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308306,"byte_end":308313,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308318,"byte_end":308327,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308865,"byte_end":308870,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"is_2d","qualname":"<Transform3D<T, Src, Dst>>::is_2d","value":"pub fn is_2d(&Self) -> bool where T: Zero + One + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this transform can be represented with a `Transform2D`.","sig":null,"attributes":[{"value":"/ Returns `true` if this transform can be represented with a `Transform2D`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308686,"byte_end":308763,"line_start":212,"line_end":212,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308768,"byte_end":308771,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#2d-transform>","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308776,"byte_end":308839,"line_start":214,"line_end":214,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":308844,"byte_end":308853,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309657,"byte_end":309665,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309277,"byte_end":309332,"line_start":230,"line_end":230,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309337,"byte_end":309340,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309345,"byte_end":309401,"line_start":232,"line_end":232,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform3D::new`, that is following the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309406,"byte_end":309464,"line_start":233,"line_end":233,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309469,"byte_end":309516,"line_start":234,"line_end":234,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309521,"byte_end":309524,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found on the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309529,"byte_end":309583,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"/ 13th, 14th and 15th slots of the array.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309588,"byte_end":309631,"line_start":237,"line_end":237,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309636,"byte_end":309645,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310330,"byte_end":310349,"line_start":257,"line_end":257,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309924,"byte_end":309990,"line_start":248,"line_end":248,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309995,"byte_end":309998,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310003,"byte_end":310072,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310077,"byte_end":310146,"line_start":251,"line_end":251,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310151,"byte_end":310199,"line_start":252,"line_end":252,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310204,"byte_end":310207,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 3, 7 and 11","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310212,"byte_end":310282,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ of the array.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310287,"byte_end":310304,"line_start":255,"line_end":255,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310309,"byte_end":310318,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2628},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310729,"byte_end":310738,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed four at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed four at a time","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310608,"byte_end":310672,"line_start":266,"line_end":266,"column_start":5,"column_end":69}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310677,"byte_end":310703,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":310708,"byte_end":310717,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311141,"byte_end":311161,"line_start":281,"line_end":281,"column_start":12,"column_end":32},"name":"to_arrays_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_arrays_transposed","value":"pub fn to_arrays_transposed(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array_transposed` with elements packed\n four at a time in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array_transposed` with elements packed","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311009,"byte_end":311069,"line_start":278,"line_end":278,"column_start":5,"column_end":65}},{"value":"/ four at a time in an array of arrays.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311074,"byte_end":311115,"line_start":279,"line_end":279,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311120,"byte_end":311129,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311740,"byte_end":311750,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform3D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 16 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311432,"byte_end":311492,"line_start":290,"line_end":290,"column_start":5,"column_end":65}},{"value":"/ of 16 elements instead of as individual parameters.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311497,"byte_end":311552,"line_start":291,"line_end":291,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311557,"byte_end":311560,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311565,"byte_end":311615,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311620,"byte_end":311682,"line_start":294,"line_end":294,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311687,"byte_end":311714,"line_start":295,"line_end":295,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":311719,"byte_end":311728,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312324,"byte_end":312335,"line_start":313,"line_end":313,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform3D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed four at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed four at a time","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312039,"byte_end":312105,"line_start":306,"line_end":306,"column_start":5,"column_end":71}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312110,"byte_end":312136,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312141,"byte_end":312144,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312149,"byte_end":312199,"line_start":309,"line_end":309,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312204,"byte_end":312266,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312271,"byte_end":312298,"line_start":311,"line_end":311,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312303,"byte_end":312312,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312724,"byte_end":312736,"line_start":324,"line_end":324,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312662,"byte_end":312698,"line_start":322,"line_end":322,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":312703,"byte_end":312712,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313080,"byte_end":313090,"line_start":335,"line_end":335,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313000,"byte_end":313054,"line_start":333,"line_end":333,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313059,"byte_end":313068,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313485,"byte_end":313496,"line_start":346,"line_end":346,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform3D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313399,"byte_end":313459,"line_start":344,"line_end":344,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313464,"byte_end":313473,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313891,"byte_end":313907,"line_start":357,"line_end":357,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform3D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313800,"byte_end":313865,"line_start":355,"line_end":355,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":313870,"byte_end":313879,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314500,"byte_end":314505,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Transform3D<T, Src, Dst>>::to_2d","value":"pub fn to_2d(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 2D transform picking the relevant terms from this transform.","sig":null,"attributes":[{"value":"/ Create a 2D transform picking the relevant terms from this transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314211,"byte_end":314284,"line_start":366,"line_end":366,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314289,"byte_end":314292,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This method assumes that self represents a 2d transformation, callers","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314297,"byte_end":314370,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ should check that [`self.is_2d()`] returns `true` beforehand.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314375,"byte_end":314440,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314445,"byte_end":314448,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ [`self.is_2d()`]: #method.is_2d","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314453,"byte_end":314488,"line_start":371,"line_end":371,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314915,"byte_end":314923,"line_start":394,"line_end":394,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity matrix:","sig":null,"attributes":[{"value":"/ Creates an identity matrix:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314758,"byte_end":314789,"line_start":385,"line_end":385,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314794,"byte_end":314797,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314802,"byte_end":314813,"line_start":387,"line_end":387,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314818,"byte_end":314829,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314834,"byte_end":314845,"line_start":389,"line_end":389,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314850,"byte_end":314861,"line_start":390,"line_end":390,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314866,"byte_end":314877,"line_start":391,"line_end":391,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314882,"byte_end":314889,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314894,"byte_end":314903,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315453,"byte_end":315457,"line_start":412,"line_end":412,"column_start":12,"column_end":16},"name":"skew","qualname":"<Transform3D<T, Src, Dst>>::skew","value":"pub fn skew(Angle<T>, Angle<T>) -> Self where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d skew transform.","sig":null,"attributes":[{"value":"/ Create a 2d skew transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315334,"byte_end":315365,"line_start":409,"line_end":409,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315370,"byte_end":315373,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#funcdef-skew>","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315378,"byte_end":315441,"line_start":411,"line_end":411,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316142,"byte_end":316153,"line_start":438,"line_end":438,"column_start":12,"column_end":23},"name":"perspective","qualname":"<Transform3D<T, Src, Dst>>::perspective","value":"pub fn perspective(T) -> Self where T: Neg<Output = T> + Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Create a simple perspective transform, projecting to the plane `z = -d`.","sig":null,"attributes":[{"value":"/ Create a simple perspective transform, projecting to the plane `z = -d`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315844,"byte_end":315920,"line_start":428,"line_end":428,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315925,"byte_end":315928,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315933,"byte_end":315944,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ 1   0   0   0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315949,"byte_end":315966,"line_start":431,"line_end":431,"column_start":5,"column_end":22}},{"value":"/ 0   1   0   0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315971,"byte_end":315988,"line_start":432,"line_end":432,"column_start":5,"column_end":22}},{"value":"/ 0   0   1 -1/d","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":315993,"byte_end":316011,"line_start":433,"line_end":433,"column_start":5,"column_end":23}},{"value":"/ 0   0   0   1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316016,"byte_end":316033,"line_start":434,"line_end":434,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316038,"byte_end":316045,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316050,"byte_end":316053,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined>.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316058,"byte_end":316130,"line_start":437,"line_end":437,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316863,"byte_end":316867,"line_start":465,"line_end":465,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform3D<T, Dst, NewDst>)\n-> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316638,"byte_end":316719,"line_start":460,"line_end":460,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316724,"byte_end":316764,"line_start":461,"line_end":461,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316769,"byte_end":316772,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316777,"byte_end":316835,"line_start":463,"line_end":463,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316840,"byte_end":316851,"line_start":464,"line_end":464,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319051,"byte_end":319062,"line_start":504,"line_end":504,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform3D<T, Src, Dst>>::translation","value":"pub fn translation(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d translation transform:","sig":null,"attributes":[{"value":"/ Create a 3d translation transform:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318887,"byte_end":318925,"line_start":495,"line_end":495,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318930,"byte_end":318933,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318938,"byte_end":318949,"line_start":497,"line_end":497,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318954,"byte_end":318965,"line_start":498,"line_end":498,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318970,"byte_end":318981,"line_start":499,"line_end":499,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318986,"byte_end":318997,"line_start":500,"line_end":500,"column_start":5,"column_end":16}},{"value":"/ x y z 1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319002,"byte_end":319013,"line_start":501,"line_end":501,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319018,"byte_end":319025,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319030,"byte_end":319039,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319445,"byte_end":319458,"line_start":518,"line_end":518,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform3D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector3D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied before self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319337,"byte_end":319417,"line_start":516,"line_end":516,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319422,"byte_end":319433,"line_start":517,"line_end":517,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319741,"byte_end":319755,"line_start":527,"line_end":527,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform3D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector3D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319634,"byte_end":319713,"line_start":525,"line_end":525,"column_start":5,"column_end":84}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":319718,"byte_end":319729,"line_start":526,"line_end":526,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":320268,"byte_end":320276,"line_start":542,"line_end":542,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform3D<T, Src, Dst>>::rotation","value":"pub fn rotation(T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d rotation transform from an angle / axis.\n The supplied axis must be normalized.\n","sig":null,"attributes":[{"value":"/ Create a 3d rotation transform from an angle / axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":320154,"byte_end":320210,"line_start":540,"line_end":540,"column_start":5,"column_end":61}},{"value":"/ The supplied axis must be normalized.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":320215,"byte_end":320256,"line_start":541,"line_end":541,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321253,"byte_end":321264,"line_start":580,"line_end":580,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform3D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321149,"byte_end":321225,"line_start":578,"line_end":578,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321230,"byte_end":321241,"line_start":579,"line_end":579,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321491,"byte_end":321501,"line_start":586,"line_end":586,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform3D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied before self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321386,"byte_end":321463,"line_start":584,"line_end":584,"column_start":5,"column_end":82}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321468,"byte_end":321479,"line_start":585,"line_end":585,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321913,"byte_end":321918,"line_start":605,"line_end":605,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform3D<T, Src, Dst>>::scale","value":"pub fn scale(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d scale transform:","sig":null,"attributes":[{"value":"/ Create a 3d scale transform:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321755,"byte_end":321787,"line_start":596,"line_end":596,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321792,"byte_end":321795,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321800,"byte_end":321811,"line_start":598,"line_end":598,"column_start":5,"column_end":16}},{"value":"/ x 0 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321816,"byte_end":321827,"line_start":599,"line_end":599,"column_start":5,"column_end":16}},{"value":"/ 0 y 0 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321832,"byte_end":321843,"line_start":600,"line_end":600,"column_start":5,"column_end":16}},{"value":"/ 0 0 z 0","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321848,"byte_end":321859,"line_start":601,"line_end":601,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321864,"byte_end":321875,"line_start":602,"line_end":602,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321880,"byte_end":321887,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321892,"byte_end":321901,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2687},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322295,"byte_end":322304,"line_start":619,"line_end":619,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform3D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied before self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322193,"byte_end":322267,"line_start":617,"line_end":617,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322272,"byte_end":322283,"line_start":618,"line_end":618,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322822,"byte_end":322832,"line_start":633,"line_end":633,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform3D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied after self's transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322721,"byte_end":322794,"line_start":631,"line_end":631,"column_start":5,"column_end":78}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":322799,"byte_end":322810,"line_start":632,"line_end":632,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323347,"byte_end":323376,"line_start":650,"line_end":650,"column_start":12,"column_end":41},"name":"transform_point2d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d_homogeneous","value":"pub fn transform_point2d_homogeneous(&Self, Point2D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 2d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 2d point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323145,"byte_end":323222,"line_start":646,"line_end":646,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323227,"byte_end":323230,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323235,"byte_end":323321,"line_start":648,"line_end":648,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323326,"byte_end":323335,"line_start":649,"line_end":649,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323989,"byte_end":324006,"line_start":666,"line_end":666,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Option<Point2D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323744,"byte_end":323835,"line_start":661,"line_end":661,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323840,"byte_end":323864,"line_start":662,"line_end":662,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323869,"byte_end":323872,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323877,"byte_end":323963,"line_start":664,"line_end":664,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323968,"byte_end":323977,"line_start":665,"line_end":665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324724,"byte_end":324742,"line_start":686,"line_end":686,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this matrix.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324540,"byte_end":324599,"line_start":682,"line_end":682,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324604,"byte_end":324607,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324612,"byte_end":324698,"line_start":684,"line_end":684,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324703,"byte_end":324712,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325120,"byte_end":325149,"line_start":697,"line_end":697,"column_start":12,"column_end":41},"name":"transform_point3d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d_homogeneous","value":"pub fn transform_point3d_homogeneous(&Self, Point3D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 3d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 3d point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":324918,"byte_end":324995,"line_start":693,"line_end":693,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325000,"byte_end":325003,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325008,"byte_end":325094,"line_start":695,"line_end":695,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325099,"byte_end":325108,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325830,"byte_end":325847,"line_start":713,"line_end":713,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Option<Point3D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325585,"byte_end":325676,"line_start":708,"line_end":708,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325681,"byte_end":325705,"line_start":709,"line_end":709,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325710,"byte_end":325713,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325718,"byte_end":325804,"line_start":711,"line_end":711,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":325809,"byte_end":325818,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326220,"byte_end":326238,"line_start":724,"line_end":724,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this matrix.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326036,"byte_end":326095,"line_start":720,"line_end":720,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326100,"byte_end":326103,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326108,"byte_end":326194,"line_start":722,"line_end":722,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326199,"byte_end":326208,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326694,"byte_end":326716,"line_start":734,"line_end":734,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Option<Rect<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326510,"byte_end":326605,"line_start":732,"line_end":732,"column_start":5,"column_end":100}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":326610,"byte_end":326682,"line_start":733,"line_end":733,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327345,"byte_end":327368,"line_start":750,"line_end":750,"column_start":12,"column_end":35},"name":"outer_transformed_box2d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box2d","value":"pub fn outer_transformed_box2d(&Self, &Box2D<T, Src>) -> Option<Box2D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 2d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327170,"byte_end":327256,"line_start":748,"line_end":748,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327261,"byte_end":327333,"line_start":749,"line_end":749,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327949,"byte_end":327972,"line_start":764,"line_end":764,"column_start":12,"column_end":35},"name":"outer_transformed_box3d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box3d","value":"pub fn outer_transformed_box3d(&Self, &Box3D<T, Src>) -> Option<Box3D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 3d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 3d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327774,"byte_end":327860,"line_start":762,"line_end":762,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":327865,"byte_end":327937,"line_start":763,"line_end":763,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":329043,"byte_end":329048,"line_start":793,"line_end":793,"column_start":12,"column_end":17},"name":"ortho","qualname":"<Transform3D<T, Src, Dst>>::ortho","value":"pub fn ortho(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an orthogonal projection transform.\n","sig":null,"attributes":[{"value":"/ Create an orthogonal projection transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":328985,"byte_end":329031,"line_start":792,"line_end":792,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":329891,"byte_end":329910,"line_start":812,"line_end":812,"column_start":12,"column_end":31},"name":"is_backface_visible","qualname":"<Transform3D<T, Src, Dst>>::is_backface_visible","value":"pub fn is_backface_visible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether shapes on the XY plane with Z pointing towards the\n screen transformed by this matrix would be facing back.\n","sig":null,"attributes":[{"value":"/ Check whether shapes on the XY plane with Z pointing towards the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":329747,"byte_end":329815,"line_start":810,"line_end":810,"column_start":5,"column_end":73}},{"value":"/ screen transformed by this matrix would be facing back.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":329820,"byte_end":329879,"line_start":811,"line_end":811,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":330411,"byte_end":330424,"line_start":824,"line_end":824,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform3D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":330317,"byte_end":330385,"line_start":822,"line_end":822,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":330390,"byte_end":330399,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2709},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":330554,"byte_end":330561,"line_start":829,"line_end":829,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform3D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":330496,"byte_end":330542,"line_start":828,"line_end":828,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":334356,"byte_end":334367,"line_start":909,"line_end":909,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform3D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute the determinant of the transform.\n","sig":null,"attributes":[{"value":"/ Compute the determinant of the transform.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":334299,"byte_end":334344,"line_start":908,"line_end":908,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2711},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":335750,"byte_end":335755,"line_start":938,"line_end":938,"column_start":12,"column_end":17},"name":"mul_s","qualname":"<Transform3D<T, Src, Dst>>::mul_s","value":"pub fn mul_s(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies all of the transform's component by a scalar and returns the result.\n","sig":null,"attributes":[{"value":"/ Multiplies all of the transform's component by a scalar and returns the result.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":335639,"byte_end":335722,"line_start":936,"line_end":936,"column_start":5,"column_end":88}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":335727,"byte_end":335738,"line_start":937,"line_end":937,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336177,"byte_end":336187,"line_start":948,"line_end":948,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Transform3D<T, Src, Dst>>::from_scale","value":"pub fn from_scale(Scale<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a scale transform from a `Scale`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a scale transform from a `Scale`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336097,"byte_end":336165,"line_start":947,"line_end":947,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2717},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336497,"byte_end":336510,"line_start":958,"line_end":958,"column_start":12,"column_end":25},"name":"project_to_2d","qualname":"<Transform3D<T, Src, Dst>>::project_to_2d","value":"pub fn project_to_2d(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a projection of this transform in 2d space.\n","sig":null,"attributes":[{"value":"/ Returns a projection of this transform in 2d space.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336430,"byte_end":336485,"line_start":957,"line_end":957,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2722},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":338007,"byte_end":338011,"line_start":997,"line_end":997,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform3D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform3D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":337907,"byte_end":337981,"line_start":995,"line_end":995,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":337986,"byte_end":337995,"line_start":996,"line_end":996,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2724},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":338206,"byte_end":338214,"line_start":1002,"line_end":1002,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform3D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform3D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":338111,"byte_end":338194,"line_start":1001,"line_end":1001,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339743,"byte_end":339752,"line_start":1033,"line_end":1033,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform3D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339417,"byte_end":339498,"line_start":1026,"line_end":1026,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339503,"byte_end":339533,"line_start":1027,"line_end":1027,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339538,"byte_end":339541,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339546,"byte_end":339626,"line_start":1029,"line_end":1029,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339631,"byte_end":339634,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339639,"byte_end":339717,"line_start":1031,"line_end":1031,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339722,"byte_end":339731,"line_start":1032,"line_end":1032,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340188,"byte_end":340201,"line_start":1044,"line_end":1044,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform3D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339851,"byte_end":339932,"line_start":1037,"line_end":1037,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339937,"byte_end":339966,"line_start":1038,"line_end":1038,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339971,"byte_end":339974,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339979,"byte_end":340063,"line_start":1040,"line_end":1040,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340068,"byte_end":340071,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340076,"byte_end":340162,"line_start":1042,"line_end":1042,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340167,"byte_end":340176,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2779},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354331,"byte_end":354344,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"Translation2D","qualname":"::translation::Translation2D","value":"Translation2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785}],"decl_id":null,"docs":" A 2d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 2d transformation from a space to another that can only express translations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353430,"byte_end":353513,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353514,"byte_end":353517,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector2D is the ability to cast","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353518,"byte_end":353590,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353591,"byte_end":353637,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353638,"byte_end":353641,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353642,"byte_end":353654,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353655,"byte_end":353658,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353659,"byte_end":353666,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use euclid::{Translation2D, Point2D, point2};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353667,"byte_end":353716,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ struct ParentSpace;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353717,"byte_end":353740,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ struct ChildSpace;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353741,"byte_end":353763,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ type ScrollOffset = Translation2D<i32, ParentSpace, ChildSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353764,"byte_end":353832,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ type ParentPoint = Point2D<i32, ParentSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353833,"byte_end":353882,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ type ChildPoint = Point2D<i32, ChildSpace>;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353883,"byte_end":353930,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353931,"byte_end":353934,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let scrolling = ScrollOffset::new(0, 100);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353935,"byte_end":353981,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ let p1: ParentPoint = point2(0, 0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":353982,"byte_end":354021,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ let p2: ChildPoint = scrolling.transform_point(p1);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354022,"byte_end":354077,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354078,"byte_end":354085,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354086,"byte_end":354089,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354090,"byte_end":354100,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2783},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354368,"byte_end":354369,"line_start":52,"line_end":52,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation2D::x","value":"T","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2784},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354382,"byte_end":354383,"line_start":53,"line_end":53,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation2D::y","value":"T","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2785},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354415,"byte_end":354420,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355260,"byte_end":355263,"line_start":93,"line_end":93,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation2D<T, Src, Dst>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355233,"byte_end":355242,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2815},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355480,"byte_end":355488,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (both `x` and `y` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (both `x` and `y` is `zero()`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355393,"byte_end":355454,"line_start":101,"line_end":101,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355459,"byte_end":355468,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2816},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356036,"byte_end":356047,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation2D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (both x and y is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (both x and y is `zero()`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355583,"byte_end":355648,"line_start":110,"line_end":110,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355653,"byte_end":355656,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355661,"byte_end":355672,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355677,"byte_end":355716,"line_start":113,"line_end":113,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355721,"byte_end":355724,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation2D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355729,"byte_end":355798,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation2D::new(0, 0).is_identity(), true);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355803,"byte_end":355864,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(Translation2D::new(1, 0).is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355869,"byte_end":355931,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Translation2D::new(0, 1).is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355936,"byte_end":355998,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356003,"byte_end":356010,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356015,"byte_end":356024,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356240,"byte_end":356254,"line_start":131,"line_end":131,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation2D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(&Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356184,"byte_end":356214,"line_start":129,"line_end":129,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356219,"byte_end":356228,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356458,"byte_end":356467,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation2D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector2D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 2D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 2D vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356406,"byte_end":356432,"line_start":137,"line_end":137,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356437,"byte_end":356446,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356599,"byte_end":356607,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356537,"byte_end":356573,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356578,"byte_end":356587,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356724,"byte_end":356732,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation2D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356663,"byte_end":356698,"line_start":149,"line_end":149,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356703,"byte_end":356712,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356868,"byte_end":356878,"line_start":157,"line_end":157,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356788,"byte_end":356842,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356847,"byte_end":356856,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357119,"byte_end":357131,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357057,"byte_end":357093,"line_start":165,"line_end":165,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357098,"byte_end":357107,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357391,"byte_end":357403,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357307,"byte_end":357365,"line_start":175,"line_end":175,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357370,"byte_end":357379,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357578,"byte_end":357593,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357512,"byte_end":357552,"line_start":184,"line_end":184,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357557,"byte_end":357566,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357804,"byte_end":357818,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation2D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357734,"byte_end":357778,"line_start":193,"line_end":193,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":357783,"byte_end":357792,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358114,"byte_end":358127,"line_start":207,"line_end":207,"column_start":12,"column_end":25},"name":"transform_box","qualname":"<Translation2D<T, Src, Dst>>::transform_box","value":"pub fn transform_box(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358047,"byte_end":358088,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358093,"byte_end":358102,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358404,"byte_end":358411,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation2D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358340,"byte_end":358378,"line_start":217,"line_end":217,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358383,"byte_end":358392,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2882},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360696,"byte_end":360709,"line_start":298,"line_end":298,"column_start":12,"column_end":25},"name":"Translation3D","qualname":"::translation::Translation3D","value":"Translation3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889}],"decl_id":null,"docs":" A 3d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 3d transformation from a space to another that can only express translations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360466,"byte_end":360549,"line_start":293,"line_end":293,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360550,"byte_end":360553,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector3D is the ability to cast","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360554,"byte_end":360626,"line_start":295,"line_end":295,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360627,"byte_end":360673,"line_start":296,"line_end":296,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360674,"byte_end":360684,"line_start":297,"line_end":297,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2886},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360733,"byte_end":360734,"line_start":299,"line_end":299,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation3D::x","value":"T","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2887},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360747,"byte_end":360748,"line_start":300,"line_end":300,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation3D::y","value":"T","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2888},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360761,"byte_end":360762,"line_start":301,"line_end":301,"column_start":9,"column_end":10},"name":"z","qualname":"::translation::Translation3D::z","value":"T","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2889},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360794,"byte_end":360799,"line_start":303,"line_end":303,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2882},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362480,"byte_end":362483,"line_start":375,"line_end":375,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362453,"byte_end":362462,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2919},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362721,"byte_end":362729,"line_start":386,"line_end":386,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (`x`, `y` and `z` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362634,"byte_end":362695,"line_start":384,"line_end":384,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362700,"byte_end":362709,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2920},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363380,"byte_end":363391,"line_start":405,"line_end":405,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation3D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (`x`, `y` and `z` is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362844,"byte_end":362913,"line_start":393,"line_end":393,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362918,"byte_end":362921,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362926,"byte_end":362937,"line_start":395,"line_end":395,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362942,"byte_end":362981,"line_start":396,"line_end":396,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362986,"byte_end":362989,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation3D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362994,"byte_end":363063,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 0).is_identity(), true);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363068,"byte_end":363132,"line_start":399,"line_end":399,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Translation3D::new(1, 0, 0).is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363137,"byte_end":363202,"line_start":400,"line_end":400,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 1, 0).is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363207,"byte_end":363272,"line_start":401,"line_end":401,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 1).is_identity(), false);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363277,"byte_end":363342,"line_start":402,"line_end":402,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363347,"byte_end":363354,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363359,"byte_end":363368,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363600,"byte_end":363614,"line_start":415,"line_end":415,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation3D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363544,"byte_end":363574,"line_start":413,"line_end":413,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363579,"byte_end":363588,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363817,"byte_end":363826,"line_start":423,"line_end":423,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation3D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector3D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 3D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 3D vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363765,"byte_end":363791,"line_start":421,"line_end":421,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363796,"byte_end":363805,"line_start":422,"line_end":422,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363969,"byte_end":363977,"line_start":429,"line_end":429,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363904,"byte_end":363943,"line_start":427,"line_end":427,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363948,"byte_end":363957,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364105,"byte_end":364113,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation3D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364041,"byte_end":364079,"line_start":433,"line_end":433,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364084,"byte_end":364093,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364260,"byte_end":364270,"line_start":441,"line_end":441,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364180,"byte_end":364234,"line_start":439,"line_end":439,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364239,"byte_end":364248,"line_start":440,"line_end":440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364534,"byte_end":364546,"line_start":452,"line_end":452,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364472,"byte_end":364508,"line_start":450,"line_end":450,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364513,"byte_end":364522,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2932},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364826,"byte_end":364838,"line_start":463,"line_end":463,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364742,"byte_end":364800,"line_start":461,"line_end":461,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364805,"byte_end":364814,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365013,"byte_end":365030,"line_start":472,"line_end":472,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Translation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, &Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364947,"byte_end":364987,"line_start":470,"line_end":470,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":364992,"byte_end":365001,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365252,"byte_end":365269,"line_start":481,"line_end":481,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Translation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, &Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365186,"byte_end":365226,"line_start":479,"line_end":479,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365231,"byte_end":365240,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365478,"byte_end":365493,"line_start":490,"line_end":490,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Translation3D<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365411,"byte_end":365452,"line_start":488,"line_end":488,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365457,"byte_end":365466,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365779,"byte_end":365794,"line_start":502,"line_end":502,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Translation3D<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(&Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 3D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 3D box and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365712,"byte_end":365753,"line_start":500,"line_end":500,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":365758,"byte_end":365767,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366083,"byte_end":366097,"line_start":514,"line_end":514,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation3D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366013,"byte_end":366057,"line_start":512,"line_end":512,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366062,"byte_end":366071,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366385,"byte_end":366392,"line_start":526,"line_end":526,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation3D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366321,"byte_end":366359,"line_start":524,"line_end":524,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366364,"byte_end":366373,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":2989},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376439,"byte_end":376443,"line_start":11,"line_end":11,"column_start":11,"column_end":15},"name":"Trig","qualname":"::trig::Trig","value":"Trig","parent":null,"children":[{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995}],"decl_id":null,"docs":" Trait for basic trigonometry functions, so they can be used on generic numeric types\n","sig":null,"attributes":[{"value":"/ Trait for basic trigonometry functions, so they can be used on generic numeric types","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376340,"byte_end":376428,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376453,"byte_end":376456,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"sin","qualname":"::trig::Trig::sin","value":"pub fn sin(Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376479,"byte_end":376482,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"cos","qualname":"::trig::Trig::cos","value":"pub fn cos(Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376505,"byte_end":376508,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"tan","qualname":"::trig::Trig::tan","value":"pub fn tan(Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376531,"byte_end":376541,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"fast_atan2","qualname":"::trig::Trig::fast_atan2","value":"pub fn fast_atan2(Self, Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376576,"byte_end":376594,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"degrees_to_radians","qualname":"::trig::Trig::degrees_to_radians","value":"pub fn degrees_to_radians(Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/trig.rs","byte_start":376622,"byte_end":376640,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"radians_to_degrees","qualname":"::trig::Trig::radians_to_degrees","value":"pub fn radians_to_degrees(Self) -> Self","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3040},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379783,"byte_end":379791,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::vector::Vector2D","value":"Vector2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045}],"decl_id":null,"docs":" A 2d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Vector tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379725,"byte_end":379760,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379761,"byte_end":379771,"line_start":34,"line_end":34,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3043},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379864,"byte_end":379865,"line_start":37,"line_end":37,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector2D::x","value":"T","parent":{"krate":0,"index":3040},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379804,"byte_end":379855,"line_start":36,"line_end":36,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3044},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379932,"byte_end":379933,"line_start":39,"line_end":39,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector2D::y","value":"T","parent":{"krate":0,"index":3040},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379874,"byte_end":379923,"line_start":38,"line_end":38,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3045},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":379965,"byte_end":379970,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3080},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381956,"byte_end":381960,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381882,"byte_end":381930,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381935,"byte_end":381944,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3081},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382143,"byte_end":382146,"line_start":136,"line_end":136,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382065,"byte_end":382111,"line_start":134,"line_end":134,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382116,"byte_end":382125,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382322,"byte_end":382343,"line_start":145,"line_end":145,"column_start":12,"column_end":33},"name":"from_angle_and_length","qualname":"<Vector2D<T, U>>::from_angle_and_length","value":"pub fn from_angle_and_length(Angle<T>, T) -> Self where T: Trig + Mul<Output =\nT> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking angle and length\n","sig":null,"attributes":[{"value":"/ Constructor taking angle and length","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382271,"byte_end":382310,"line_start":144,"line_end":144,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3083},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382614,"byte_end":382626,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382522,"byte_end":382588,"line_start":152,"line_end":152,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382593,"byte_end":382602,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3084},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382768,"byte_end":382780,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector2D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unit-less value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unit-less value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382705,"byte_end":382742,"line_start":158,"line_end":158,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382747,"byte_end":382756,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3085},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383424,"byte_end":383427,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector2D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382854,"byte_end":382917,"line_start":164,"line_end":164,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382922,"byte_end":382925,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382930,"byte_end":382943,"line_start":166,"line_end":166,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382948,"byte_end":382951,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382956,"byte_end":382967,"line_start":168,"line_end":168,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":382972,"byte_end":382998,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383003,"byte_end":383026,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383031,"byte_end":383044,"line_start":171,"line_end":171,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383049,"byte_end":383052,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, U>(-1, 2).abs(), vec2(1, 2));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383057,"byte_end":383111,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383116,"byte_end":383119,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let vec = vec2::<_, U>(f32::NAN, -f32::MAX).abs();","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383124,"byte_end":383178,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383183,"byte_end":383211,"line_start":176,"line_end":176,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, f32::MAX);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383216,"byte_end":383248,"line_start":177,"line_end":177,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383253,"byte_end":383260,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383265,"byte_end":383268,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383273,"byte_end":383285,"line_start":180,"line_end":180,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383290,"byte_end":383293,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383298,"byte_end":383377,"line_start":182,"line_end":182,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383382,"byte_end":383412,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383571,"byte_end":383574,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383529,"byte_end":383545,"line_start":191,"line_end":191,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383550,"byte_end":383559,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383828,"byte_end":383833,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector2D<T, U>>::cross","value":"pub fn cross(Self, Self) -> T where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].\n","sig":null,"attributes":[{"value":"/ Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383716,"byte_end":383802,"line_start":200,"line_end":200,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383807,"byte_end":383816,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3091},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384103,"byte_end":384109,"line_start":213,"line_end":213,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vector2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d vector from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d vector from this one, using the specified z value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384011,"byte_end":384077,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384082,"byte_end":384091,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384309,"byte_end":384317,"line_start":221,"line_end":221,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector2D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384185,"byte_end":384219,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384224,"byte_end":384227,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384232,"byte_end":384283,"line_start":219,"line_end":219,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384288,"byte_end":384297,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384503,"byte_end":384505,"line_start":231,"line_end":231,"column_start":12,"column_end":14},"name":"yx","qualname":"<Vector2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.\n","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384460,"byte_end":384477,"line_start":229,"line_end":229,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384482,"byte_end":384491,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384621,"byte_end":384628,"line_start":237,"line_end":237,"column_start":12,"column_end":19},"name":"to_size","qualname":"<Vector2D<T, U>>::to_size","value":"pub fn to_size(Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a size.\n","sig":null,"attributes":[{"value":"/ Cast this vector into a size.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384562,"byte_end":384595,"line_start":235,"line_end":235,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384600,"byte_end":384609,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384774,"byte_end":384784,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384694,"byte_end":384748,"line_start":241,"line_end":241,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384753,"byte_end":384762,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384905,"byte_end":384914,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384861,"byte_end":384879,"line_start":247,"line_end":247,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384884,"byte_end":384893,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385046,"byte_end":385054,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":384984,"byte_end":385020,"line_start":253,"line_end":253,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385025,"byte_end":385034,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385170,"byte_end":385178,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385109,"byte_end":385144,"line_start":259,"line_end":259,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385149,"byte_end":385158,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385330,"byte_end":385335,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Vector2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Vector3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d vector with `z` coordinate equals to `T::zero()`.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d vector with `z` coordinate equals to `T::zero()`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385233,"byte_end":385304,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385309,"byte_end":385318,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3102},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385803,"byte_end":385808,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385447,"byte_end":385502,"line_start":274,"line_end":274,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385507,"byte_end":385510,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385515,"byte_end":385590,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385595,"byte_end":385598,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385603,"byte_end":385614,"line_start":278,"line_end":278,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385619,"byte_end":385642,"line_start":279,"line_end":279,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385647,"byte_end":385661,"line_start":280,"line_end":280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385666,"byte_end":385669,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).round(), vec2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385674,"byte_end":385749,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385754,"byte_end":385761,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385766,"byte_end":385775,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385780,"byte_end":385791,"line_start":285,"line_end":285,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386303,"byte_end":386307,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":385913,"byte_end":386004,"line_start":293,"line_end":293,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386009,"byte_end":386012,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386017,"byte_end":386092,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386097,"byte_end":386100,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386105,"byte_end":386116,"line_start":297,"line_end":297,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386121,"byte_end":386144,"line_start":298,"line_end":298,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386149,"byte_end":386163,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386168,"byte_end":386171,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).ceil(), vec2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386176,"byte_end":386249,"line_start":301,"line_end":301,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386254,"byte_end":386261,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386266,"byte_end":386275,"line_start":303,"line_end":303,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386280,"byte_end":386291,"line_start":304,"line_end":304,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386799,"byte_end":386804,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386409,"byte_end":386497,"line_start":312,"line_end":312,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386502,"byte_end":386505,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386510,"byte_end":386585,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386590,"byte_end":386593,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386598,"byte_end":386609,"line_start":316,"line_end":316,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386614,"byte_end":386637,"line_start":317,"line_end":317,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386642,"byte_end":386656,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386661,"byte_end":386664,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).floor(), vec2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386669,"byte_end":386745,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386750,"byte_end":386757,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386762,"byte_end":386771,"line_start":322,"line_end":322,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386776,"byte_end":386787,"line_start":323,"line_end":323,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3105},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387144,"byte_end":387161,"line_start":336,"line_end":336,"column_start":12,"column_end":29},"name":"angle_from_x_axis","qualname":"<Vector2D<T, U>>::angle_from_x_axis","value":"pub fn angle_from_x_axis(Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and the x axis.\n Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`\n is `+y` axis.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and the x axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386909,"byte_end":386973,"line_start":331,"line_end":331,"column_start":5,"column_end":69}},{"value":"/ Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":386978,"byte_end":387052,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/ is `+y` axis.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387057,"byte_end":387074,"line_start":333,"line_end":333,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387079,"byte_end":387082,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387087,"byte_end":387132,"line_start":335,"line_end":335,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387362,"byte_end":387374,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector2D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform2D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units.\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387281,"byte_end":387336,"line_start":343,"line_end":343,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387341,"byte_end":387350,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387661,"byte_end":387674,"line_start":359,"line_end":359,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector2D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387595,"byte_end":387635,"line_start":357,"line_end":357,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387640,"byte_end":387649,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3111},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387894,"byte_end":387913,"line_start":367,"line_end":367,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector2D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387741,"byte_end":387792,"line_start":363,"line_end":363,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387797,"byte_end":387800,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387805,"byte_end":387868,"line_start":365,"line_end":365,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387873,"byte_end":387882,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388212,"byte_end":388220,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector2D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Sub<Output = T> + Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and another vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388074,"byte_end":388142,"line_start":374,"line_end":374,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388147,"byte_end":388150,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388155,"byte_end":388200,"line_start":376,"line_end":376,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388484,"byte_end":388490,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388428,"byte_end":388458,"line_start":386,"line_end":386,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388463,"byte_end":388472,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3117},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388640,"byte_end":388649,"line_start":395,"line_end":395,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector2D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388551,"byte_end":388598,"line_start":392,"line_end":392,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388603,"byte_end":388612,"line_start":393,"line_end":393,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388617,"byte_end":388628,"line_start":394,"line_end":394,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388939,"byte_end":388952,"line_start":405,"line_end":405,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector2D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388706,"byte_end":388753,"line_start":399,"line_end":399,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388758,"byte_end":388761,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388766,"byte_end":388859,"line_start":401,"line_end":401,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388864,"byte_end":388897,"line_start":402,"line_end":402,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388902,"byte_end":388911,"line_start":403,"line_end":403,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388916,"byte_end":388927,"line_start":404,"line_end":404,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389256,"byte_end":389272,"line_start":417,"line_end":417,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector2D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389124,"byte_end":389214,"line_start":414,"line_end":414,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389219,"byte_end":389228,"line_start":415,"line_end":415,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389233,"byte_end":389244,"line_start":416,"line_end":416,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3120},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389584,"byte_end":389599,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector2D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389508,"byte_end":389558,"line_start":427,"line_end":427,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389563,"byte_end":389572,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3121},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389911,"byte_end":389926,"line_start":440,"line_end":440,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector2D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389832,"byte_end":389885,"line_start":438,"line_end":438,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":389890,"byte_end":389899,"line_start":439,"line_end":439,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3122},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390249,"byte_end":390261,"line_start":451,"line_end":451,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector2D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390159,"byte_end":390223,"line_start":449,"line_end":449,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390228,"byte_end":390237,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3126},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391149,"byte_end":391153,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390504,"byte_end":390583,"line_start":461,"line_end":461,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390588,"byte_end":390591,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390596,"byte_end":390609,"line_start":463,"line_end":463,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390614,"byte_end":390617,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390622,"byte_end":390633,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec2;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390638,"byte_end":390659,"line_start":466,"line_end":466,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector2D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390664,"byte_end":390698,"line_start":467,"line_end":467,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390703,"byte_end":390706,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let from: Vector2D<_> = vec2(0.0, 10.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390711,"byte_end":390755,"line_start":469,"line_end":469,"column_start":5,"column_end":49}},{"value":"/ let to:  Vector2D<_> = vec2(8.0, -4.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390760,"byte_end":390803,"line_start":470,"line_end":470,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390808,"byte_end":390811,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec2(-8.0,  24.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390816,"byte_end":390871,"line_start":472,"line_end":472,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec2( 0.0,  10.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390876,"byte_end":390931,"line_start":473,"line_end":473,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec2( 4.0,   3.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390936,"byte_end":390991,"line_start":474,"line_end":474,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec2( 8.0,  -4.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390996,"byte_end":391051,"line_start":475,"line_end":475,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec2(16.0, -18.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391056,"byte_end":391111,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391116,"byte_end":391123,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391128,"byte_end":391137,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3127},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391368,"byte_end":391375,"line_start":486,"line_end":486,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector2D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391267,"byte_end":391342,"line_start":484,"line_end":484,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391347,"byte_end":391356,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3131},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391657,"byte_end":391660,"line_start":495,"line_end":495,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391545,"byte_end":391631,"line_start":493,"line_end":493,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391636,"byte_end":391645,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391870,"byte_end":391873,"line_start":501,"line_end":501,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391758,"byte_end":391844,"line_start":499,"line_end":499,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391849,"byte_end":391858,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3133},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392169,"byte_end":392174,"line_start":510,"line_end":510,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391971,"byte_end":392045,"line_start":505,"line_end":505,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392050,"byte_end":392086,"line_start":506,"line_end":506,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392091,"byte_end":392094,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392099,"byte_end":392143,"line_start":508,"line_end":508,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392148,"byte_end":392157,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3134},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392394,"byte_end":392406,"line_start":519,"line_end":519,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392290,"byte_end":392368,"line_start":517,"line_end":517,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392373,"byte_end":392382,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3135},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392656,"byte_end":392666,"line_start":528,"line_end":528,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392554,"byte_end":392630,"line_start":526,"line_end":526,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392635,"byte_end":392644,"line_start":527,"line_end":527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392952,"byte_end":392957,"line_start":539,"line_end":539,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392855,"byte_end":392926,"line_start":537,"line_end":537,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392931,"byte_end":392940,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3140},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393208,"byte_end":393217,"line_start":548,"line_end":548,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393107,"byte_end":393182,"line_start":546,"line_end":546,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393187,"byte_end":393196,"line_start":547,"line_end":547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3144},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393794,"byte_end":393798,"line_start":563,"line_end":563,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393413,"byte_end":393487,"line_start":557,"line_end":557,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393492,"byte_end":393495,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393500,"byte_end":393588,"line_start":559,"line_end":559,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393593,"byte_end":393681,"line_start":560,"line_end":560,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393686,"byte_end":393768,"line_start":561,"line_end":561,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393773,"byte_end":393782,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394263,"byte_end":394271,"line_start":572,"line_end":572,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393887,"byte_end":393970,"line_start":567,"line_end":567,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393975,"byte_end":393978,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393983,"byte_end":394071,"line_start":569,"line_end":569,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394076,"byte_end":394164,"line_start":570,"line_end":570,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394169,"byte_end":394251,"line_start":571,"line_end":571,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394596,"byte_end":394602,"line_start":583,"line_end":583,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394540,"byte_end":394570,"line_start":581,"line_end":581,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394575,"byte_end":394584,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3149},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394718,"byte_end":394724,"line_start":589,"line_end":589,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394662,"byte_end":394692,"line_start":587,"line_end":587,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394697,"byte_end":394706,"line_start":588,"line_end":588,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3150},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395081,"byte_end":395089,"line_start":599,"line_end":599,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394784,"byte_end":394844,"line_start":593,"line_end":593,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394849,"byte_end":394852,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394857,"byte_end":394935,"line_start":595,"line_end":595,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":394940,"byte_end":395014,"line_start":596,"line_end":596,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395019,"byte_end":395055,"line_start":597,"line_end":597,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395060,"byte_end":395069,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3151},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395446,"byte_end":395452,"line_start":609,"line_end":609,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395151,"byte_end":395209,"line_start":603,"line_end":603,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395214,"byte_end":395217,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395222,"byte_end":395300,"line_start":605,"line_end":605,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395305,"byte_end":395379,"line_start":606,"line_end":606,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395384,"byte_end":395420,"line_start":607,"line_end":607,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395425,"byte_end":395434,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3152},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395805,"byte_end":395811,"line_start":619,"line_end":619,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395512,"byte_end":395568,"line_start":613,"line_end":613,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395573,"byte_end":395576,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395581,"byte_end":395659,"line_start":615,"line_end":615,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395664,"byte_end":395738,"line_start":616,"line_end":616,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395743,"byte_end":395779,"line_start":617,"line_end":617,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395784,"byte_end":395793,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3153},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396164,"byte_end":396170,"line_start":629,"line_end":629,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395871,"byte_end":395927,"line_start":623,"line_end":623,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395932,"byte_end":395935,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":395940,"byte_end":396018,"line_start":625,"line_end":625,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396023,"byte_end":396097,"line_start":626,"line_end":626,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396102,"byte_end":396138,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396143,"byte_end":396152,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3256},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400322,"byte_end":400330,"line_start":809,"line_end":809,"column_start":12,"column_end":20},"name":"Vector3D","qualname":"::vector::Vector3D","value":"Vector3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262}],"decl_id":null,"docs":" A 3d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Vector tagged with a unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400264,"byte_end":400299,"line_start":807,"line_end":807,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400300,"byte_end":400310,"line_start":808,"line_end":808,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3259},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400403,"byte_end":400404,"line_start":811,"line_end":811,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector3D::x","value":"T","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400343,"byte_end":400394,"line_start":810,"line_end":810,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3260},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400471,"byte_end":400472,"line_start":813,"line_end":813,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector3D::y","value":"T","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400413,"byte_end":400462,"line_start":812,"line_end":812,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3261},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400536,"byte_end":400537,"line_start":815,"line_end":815,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::Vector3D::z","value":"T","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" The `z` (traditionally, depth) coordinate.\n","sig":null,"attributes":[{"value":"/ The `z` (traditionally, depth) coordinate.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400481,"byte_end":400527,"line_start":814,"line_end":814,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3262},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400569,"byte_end":400574,"line_start":817,"line_end":817,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3297},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402758,"byte_end":402762,"line_start":910,"line_end":910,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402684,"byte_end":402732,"line_start":908,"line_end":908,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402737,"byte_end":402746,"line_start":909,"line_end":909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3298},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402950,"byte_end":402953,"line_start":919,"line_end":919,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402872,"byte_end":402918,"line_start":917,"line_end":917,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402923,"byte_end":402932,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3299},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403191,"byte_end":403203,"line_start":930,"line_end":930,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403099,"byte_end":403165,"line_start":928,"line_end":928,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403170,"byte_end":403179,"line_start":929,"line_end":929,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3300},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403376,"byte_end":403388,"line_start":936,"line_end":936,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector3D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403314,"byte_end":403350,"line_start":934,"line_end":934,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403355,"byte_end":403364,"line_start":935,"line_end":935,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3301},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404080,"byte_end":404083,"line_start":961,"line_end":961,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector3D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403467,"byte_end":403530,"line_start":940,"line_end":940,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403535,"byte_end":403538,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403543,"byte_end":403556,"line_start":942,"line_end":942,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403561,"byte_end":403564,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403569,"byte_end":403580,"line_start":944,"line_end":944,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403585,"byte_end":403611,"line_start":945,"line_end":945,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403616,"byte_end":403639,"line_start":946,"line_end":946,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403644,"byte_end":403657,"line_start":947,"line_end":947,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403662,"byte_end":403665,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, U>(-1, 0, 2).abs(), vec3(1, 0, 2));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403670,"byte_end":403730,"line_start":949,"line_end":949,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403735,"byte_end":403738,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ let vec = vec3::<_, U>(f32::NAN, 0.0, -f32::MAX).abs();","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403743,"byte_end":403802,"line_start":951,"line_end":951,"column_start":5,"column_end":64}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403807,"byte_end":403835,"line_start":952,"line_end":952,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, 0.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403840,"byte_end":403867,"line_start":953,"line_end":953,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.z, f32::MAX);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403872,"byte_end":403904,"line_start":954,"line_end":954,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403909,"byte_end":403916,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403921,"byte_end":403924,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403929,"byte_end":403941,"line_start":957,"line_end":957,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403946,"byte_end":403949,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":403954,"byte_end":404033,"line_start":959,"line_end":959,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404038,"byte_end":404068,"line_start":960,"line_end":960,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3302},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404241,"byte_end":404244,"line_start":970,"line_end":970,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector3D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404199,"byte_end":404215,"line_start":968,"line_end":968,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404220,"byte_end":404229,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3306},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404485,"byte_end":404490,"line_start":981,"line_end":981,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector3D<T, U>>::cross","value":"pub fn cross(Self, Self) -> Self where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Cross product.\n","sig":null,"attributes":[{"value":"/ Cross product.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404441,"byte_end":404459,"line_start":979,"line_end":979,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404464,"byte_end":404473,"line_start":980,"line_end":980,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3307},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404886,"byte_end":404894,"line_start":996,"line_end":996,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector3D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404762,"byte_end":404796,"line_start":992,"line_end":992,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404801,"byte_end":404804,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404809,"byte_end":404860,"line_start":994,"line_end":994,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404865,"byte_end":404874,"line_start":995,"line_end":995,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3308},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405059,"byte_end":405061,"line_start":1002,"line_end":1002,"column_start":12,"column_end":14},"name":"xy","qualname":"<Vector3D<T, U>>::xy","value":"pub fn xy(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404970,"byte_end":405033,"line_start":1000,"line_end":1000,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405038,"byte_end":405047,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3309},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405217,"byte_end":405219,"line_start":1008,"line_end":1008,"column_start":12,"column_end":14},"name":"xz","qualname":"<Vector3D<T, U>>::xz","value":"pub fn xz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405128,"byte_end":405191,"line_start":1006,"line_end":1006,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405196,"byte_end":405205,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3310},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405375,"byte_end":405377,"line_start":1014,"line_end":1014,"column_start":12,"column_end":14},"name":"yz","qualname":"<Vector3D<T, U>>::yz","value":"pub fn yz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405286,"byte_end":405349,"line_start":1012,"line_end":1012,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405354,"byte_end":405363,"line_start":1013,"line_end":1013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3311},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405509,"byte_end":405517,"line_start":1020,"line_end":1020,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405444,"byte_end":405483,"line_start":1018,"line_end":1018,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405488,"byte_end":405497,"line_start":1019,"line_end":1019,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3313},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405648,"byte_end":405659,"line_start":1026,"line_end":1026,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Vector3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y, z and 0.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405580,"byte_end":405622,"line_start":1024,"line_end":1024,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405627,"byte_end":405636,"line_start":1025,"line_end":1025,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3315},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405831,"byte_end":405839,"line_start":1035,"line_end":1035,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405767,"byte_end":405805,"line_start":1033,"line_end":1033,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405810,"byte_end":405819,"line_start":1034,"line_end":1034,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405972,"byte_end":405983,"line_start":1041,"line_end":1041,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Vector3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y, z and 0.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405905,"byte_end":405946,"line_start":1039,"line_end":1039,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":405951,"byte_end":405960,"line_start":1040,"line_end":1040,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406177,"byte_end":406187,"line_start":1050,"line_end":1050,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406097,"byte_end":406151,"line_start":1048,"line_end":1048,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406156,"byte_end":406165,"line_start":1049,"line_end":1049,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406316,"byte_end":406325,"line_start":1056,"line_end":1056,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406272,"byte_end":406290,"line_start":1054,"line_end":1054,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406295,"byte_end":406304,"line_start":1055,"line_end":1055,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406458,"byte_end":406463,"line_start":1062,"line_end":1062,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Vector3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d vector.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406403,"byte_end":406432,"line_start":1060,"line_end":1060,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406437,"byte_end":406446,"line_start":1061,"line_end":1061,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406885,"byte_end":406890,"line_start":1078,"line_end":1078,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406519,"byte_end":406574,"line_start":1066,"line_end":1066,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406579,"byte_end":406582,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406587,"byte_end":406662,"line_start":1068,"line_end":1068,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406667,"byte_end":406670,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406675,"byte_end":406686,"line_start":1070,"line_end":1070,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406691,"byte_end":406714,"line_start":1071,"line_end":1071,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406719,"byte_end":406733,"line_start":1072,"line_end":1072,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406738,"byte_end":406741,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).round(), vec3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406746,"byte_end":406831,"line_start":1074,"line_end":1074,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406836,"byte_end":406843,"line_start":1075,"line_end":1075,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406848,"byte_end":406857,"line_start":1076,"line_end":1076,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":406862,"byte_end":406873,"line_start":1077,"line_end":1077,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407411,"byte_end":407415,"line_start":1097,"line_end":1097,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407011,"byte_end":407102,"line_start":1085,"line_end":1085,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407107,"byte_end":407110,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407115,"byte_end":407190,"line_start":1087,"line_end":1087,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407195,"byte_end":407198,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407203,"byte_end":407214,"line_start":1089,"line_end":1089,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407219,"byte_end":407242,"line_start":1090,"line_end":1090,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407247,"byte_end":407261,"line_start":1091,"line_end":1091,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407266,"byte_end":407269,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), vec3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407274,"byte_end":407357,"line_start":1093,"line_end":1093,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407362,"byte_end":407369,"line_start":1094,"line_end":1094,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407374,"byte_end":407383,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407388,"byte_end":407399,"line_start":1096,"line_end":1096,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3323},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407932,"byte_end":407937,"line_start":1116,"line_end":1116,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407532,"byte_end":407620,"line_start":1104,"line_end":1104,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407625,"byte_end":407628,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407633,"byte_end":407708,"line_start":1106,"line_end":1106,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407713,"byte_end":407716,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407721,"byte_end":407732,"line_start":1108,"line_end":1108,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407737,"byte_end":407760,"line_start":1109,"line_end":1109,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407765,"byte_end":407779,"line_start":1110,"line_end":1110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407784,"byte_end":407787,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).floor(), vec3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407792,"byte_end":407878,"line_start":1112,"line_end":1112,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407883,"byte_end":407890,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407895,"byte_end":407904,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":407909,"byte_end":407920,"line_start":1115,"line_end":1115,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3324},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408138,"byte_end":408150,"line_start":1125,"line_end":1125,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector3D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform3D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408058,"byte_end":408112,"line_start":1123,"line_end":1123,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408117,"byte_end":408126,"line_start":1124,"line_end":1124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3328},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408445,"byte_end":408458,"line_start":1139,"line_end":1139,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector3D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408379,"byte_end":408419,"line_start":1137,"line_end":1137,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408424,"byte_end":408433,"line_start":1138,"line_end":1138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408696,"byte_end":408715,"line_start":1147,"line_end":1147,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector3D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408543,"byte_end":408594,"line_start":1143,"line_end":1143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408599,"byte_end":408602,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408607,"byte_end":408670,"line_start":1145,"line_end":1145,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408675,"byte_end":408684,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409051,"byte_end":409059,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector3D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the positive angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the positive angle between this vector and another vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408913,"byte_end":408983,"line_start":1156,"line_end":1156,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408988,"byte_end":408991,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between 0 and PI.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408996,"byte_end":409039,"line_start":1158,"line_end":1158,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409312,"byte_end":409318,"line_start":1171,"line_end":1171,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector3D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409256,"byte_end":409286,"line_start":1169,"line_end":1169,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409291,"byte_end":409300,"line_start":1170,"line_end":1170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3335},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409467,"byte_end":409476,"line_start":1178,"line_end":1178,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector3D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409379,"byte_end":409425,"line_start":1175,"line_end":1175,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409430,"byte_end":409439,"line_start":1176,"line_end":1176,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409444,"byte_end":409455,"line_start":1177,"line_end":1177,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409766,"byte_end":409779,"line_start":1188,"line_end":1188,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector3D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409533,"byte_end":409580,"line_start":1182,"line_end":1182,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409585,"byte_end":409588,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409593,"byte_end":409686,"line_start":1184,"line_end":1184,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409691,"byte_end":409724,"line_start":1185,"line_end":1185,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409729,"byte_end":409738,"line_start":1186,"line_end":1186,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409743,"byte_end":409754,"line_start":1187,"line_end":1187,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410083,"byte_end":410099,"line_start":1200,"line_end":1200,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector3D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":409951,"byte_end":410041,"line_start":1197,"line_end":1197,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410046,"byte_end":410055,"line_start":1198,"line_end":1198,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410060,"byte_end":410071,"line_start":1199,"line_end":1199,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3338},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410411,"byte_end":410426,"line_start":1212,"line_end":1212,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector3D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410335,"byte_end":410385,"line_start":1210,"line_end":1210,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410390,"byte_end":410399,"line_start":1211,"line_end":1211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3339},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410738,"byte_end":410753,"line_start":1223,"line_end":1223,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector3D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410659,"byte_end":410712,"line_start":1221,"line_end":1221,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410717,"byte_end":410726,"line_start":1222,"line_end":1222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3340},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411076,"byte_end":411088,"line_start":1234,"line_end":1234,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector3D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":410986,"byte_end":411050,"line_start":1232,"line_end":1232,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411055,"byte_end":411064,"line_start":1233,"line_end":1233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412018,"byte_end":412022,"line_start":1262,"line_end":1262,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411331,"byte_end":411410,"line_start":1244,"line_end":1244,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411415,"byte_end":411418,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411423,"byte_end":411436,"line_start":1246,"line_end":1246,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411441,"byte_end":411444,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411449,"byte_end":411460,"line_start":1248,"line_end":1248,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec3;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411465,"byte_end":411486,"line_start":1249,"line_end":1249,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector3D;","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411491,"byte_end":411525,"line_start":1250,"line_end":1250,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411530,"byte_end":411533,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ let from: Vector3D<_> = vec3(0.0, 10.0, -1.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411538,"byte_end":411588,"line_start":1252,"line_end":1252,"column_start":5,"column_end":55}},{"value":"/ let to:  Vector3D<_> = vec3(8.0, -4.0,  0.0);","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411593,"byte_end":411642,"line_start":1253,"line_end":1253,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411647,"byte_end":411650,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411655,"byte_end":411716,"line_start":1255,"line_end":1255,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411721,"byte_end":411782,"line_start":1256,"line_end":1256,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411787,"byte_end":411848,"line_start":1257,"line_end":1257,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411853,"byte_end":411914,"line_start":1258,"line_end":1258,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec3(16.0, -18.0,  1.0));","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411919,"byte_end":411980,"line_start":1259,"line_end":1259,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411985,"byte_end":411992,"line_start":1260,"line_end":1260,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411997,"byte_end":412006,"line_start":1261,"line_end":1261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3345},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412237,"byte_end":412244,"line_start":1269,"line_end":1269,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector3D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412136,"byte_end":412211,"line_start":1267,"line_end":1267,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412216,"byte_end":412225,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3349},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412526,"byte_end":412529,"line_start":1278,"line_end":1278,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412414,"byte_end":412500,"line_start":1276,"line_end":1276,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412505,"byte_end":412514,"line_start":1277,"line_end":1277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3350},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412808,"byte_end":412811,"line_start":1288,"line_end":1288,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412696,"byte_end":412782,"line_start":1286,"line_end":1286,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412787,"byte_end":412796,"line_start":1287,"line_end":1287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3351},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413176,"byte_end":413181,"line_start":1301,"line_end":1301,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412978,"byte_end":413052,"line_start":1296,"line_end":1296,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413057,"byte_end":413093,"line_start":1297,"line_end":1297,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413098,"byte_end":413101,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413106,"byte_end":413150,"line_start":1299,"line_end":1299,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413155,"byte_end":413164,"line_start":1300,"line_end":1300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3352},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413401,"byte_end":413413,"line_start":1310,"line_end":1310,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413297,"byte_end":413375,"line_start":1308,"line_end":1308,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413380,"byte_end":413389,"line_start":1309,"line_end":1309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3353},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413696,"byte_end":413706,"line_start":1320,"line_end":1320,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413594,"byte_end":413670,"line_start":1318,"line_end":1318,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413675,"byte_end":413684,"line_start":1319,"line_end":1319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3357},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414025,"byte_end":414030,"line_start":1332,"line_end":1332,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413928,"byte_end":413999,"line_start":1330,"line_end":1330,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414004,"byte_end":414013,"line_start":1331,"line_end":1331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3358},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414315,"byte_end":414324,"line_start":1342,"line_end":1342,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414214,"byte_end":414289,"line_start":1340,"line_end":1340,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414294,"byte_end":414303,"line_start":1341,"line_end":1341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414935,"byte_end":414939,"line_start":1358,"line_end":1358,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414554,"byte_end":414628,"line_start":1352,"line_end":1352,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414633,"byte_end":414636,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414641,"byte_end":414729,"line_start":1354,"line_end":1354,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414734,"byte_end":414822,"line_start":1355,"line_end":1355,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414827,"byte_end":414909,"line_start":1356,"line_end":1356,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414914,"byte_end":414923,"line_start":1357,"line_end":1357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3364},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415404,"byte_end":415412,"line_start":1367,"line_end":1367,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415028,"byte_end":415111,"line_start":1362,"line_end":1362,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415116,"byte_end":415119,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415124,"byte_end":415212,"line_start":1364,"line_end":1364,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415217,"byte_end":415305,"line_start":1365,"line_end":1365,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415310,"byte_end":415392,"line_start":1366,"line_end":1366,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3366},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415810,"byte_end":415816,"line_start":1382,"line_end":1382,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415754,"byte_end":415784,"line_start":1380,"line_end":1380,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415789,"byte_end":415798,"line_start":1381,"line_end":1381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3367},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415932,"byte_end":415938,"line_start":1388,"line_end":1388,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415876,"byte_end":415906,"line_start":1386,"line_end":1386,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415911,"byte_end":415920,"line_start":1387,"line_end":1387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3368},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416295,"byte_end":416303,"line_start":1398,"line_end":1398,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":415998,"byte_end":416058,"line_start":1392,"line_end":1392,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416063,"byte_end":416066,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416071,"byte_end":416149,"line_start":1394,"line_end":1394,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416154,"byte_end":416228,"line_start":1395,"line_end":1395,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416233,"byte_end":416269,"line_start":1396,"line_end":1396,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416274,"byte_end":416283,"line_start":1397,"line_end":1397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3369},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416660,"byte_end":416666,"line_start":1408,"line_end":1408,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416365,"byte_end":416423,"line_start":1402,"line_end":1402,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416428,"byte_end":416431,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416436,"byte_end":416514,"line_start":1404,"line_end":1404,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416519,"byte_end":416593,"line_start":1405,"line_end":1405,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416598,"byte_end":416634,"line_start":1406,"line_end":1406,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416639,"byte_end":416648,"line_start":1407,"line_end":1407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3370},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417021,"byte_end":417027,"line_start":1418,"line_end":1418,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416726,"byte_end":416784,"line_start":1412,"line_end":1412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416789,"byte_end":416792,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416797,"byte_end":416875,"line_start":1414,"line_end":1414,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416880,"byte_end":416954,"line_start":1415,"line_end":1415,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":416959,"byte_end":416995,"line_start":1416,"line_end":1416,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417000,"byte_end":417009,"line_start":1417,"line_end":1417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417382,"byte_end":417388,"line_start":1428,"line_end":1428,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` vector, truncating decimals if any.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417087,"byte_end":417145,"line_start":1422,"line_end":1422,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417150,"byte_end":417153,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417158,"byte_end":417236,"line_start":1424,"line_end":1424,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417241,"byte_end":417315,"line_start":1425,"line_end":1425,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417320,"byte_end":417356,"line_start":1426,"line_end":1426,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417361,"byte_end":417370,"line_start":1427,"line_end":1427,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3718},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422000,"byte_end":422012,"line_start":1626,"line_end":1626,"column_start":12,"column_end":24},"name":"BoolVector2D","qualname":"::vector::BoolVector2D","value":"BoolVector2D { x, y }","parent":null,"children":[{"krate":0,"index":3719},{"krate":0,"index":3720}],"decl_id":null,"docs":" A 2d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 2d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421865,"byte_end":421937,"line_start":1624,"line_end":1624,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3719},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422023,"byte_end":422024,"line_start":1627,"line_end":1627,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector2D::x","value":"bool","parent":{"krate":0,"index":3718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3720},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422040,"byte_end":422041,"line_start":1628,"line_end":1628,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector2D::y","value":"bool","parent":{"krate":0,"index":3718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3736},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422187,"byte_end":422199,"line_start":1633,"line_end":1633,"column_start":12,"column_end":24},"name":"BoolVector3D","qualname":"::vector::BoolVector3D","value":"BoolVector3D { x, y, z }","parent":null,"children":[{"krate":0,"index":3737},{"krate":0,"index":3738},{"krate":0,"index":3739}],"decl_id":null,"docs":" A 3d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 3d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422052,"byte_end":422124,"line_start":1631,"line_end":1631,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3737},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422210,"byte_end":422211,"line_start":1634,"line_end":1634,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector3D::x","value":"bool","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3738},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422227,"byte_end":422228,"line_start":1635,"line_end":1635,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector3D::y","value":"bool","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3739},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422244,"byte_end":422245,"line_start":1636,"line_end":1636,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::BoolVector3D::z","value":"bool","parent":{"krate":0,"index":3736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422376,"byte_end":422379,"line_start":1642,"line_end":1642,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector2D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422280,"byte_end":422350,"line_start":1640,"line_end":1640,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422355,"byte_end":422364,"line_start":1641,"line_end":1641,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422527,"byte_end":422530,"line_start":1648,"line_end":1648,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector2D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422432,"byte_end":422501,"line_start":1646,"line_end":1646,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422506,"byte_end":422515,"line_start":1647,"line_end":1647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3473},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422701,"byte_end":422705,"line_start":1654,"line_end":1654,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector2D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422583,"byte_end":422675,"line_start":1652,"line_end":1652,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422680,"byte_end":422689,"line_start":1653,"line_end":1653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422842,"byte_end":422845,"line_start":1660,"line_end":1660,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector2D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422753,"byte_end":422816,"line_start":1658,"line_end":1658,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422821,"byte_end":422830,"line_start":1659,"line_end":1659,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3475},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423075,"byte_end":423077,"line_start":1669,"line_end":1669,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector2D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422987,"byte_end":423049,"line_start":1667,"line_end":1667,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423054,"byte_end":423063,"line_start":1668,"line_end":1668,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423321,"byte_end":423324,"line_start":1678,"line_end":1678,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector2D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423219,"byte_end":423295,"line_start":1676,"line_end":1676,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423300,"byte_end":423309,"line_start":1677,"line_end":1677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423646,"byte_end":423658,"line_start":1688,"line_end":1688,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector2D>::select_point","value":"pub fn select_point<T, U>(Self, Point2D<T, U>, Point2D<T, U>) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423433,"byte_end":423525,"line_start":1685,"line_end":1685,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423530,"byte_end":423620,"line_start":1686,"line_end":1686,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423625,"byte_end":423634,"line_start":1687,"line_end":1687,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424065,"byte_end":424078,"line_start":1698,"line_end":1698,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector2D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector2D<T, U>, Vector2D<T, U>)\n-> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423851,"byte_end":423944,"line_start":1695,"line_end":1695,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":423949,"byte_end":424039,"line_start":1696,"line_end":1696,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424044,"byte_end":424053,"line_start":1697,"line_end":1697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424484,"byte_end":424495,"line_start":1708,"line_end":1708,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector2D>::select_size","value":"pub fn select_size<T, U>(Self, Size2D<T, U>, Size2D<T, U>) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424272,"byte_end":424363,"line_start":1705,"line_end":1705,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424368,"byte_end":424458,"line_start":1706,"line_end":1706,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424463,"byte_end":424472,"line_start":1707,"line_end":1707,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3487},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424820,"byte_end":424823,"line_start":1719,"line_end":1719,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector3D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424724,"byte_end":424794,"line_start":1717,"line_end":1717,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424799,"byte_end":424808,"line_start":1718,"line_end":1718,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3488},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424981,"byte_end":424984,"line_start":1725,"line_end":1725,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector3D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424886,"byte_end":424955,"line_start":1723,"line_end":1723,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424960,"byte_end":424969,"line_start":1724,"line_end":1724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3489},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425165,"byte_end":425169,"line_start":1731,"line_end":1731,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector3D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425047,"byte_end":425139,"line_start":1729,"line_end":1729,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425144,"byte_end":425153,"line_start":1730,"line_end":1730,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425306,"byte_end":425309,"line_start":1737,"line_end":1737,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector3D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425217,"byte_end":425280,"line_start":1735,"line_end":1735,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425285,"byte_end":425294,"line_start":1736,"line_end":1736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3491},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425573,"byte_end":425575,"line_start":1747,"line_end":1747,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector3D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425485,"byte_end":425547,"line_start":1745,"line_end":1745,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425552,"byte_end":425561,"line_start":1746,"line_end":1746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425853,"byte_end":425856,"line_start":1757,"line_end":1757,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector3D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425751,"byte_end":425827,"line_start":1755,"line_end":1755,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425832,"byte_end":425841,"line_start":1756,"line_end":1756,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3493},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426202,"byte_end":426214,"line_start":1768,"line_end":1768,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector3D>::select_point","value":"pub fn select_point<T, U>(Self, Point3D<T, U>, Point3D<T, U>) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":425989,"byte_end":426081,"line_start":1765,"line_end":1765,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426086,"byte_end":426176,"line_start":1766,"line_end":1766,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426181,"byte_end":426190,"line_start":1767,"line_end":1767,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426665,"byte_end":426678,"line_start":1779,"line_end":1779,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector3D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector3D<T, U>, Vector3D<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426451,"byte_end":426544,"line_start":1776,"line_end":1776,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426549,"byte_end":426639,"line_start":1777,"line_end":1777,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426644,"byte_end":426653,"line_start":1778,"line_end":1778,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3499},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427144,"byte_end":427155,"line_start":1791,"line_end":1791,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector3D>::select_size","value":"pub fn select_size<T, U>(Self, Size3D<T, U>, Size3D<T, U>) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":426916,"byte_end":427007,"line_start":1787,"line_end":1787,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427012,"byte_end":427102,"line_start":1788,"line_end":1788,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427107,"byte_end":427116,"line_start":1789,"line_end":1789,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427121,"byte_end":427132,"line_start":1790,"line_end":1790,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3502},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427504,"byte_end":427506,"line_start":1801,"line_end":1801,"column_start":12,"column_end":14},"name":"xy","qualname":"<BoolVector3D>::xy","value":"pub fn xy(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427414,"byte_end":427478,"line_start":1799,"line_end":1799,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427483,"byte_end":427492,"line_start":1800,"line_end":1800,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3503},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427711,"byte_end":427713,"line_start":1810,"line_end":1810,"column_start":12,"column_end":14},"name":"xz","qualname":"<BoolVector3D>::xz","value":"pub fn xz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427621,"byte_end":427685,"line_start":1808,"line_end":1808,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427690,"byte_end":427699,"line_start":1809,"line_end":1809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3504},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427918,"byte_end":427920,"line_start":1819,"line_end":1819,"column_start":12,"column_end":14},"name":"yz","qualname":"<BoolVector3D>::yz","value":"pub fn yz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's y and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's y and z coordinates.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427828,"byte_end":427892,"line_start":1817,"line_end":1817,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":427897,"byte_end":427906,"line_start":1818,"line_end":1818,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":3505},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428079,"byte_end":428083,"line_start":1829,"line_end":1829,"column_start":8,"column_end":12},"name":"vec2","qualname":"::vector::vec2","value":"pub fn vec2<T, U>(T, T) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428033,"byte_end":428061,"line_start":1827,"line_end":1827,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428062,"byte_end":428071,"line_start":1828,"line_end":1828,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3508},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428242,"byte_end":428246,"line_start":1839,"line_end":1839,"column_start":8,"column_end":12},"name":"vec3","qualname":"::vector::vec3","value":"pub fn vec3<T, U>(T, T, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428196,"byte_end":428224,"line_start":1837,"line_end":1837,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428225,"byte_end":428234,"line_start":1838,"line_end":1838,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3511},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428436,"byte_end":428441,"line_start":1850,"line_end":1850,"column_start":8,"column_end":13},"name":"bvec2","qualname":"::vector::bvec2","value":"pub fn bvec2(bool, bool) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector2D { x, y }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector2D { x, y }`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428376,"byte_end":428418,"line_start":1848,"line_end":1848,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428419,"byte_end":428428,"line_start":1849,"line_end":1849,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3512},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428570,"byte_end":428575,"line_start":1856,"line_end":1856,"column_start":8,"column_end":13},"name":"bvec3","qualname":"::vector::bvec3","value":"pub fn bvec3(bool, bool, bool) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector3D { x, y, z }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector3D { x, y, z }`.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428507,"byte_end":428552,"line_start":1854,"line_end":1854,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":428553,"byte_end":428562,"line_start":1855,"line_end":1855,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3755},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3050,"byte_end":3061,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"UnknownUnit","qualname":"::UnknownUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default unit.\n","sig":null,"attributes":[{"value":"/ The default unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2940,"byte_end":2961,"line_start":87,"line_end":87,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":3513},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3072,"byte_end":3079,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"default","qualname":"::default","value":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":3514},{"krate":0,"index":4555},{"krate":0,"index":3515},{"krate":0,"index":3517},{"krate":0,"index":3519},{"krate":0,"index":3521},{"krate":0,"index":3523},{"krate":0,"index":3525},{"krate":0,"index":3527},{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3533},{"krate":0,"index":3535},{"krate":0,"index":3537},{"krate":0,"index":3539},{"krate":0,"index":3541},{"krate":0,"index":3543},{"krate":0,"index":3545},{"krate":0,"index":3547},{"krate":0,"index":3549},{"krate":0,"index":3551},{"krate":0,"index":3553}],"decl_id":null,"docs":" A set of aliases for all types, tagged with the default unknown unit.\n","sig":null,"attributes":[{"value":"/ A set of aliases for all types, tagged with the default unknown unit.","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3086,"byte_end":3159,"line_start":92,"line_end":92,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":3515},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3202,"byte_end":3208,"line_start":95,"line_end":95,"column_start":14,"column_end":20},"name":"Length","qualname":"::default::Length","value":"super::Length<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3517},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3258,"byte_end":3265,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"name":"Point2D","qualname":"::default::Point2D","value":"super::Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3519},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3316,"byte_end":3323,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"name":"Point3D","qualname":"::default::Point3D","value":"super::Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3521},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3374,"byte_end":3382,"line_start":98,"line_end":98,"column_start":14,"column_end":22},"name":"Vector2D","qualname":"::default::Vector2D","value":"super::Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3523},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3434,"byte_end":3442,"line_start":99,"line_end":99,"column_start":14,"column_end":22},"name":"Vector3D","qualname":"::default::Vector3D","value":"super::Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3525},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3494,"byte_end":3511,"line_start":100,"line_end":100,"column_start":14,"column_end":31},"name":"HomogeneousVector","qualname":"::default::HomogeneousVector","value":"super::HomogeneousVector<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3527},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3572,"byte_end":3578,"line_start":101,"line_end":101,"column_start":14,"column_end":20},"name":"Size2D","qualname":"::default::Size2D","value":"super::Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3529},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3628,"byte_end":3634,"line_start":102,"line_end":102,"column_start":14,"column_end":20},"name":"Size3D","qualname":"::default::Size3D","value":"super::Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3531},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3684,"byte_end":3688,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"Rect","qualname":"::default::Rect","value":"super::Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3533},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3736,"byte_end":3741,"line_start":104,"line_end":104,"column_start":14,"column_end":19},"name":"Box2D","qualname":"::default::Box2D","value":"super::Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3535},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3790,"byte_end":3795,"line_start":105,"line_end":105,"column_start":14,"column_end":19},"name":"Box3D","qualname":"::default::Box3D","value":"super::Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3537},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3844,"byte_end":3857,"line_start":106,"line_end":106,"column_start":14,"column_end":27},"name":"SideOffsets2D","qualname":"::default::SideOffsets2D","value":"super::SideOffsets2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3539},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3914,"byte_end":3925,"line_start":107,"line_end":107,"column_start":14,"column_end":25},"name":"Transform2D","qualname":"::default::Transform2D","value":"super::Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3541},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":3993,"byte_end":4004,"line_start":108,"line_end":108,"column_start":14,"column_end":25},"name":"Transform3D","qualname":"::default::Transform3D","value":"super::Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3543},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4072,"byte_end":4082,"line_start":109,"line_end":109,"column_start":14,"column_end":24},"name":"Rotation2D","qualname":"::default::Rotation2D","value":"super::Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3545},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4149,"byte_end":4159,"line_start":110,"line_end":110,"column_start":14,"column_end":24},"name":"Rotation3D","qualname":"::default::Rotation3D","value":"super::Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3547},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4226,"byte_end":4239,"line_start":111,"line_end":111,"column_start":14,"column_end":27},"name":"Translation2D","qualname":"::default::Translation2D","value":"super::Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3549},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4309,"byte_end":4322,"line_start":112,"line_end":112,"column_start":14,"column_end":27},"name":"Translation3D","qualname":"::default::Translation3D","value":"super::Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3551},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4392,"byte_end":4397,"line_start":113,"line_end":113,"column_start":14,"column_end":19},"name":"Scale","qualname":"::default::Scale","value":"super::Scale<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3553},"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":4459,"byte_end":4475,"line_start":114,"line_end":114,"column_start":14,"column_end":30},"name":"RigidTransform3D","qualname":"::default::RigidTransform3D","value":"super::RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6586,"byte_end":6591,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6765,"byte_end":6770,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7038,"byte_end":7043,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7582,"byte_end":7587,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8272,"byte_end":8277,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8428,"byte_end":8433,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8537,"byte_end":8542,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8982,"byte_end":8987,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9702,"byte_end":9707,"line_start":176,"line_end":176,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9887,"byte_end":9892,"line_start":183,"line_end":183,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10040,"byte_end":10045,"line_start":189,"line_end":189,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10238,"byte_end":10243,"line_start":196,"line_end":196,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10391,"byte_end":10396,"line_start":202,"line_end":202,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10563,"byte_end":10568,"line_start":210,"line_end":210,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10752,"byte_end":10757,"line_start":218,"line_end":218,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10885,"byte_end":10890,"line_start":224,"line_end":224,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11074,"byte_end":11079,"line_start":232,"line_end":232,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11201,"byte_end":11206,"line_start":238,"line_end":238,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11347,"byte_end":11352,"line_start":245,"line_end":245,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18757,"byte_end":18762,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18901,"byte_end":18906,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18945,"byte_end":18950,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19088,"byte_end":19093,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19233,"byte_end":19238,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19287,"byte_end":19292,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19493,"byte_end":19498,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19660,"byte_end":19665,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21377,"byte_end":21382,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22824,"byte_end":22829,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23114,"byte_end":23119,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23601,"byte_end":23606,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24821,"byte_end":24826,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26082,"byte_end":26087,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26400,"byte_end":26405,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26626,"byte_end":26631,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26830,"byte_end":26835,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27035,"byte_end":27040,"line_start":376,"line_end":376,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27258,"byte_end":27263,"line_start":385,"line_end":385,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27406,"byte_end":27411,"line_start":392,"line_end":392,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27629,"byte_end":27634,"line_start":401,"line_end":401,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27797,"byte_end":27802,"line_start":408,"line_end":408,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28050,"byte_end":28055,"line_start":417,"line_end":417,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28249,"byte_end":28254,"line_start":425,"line_end":425,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28502,"byte_end":28507,"line_start":434,"line_end":434,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28658,"byte_end":28663,"line_start":442,"line_end":442,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29545,"byte_end":29550,"line_start":476,"line_end":476,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32389,"byte_end":32394,"line_start":554,"line_end":554,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33069,"byte_end":33074,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33736,"byte_end":33741,"line_start":596,"line_end":596,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42137,"byte_end":42142,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42281,"byte_end":42286,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42325,"byte_end":42330,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42468,"byte_end":42473,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42613,"byte_end":42618,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42667,"byte_end":42672,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42873,"byte_end":42878,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43040,"byte_end":43045,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45071,"byte_end":45076,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46522,"byte_end":46527,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46830,"byte_end":46835,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47354,"byte_end":47359,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47825,"byte_end":47830,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49271,"byte_end":49276,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49593,"byte_end":49598,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49819,"byte_end":49824,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50394,"byte_end":50399,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50599,"byte_end":50604,"line_start":369,"line_end":369,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50822,"byte_end":50827,"line_start":378,"line_end":378,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50988,"byte_end":50993,"line_start":386,"line_end":386,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51219,"byte_end":51224,"line_start":395,"line_end":395,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51405,"byte_end":51410,"line_start":403,"line_end":403,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51666,"byte_end":51671,"line_start":412,"line_end":412,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51873,"byte_end":51878,"line_start":420,"line_end":420,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52134,"byte_end":52139,"line_start":429,"line_end":429,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52298,"byte_end":52303,"line_start":437,"line_end":437,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53311,"byte_end":53316,"line_start":477,"line_end":477,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56175,"byte_end":56180,"line_start":555,"line_end":555,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56859,"byte_end":56864,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57532,"byte_end":57537,"line_start":599,"line_end":599,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67772,"byte_end":67789,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67828,"byte_end":67845,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":68881,"byte_end":68898,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":68946,"byte_end":68963,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69155,"byte_end":69172,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69371,"byte_end":69388,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69714,"byte_end":69731,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70536,"byte_end":70553,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70731,"byte_end":70748,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70925,"byte_end":70942,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":71116,"byte_end":71133,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":71299,"byte_end":71316,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74035,"byte_end":74041,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74159,"byte_end":74165,"line_start":49,"line_end":49,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74733,"byte_end":74739,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74907,"byte_end":74913,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75982,"byte_end":75988,"line_start":123,"line_end":123,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76335,"byte_end":76341,"line_start":137,"line_end":137,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76793,"byte_end":76799,"line_start":150,"line_end":150,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76930,"byte_end":76936,"line_start":156,"line_end":156,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77061,"byte_end":77067,"line_start":163,"line_end":163,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77195,"byte_end":77201,"line_start":170,"line_end":170,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77402,"byte_end":77408,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77540,"byte_end":77546,"line_start":186,"line_end":186,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77755,"byte_end":77761,"line_start":195,"line_end":195,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77939,"byte_end":77945,"line_start":202,"line_end":202,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78242,"byte_end":78248,"line_start":213,"line_end":213,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78470,"byte_end":78476,"line_start":223,"line_end":223,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78705,"byte_end":78711,"line_start":233,"line_end":233,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78860,"byte_end":78866,"line_start":241,"line_end":241,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79095,"byte_end":79101,"line_start":251,"line_end":251,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79279,"byte_end":79285,"line_start":259,"line_end":259,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79537,"byte_end":79543,"line_start":269,"line_end":269,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79755,"byte_end":79761,"line_start":279,"line_end":279,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79934,"byte_end":79940,"line_start":288,"line_end":288,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80065,"byte_end":80071,"line_start":294,"line_end":294,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80210,"byte_end":80216,"line_start":300,"line_end":300,"column_start":23,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80251,"byte_end":80257,"line_start":302,"line_end":302,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80376,"byte_end":80382,"line_start":308,"line_end":308,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80512,"byte_end":80518,"line_start":315,"line_end":315,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":88994,"byte_end":88995,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89135,"byte_end":89136,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92350,"byte_end":92357,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92396,"byte_end":92403,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93283,"byte_end":93290,"line_start":81,"line_end":81,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93338,"byte_end":93345,"line_start":83,"line_end":83,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93495,"byte_end":93502,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93716,"byte_end":93723,"line_start":104,"line_end":104,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93897,"byte_end":93904,"line_start":110,"line_end":110,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94021,"byte_end":94028,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94925,"byte_end":94932,"line_start":158,"line_end":158,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99994,"byte_end":100001,"line_start":358,"line_end":358,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100602,"byte_end":100609,"line_start":382,"line_end":382,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103443,"byte_end":103450,"line_start":460,"line_end":460,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103639,"byte_end":103646,"line_start":467,"line_end":467,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103783,"byte_end":103790,"line_start":474,"line_end":474,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103970,"byte_end":103977,"line_start":483,"line_end":483,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104217,"byte_end":104224,"line_start":492,"line_end":492,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104411,"byte_end":104418,"line_start":500,"line_end":500,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104669,"byte_end":104676,"line_start":509,"line_end":509,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104816,"byte_end":104823,"line_start":516,"line_end":516,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105033,"byte_end":105040,"line_start":525,"line_end":525,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105280,"byte_end":105287,"line_start":534,"line_end":534,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105474,"byte_end":105481,"line_start":542,"line_end":542,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105732,"byte_end":105739,"line_start":551,"line_end":551,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105889,"byte_end":105896,"line_start":558,"line_end":558,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106117,"byte_end":106124,"line_start":567,"line_end":567,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106281,"byte_end":106288,"line_start":574,"line_end":574,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106534,"byte_end":106541,"line_start":583,"line_end":583,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106715,"byte_end":106722,"line_start":591,"line_end":591,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106943,"byte_end":106950,"line_start":600,"line_end":600,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107107,"byte_end":107114,"line_start":607,"line_end":607,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107360,"byte_end":107367,"line_start":616,"line_end":616,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107533,"byte_end":107540,"line_start":624,"line_end":624,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107647,"byte_end":107654,"line_start":631,"line_end":631,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107808,"byte_end":107815,"line_start":639,"line_end":639,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107967,"byte_end":107974,"line_start":647,"line_end":647,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108154,"byte_end":108161,"line_start":655,"line_end":655,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108486,"byte_end":108493,"line_start":667,"line_end":667,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108594,"byte_end":108601,"line_start":673,"line_end":673,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108706,"byte_end":108713,"line_start":679,"line_end":679,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108814,"byte_end":108821,"line_start":685,"line_end":685,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109142,"byte_end":109149,"line_start":703,"line_end":703,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109188,"byte_end":109195,"line_start":705,"line_end":705,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110133,"byte_end":110140,"line_start":748,"line_end":748,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110188,"byte_end":110195,"line_start":750,"line_end":750,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110366,"byte_end":110373,"line_start":759,"line_end":759,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110575,"byte_end":110582,"line_start":770,"line_end":770,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110823,"byte_end":110830,"line_start":780,"line_end":780,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110967,"byte_end":110974,"line_start":786,"line_end":786,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111933,"byte_end":111940,"line_start":829,"line_end":829,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117531,"byte_end":117538,"line_start":1044,"line_end":1044,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118277,"byte_end":118284,"line_start":1076,"line_end":1076,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121204,"byte_end":121211,"line_start":1158,"line_end":1158,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121468,"byte_end":121475,"line_start":1169,"line_end":1169,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121612,"byte_end":121619,"line_start":1176,"line_end":1176,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121808,"byte_end":121815,"line_start":1185,"line_end":1185,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122124,"byte_end":122131,"line_start":1198,"line_end":1198,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122349,"byte_end":122356,"line_start":1207,"line_end":1207,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122625,"byte_end":122632,"line_start":1216,"line_end":1216,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122772,"byte_end":122779,"line_start":1223,"line_end":1223,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123007,"byte_end":123014,"line_start":1232,"line_end":1232,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123323,"byte_end":123330,"line_start":1245,"line_end":1245,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123548,"byte_end":123555,"line_start":1254,"line_end":1254,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123824,"byte_end":123831,"line_start":1263,"line_end":1263,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123981,"byte_end":123988,"line_start":1270,"line_end":1270,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1183},{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124263,"byte_end":124270,"line_start":1283,"line_end":1283,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124472,"byte_end":124479,"line_start":1292,"line_end":1292,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124790,"byte_end":124797,"line_start":1305,"line_end":1305,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124943,"byte_end":124950,"line_start":1312,"line_end":1312,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125225,"byte_end":125232,"line_start":1325,"line_end":1325,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125434,"byte_end":125441,"line_start":1334,"line_end":1334,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125752,"byte_end":125759,"line_start":1347,"line_end":1347,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125897,"byte_end":125904,"line_start":1354,"line_end":1354,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126011,"byte_end":126018,"line_start":1361,"line_end":1361,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126172,"byte_end":126179,"line_start":1369,"line_end":1369,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126331,"byte_end":126338,"line_start":1377,"line_end":1377,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126518,"byte_end":126525,"line_start":1385,"line_end":1385,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126984,"byte_end":126991,"line_start":1403,"line_end":1403,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127100,"byte_end":127107,"line_start":1409,"line_end":1409,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127221,"byte_end":127228,"line_start":1415,"line_end":1415,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127343,"byte_end":127350,"line_start":1421,"line_end":1421,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142687,"byte_end":142691,"line_start":57,"line_end":57,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142834,"byte_end":142838,"line_start":64,"line_end":64,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142877,"byte_end":142881,"line_start":66,"line_end":66,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143023,"byte_end":143027,"line_start":72,"line_end":72,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143175,"byte_end":143179,"line_start":78,"line_end":78,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143228,"byte_end":143232,"line_start":80,"line_end":80,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143505,"byte_end":143509,"line_start":90,"line_end":90,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143623,"byte_end":143627,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143795,"byte_end":143799,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144200,"byte_end":144204,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145472,"byte_end":145476,"line_start":194,"line_end":194,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145995,"byte_end":145999,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146355,"byte_end":146359,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146779,"byte_end":146783,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147353,"byte_end":147357,"line_start":262,"line_end":262,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148204,"byte_end":148208,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148826,"byte_end":148830,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149643,"byte_end":149647,"line_start":326,"line_end":326,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150015,"byte_end":150019,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150242,"byte_end":150246,"line_start":350,"line_end":350,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150630,"byte_end":150634,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150972,"byte_end":150976,"line_start":380,"line_end":380,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151100,"byte_end":151104,"line_start":387,"line_end":387,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151239,"byte_end":151243,"line_start":394,"line_end":394,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151443,"byte_end":151447,"line_start":405,"line_end":405,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151667,"byte_end":151671,"line_start":414,"line_end":414,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151814,"byte_end":151818,"line_start":421,"line_end":421,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152046,"byte_end":152050,"line_start":430,"line_end":430,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152213,"byte_end":152217,"line_start":437,"line_end":437,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152475,"byte_end":152479,"line_start":446,"line_end":446,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152685,"byte_end":152689,"line_start":454,"line_end":454,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152947,"byte_end":152951,"line_start":463,"line_end":463,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153120,"byte_end":153124,"line_start":471,"line_end":471,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153765,"byte_end":153769,"line_start":494,"line_end":494,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157113,"byte_end":157117,"line_start":582,"line_end":582,"column_start":76,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159179,"byte_end":159183,"line_start":633,"line_end":633,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169706,"byte_end":169722,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170035,"byte_end":170051,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170333,"byte_end":170349,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174735,"byte_end":174751,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174927,"byte_end":174943,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178832,"byte_end":178842,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178895,"byte_end":178905,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179087,"byte_end":179097,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179159,"byte_end":179169,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179320,"byte_end":179330,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179475,"byte_end":179485,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180036,"byte_end":180046,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181691,"byte_end":181701,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181906,"byte_end":181916,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183315,"byte_end":183325,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184745,"byte_end":184755,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184808,"byte_end":184818,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185085,"byte_end":185095,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185157,"byte_end":185167,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185373,"byte_end":185383,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185596,"byte_end":185606,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186477,"byte_end":186487,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189034,"byte_end":189044,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":198682,"byte_end":198692,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":198947,"byte_end":198957,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209557,"byte_end":209562,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214224,"byte_end":214229,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216115,"byte_end":216120,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216343,"byte_end":216348,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216583,"byte_end":216588,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1777},{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216946,"byte_end":216951,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217086,"byte_end":217091,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217154,"byte_end":217159,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217314,"byte_end":217319,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217454,"byte_end":217459,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217596,"byte_end":217601,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217664,"byte_end":217669,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217814,"byte_end":217819,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217936,"byte_end":217941,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1821}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":218071,"byte_end":218076,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1827}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220618,"byte_end":220631,"line_start":42,"line_end":42,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220670,"byte_end":220683,"line_start":44,"line_end":44,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220967,"byte_end":220980,"line_start":56,"line_end":56,"column_start":19,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221028,"byte_end":221041,"line_start":58,"line_end":58,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1867}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221297,"byte_end":221310,"line_start":70,"line_end":70,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221550,"byte_end":221563,"line_start":82,"line_end":82,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221807,"byte_end":221820,"line_start":92,"line_end":92,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222096,"byte_end":222109,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225187,"byte_end":225200,"line_start":211,"line_end":211,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1897},{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225535,"byte_end":225548,"line_start":226,"line_end":226,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225883,"byte_end":225896,"line_start":240,"line_end":240,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1907}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226137,"byte_end":226150,"line_start":250,"line_end":250,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226523,"byte_end":226536,"line_start":264,"line_end":264,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226682,"byte_end":226695,"line_start":271,"line_end":271,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227030,"byte_end":227043,"line_start":285,"line_end":285,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227284,"byte_end":227297,"line_start":295,"line_end":295,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1931},{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227670,"byte_end":227683,"line_start":309,"line_end":309,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232104,"byte_end":232110,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232149,"byte_end":232155,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1984}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233194,"byte_end":233200,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233248,"byte_end":233254,"line_start":87,"line_end":87,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233422,"byte_end":233428,"line_start":96,"line_end":96,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1995}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233615,"byte_end":233621,"line_start":106,"line_end":106,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2000}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233838,"byte_end":233844,"line_start":114,"line_end":114,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233960,"byte_end":233966,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234837,"byte_end":234843,"line_start":154,"line_end":154,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2015},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238210,"byte_end":238216,"line_start":277,"line_end":277,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241384,"byte_end":241390,"line_start":365,"line_end":365,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241983,"byte_end":241989,"line_start":381,"line_end":381,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243661,"byte_end":243667,"line_start":434,"line_end":434,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244226,"byte_end":244232,"line_start":452,"line_end":452,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2063}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244388,"byte_end":244394,"line_start":460,"line_end":460,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2067}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244548,"byte_end":244554,"line_start":468,"line_end":468,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244710,"byte_end":244716,"line_start":476,"line_end":476,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244844,"byte_end":244850,"line_start":483,"line_end":483,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245029,"byte_end":245035,"line_start":492,"line_end":492,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245266,"byte_end":245272,"line_start":501,"line_end":501,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245444,"byte_end":245450,"line_start":509,"line_end":509,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245681,"byte_end":245687,"line_start":518,"line_end":518,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245869,"byte_end":245875,"line_start":526,"line_end":526,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246100,"byte_end":246106,"line_start":535,"line_end":535,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246292,"byte_end":246298,"line_start":543,"line_end":543,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246557,"byte_end":246563,"line_start":552,"line_end":552,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2117}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246709,"byte_end":246715,"line_start":559,"line_end":559,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2121},{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246940,"byte_end":246946,"line_start":568,"line_end":568,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247132,"byte_end":247138,"line_start":576,"line_end":576,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247397,"byte_end":247403,"line_start":585,"line_end":585,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248161,"byte_end":248167,"line_start":620,"line_end":620,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2143}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248292,"byte_end":248298,"line_start":627,"line_end":627,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248422,"byte_end":248428,"line_start":634,"line_end":634,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248546,"byte_end":248552,"line_start":641,"line_end":641,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248676,"byte_end":248682,"line_start":648,"line_end":648,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2163}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254823,"byte_end":254829,"line_start":869,"line_end":869,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254868,"byte_end":254874,"line_start":871,"line_end":871,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2177}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":255873,"byte_end":255879,"line_start":914,"line_end":914,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":255927,"byte_end":255933,"line_start":916,"line_end":916,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256130,"byte_end":256136,"line_start":925,"line_end":925,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256351,"byte_end":256357,"line_start":936,"line_end":936,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2193}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256641,"byte_end":256647,"line_start":946,"line_end":946,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256783,"byte_end":256789,"line_start":952,"line_end":952,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257729,"byte_end":257735,"line_start":987,"line_end":987,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261323,"byte_end":261329,"line_start":1110,"line_end":1110,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264229,"byte_end":264235,"line_start":1192,"line_end":1192,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2236},{"krate":0,"index":2237}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264873,"byte_end":264879,"line_start":1208,"line_end":1208,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266701,"byte_end":266707,"line_start":1269,"line_end":1269,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267350,"byte_end":267356,"line_start":1289,"line_end":1289,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2255}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267512,"byte_end":267518,"line_start":1297,"line_end":1297,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267672,"byte_end":267678,"line_start":1305,"line_end":1305,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2263}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267834,"byte_end":267840,"line_start":1313,"line_end":1313,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267982,"byte_end":267988,"line_start":1320,"line_end":1320,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2271},{"krate":0,"index":2272}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268180,"byte_end":268186,"line_start":1329,"line_end":1329,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268490,"byte_end":268496,"line_start":1342,"line_end":1342,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268703,"byte_end":268709,"line_start":1351,"line_end":1351,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2285},{"krate":0,"index":2286}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269013,"byte_end":269019,"line_start":1364,"line_end":1364,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2290}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269236,"byte_end":269242,"line_start":1373,"line_end":1373,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269534,"byte_end":269540,"line_start":1386,"line_end":1386,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2299}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269755,"byte_end":269761,"line_start":1395,"line_end":1395,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2304},{"krate":0,"index":2305}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270089,"byte_end":270095,"line_start":1408,"line_end":1408,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270241,"byte_end":270247,"line_start":1415,"line_end":1415,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2314}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270539,"byte_end":270545,"line_start":1428,"line_end":1428,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2318}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270760,"byte_end":270766,"line_start":1437,"line_end":1437,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2323},{"krate":0,"index":2324}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271094,"byte_end":271100,"line_start":1450,"line_end":1450,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271677,"byte_end":271683,"line_start":1476,"line_end":1476,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271813,"byte_end":271819,"line_start":1483,"line_end":1483,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2337}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271955,"byte_end":271961,"line_start":1490,"line_end":1490,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2343}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272088,"byte_end":272094,"line_start":1497,"line_end":1497,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272236,"byte_end":272242,"line_start":1504,"line_end":1504,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2352}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280828,"byte_end":280839,"line_start":72,"line_end":72,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280892,"byte_end":280903,"line_start":74,"line_end":74,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281257,"byte_end":281268,"line_start":88,"line_end":88,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281330,"byte_end":281341,"line_start":90,"line_end":90,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2415}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281672,"byte_end":281683,"line_start":103,"line_end":103,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281956,"byte_end":281967,"line_start":117,"line_end":117,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283632,"byte_end":283643,"line_start":167,"line_end":167,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2433},{"krate":0,"index":2435},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2449},{"krate":0,"index":2451}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287391,"byte_end":287402,"line_start":291,"line_end":291,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2456},{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288321,"byte_end":288332,"line_start":317,"line_end":317,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288966,"byte_end":288977,"line_start":346,"line_end":346,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2470}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289764,"byte_end":289775,"line_start":368,"line_end":368,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2479},{"krate":0,"index":2480}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290877,"byte_end":290888,"line_start":413,"line_end":413,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291856,"byte_end":291867,"line_start":446,"line_end":446,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2495}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292959,"byte_end":292970,"line_start":494,"line_end":494,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294794,"byte_end":294805,"line_start":553,"line_end":553,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295940,"byte_end":295951,"line_start":592,"line_end":592,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":296159,"byte_end":296170,"line_start":601,"line_end":601,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":296756,"byte_end":296767,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304719,"byte_end":304730,"line_start":73,"line_end":73,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304783,"byte_end":304794,"line_start":75,"line_end":75,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":305498,"byte_end":305509,"line_start":99,"line_end":99,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":305571,"byte_end":305582,"line_start":101,"line_end":101,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306283,"byte_end":306294,"line_start":124,"line_end":124,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2609}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306827,"byte_end":306838,"line_start":148,"line_end":148,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309246,"byte_end":309257,"line_start":229,"line_end":229,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2636},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314702,"byte_end":314713,"line_start":381,"line_end":381,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316552,"byte_end":316563,"line_start":456,"line_end":456,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318831,"byte_end":318842,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2668},{"krate":0,"index":2671},{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":320012,"byte_end":320023,"line_start":536,"line_end":536,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321699,"byte_end":321710,"line_start":592,"line_end":592,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2684},{"krate":0,"index":2687},{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323059,"byte_end":323070,"line_start":642,"line_end":642,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2701}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":328758,"byte_end":328769,"line_start":782,"line_end":782,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336319,"byte_end":336330,"line_start":953,"line_end":953,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2717}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":337876,"byte_end":337887,"line_start":994,"line_end":994,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2722},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339386,"byte_end":339397,"line_start":1025,"line_end":1025,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2730},{"krate":0,"index":2731}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340365,"byte_end":340376,"line_start":1050,"line_end":1050,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":341310,"byte_end":341321,"line_start":1066,"line_end":1066,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2742}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":341515,"byte_end":341526,"line_start":1075,"line_end":1075,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354483,"byte_end":354496,"line_start":58,"line_end":58,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354549,"byte_end":354562,"line_start":60,"line_end":60,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354770,"byte_end":354783,"line_start":70,"line_end":70,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354845,"byte_end":354858,"line_start":72,"line_end":72,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2803}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355022,"byte_end":355035,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2808}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355200,"byte_end":355213,"line_start":91,"line_end":91,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2814},{"krate":0,"index":2815},{"krate":0,"index":2816},{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356373,"byte_end":356386,"line_start":136,"line_end":136,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358611,"byte_end":358624,"line_start":227,"line_end":227,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2838},{"krate":0,"index":2839}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358912,"byte_end":358925,"line_start":235,"line_end":235,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2844}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359138,"byte_end":359151,"line_start":242,"line_end":242,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2850},{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359439,"byte_end":359452,"line_start":250,"line_end":250,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359642,"byte_end":359655,"line_start":257,"line_end":257,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2861}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359805,"byte_end":359818,"line_start":263,"line_end":263,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359965,"byte_end":359978,"line_start":269,"line_end":269,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2871}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360155,"byte_end":360168,"line_start":278,"line_end":278,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2876}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360309,"byte_end":360322,"line_start":287,"line_end":287,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2881}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360862,"byte_end":360875,"line_start":306,"line_end":306,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360928,"byte_end":360941,"line_start":308,"line_end":308,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":361945,"byte_end":361958,"line_start":351,"line_end":351,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362020,"byte_end":362033,"line_start":353,"line_end":353,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362218,"byte_end":362231,"line_start":362,"line_end":362,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2912}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362420,"byte_end":362433,"line_start":373,"line_end":373,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2921}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363732,"byte_end":363745,"line_start":420,"line_end":420,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366601,"byte_end":366614,"line_start":534,"line_end":534,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2944},{"krate":0,"index":2945}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366920,"byte_end":366933,"line_start":542,"line_end":542,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367173,"byte_end":367186,"line_start":550,"line_end":550,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2956},{"krate":0,"index":2957}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367492,"byte_end":367505,"line_start":558,"line_end":558,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2962}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367722,"byte_end":367735,"line_start":566,"line_end":566,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2967}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367890,"byte_end":367903,"line_start":572,"line_end":572,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368058,"byte_end":368071,"line_start":578,"line_end":578,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2977}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368256,"byte_end":368269,"line_start":587,"line_end":587,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368410,"byte_end":368423,"line_start":596,"line_end":596,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2987}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380055,"byte_end":380063,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380102,"byte_end":380110,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3052}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380998,"byte_end":381006,"line_start":89,"line_end":89,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381053,"byte_end":381061,"line_start":91,"line_end":91,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3059}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381193,"byte_end":381201,"line_start":97,"line_end":97,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381348,"byte_end":381356,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381553,"byte_end":381561,"line_start":112,"line_end":112,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381735,"byte_end":381743,"line_start":118,"line_end":118,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381861,"byte_end":381869,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3080},{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":3085},{"krate":0,"index":3086},{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383990,"byte_end":383998,"line_start":210,"line_end":210,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3091},{"krate":0,"index":3092},{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3098},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387513,"byte_end":387521,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3112}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388407,"byte_end":388415,"line_start":385,"line_end":385,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390404,"byte_end":390412,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3126},{"krate":0,"index":3127}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391524,"byte_end":391532,"line_start":492,"line_end":492,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392834,"byte_end":392842,"line_start":536,"line_end":536,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3139},{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393392,"byte_end":393400,"line_start":556,"line_end":556,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396252,"byte_end":396260,"line_start":634,"line_end":634,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3157},{"krate":0,"index":3158}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396425,"byte_end":396433,"line_start":643,"line_end":643,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3162},{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396666,"byte_end":396674,"line_start":652,"line_end":652,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3167}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396804,"byte_end":396812,"line_start":659,"line_end":659,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3171},{"krate":0,"index":3172}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397052,"byte_end":397060,"line_start":668,"line_end":668,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3176}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397200,"byte_end":397208,"line_start":675,"line_end":675,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3180},{"krate":0,"index":3181}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397428,"byte_end":397436,"line_start":684,"line_end":684,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3185}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397593,"byte_end":397601,"line_start":691,"line_end":691,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3190},{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397846,"byte_end":397854,"line_start":700,"line_end":700,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398028,"byte_end":398036,"line_start":708,"line_end":708,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3199},{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398256,"byte_end":398264,"line_start":717,"line_end":717,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398421,"byte_end":398429,"line_start":724,"line_end":724,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3209},{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398674,"byte_end":398682,"line_start":733,"line_end":733,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398850,"byte_end":398858,"line_start":741,"line_end":741,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3218}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399015,"byte_end":399023,"line_start":749,"line_end":749,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3222}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399178,"byte_end":399186,"line_start":757,"line_end":757,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3226}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399370,"byte_end":399378,"line_start":765,"line_end":765,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3230},{"krate":0,"index":3231}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399701,"byte_end":399709,"line_start":777,"line_end":777,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3236}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399810,"byte_end":399818,"line_start":783,"line_end":783,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3242}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399921,"byte_end":399929,"line_start":789,"line_end":789,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400030,"byte_end":400038,"line_start":795,"line_end":795,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400158,"byte_end":400166,"line_start":801,"line_end":801,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3255}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400662,"byte_end":400670,"line_start":822,"line_end":822,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400709,"byte_end":400717,"line_start":824,"line_end":824,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3269}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401663,"byte_end":401671,"line_start":867,"line_end":867,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401718,"byte_end":401726,"line_start":869,"line_end":869,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3276}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401879,"byte_end":401887,"line_start":875,"line_end":875,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3280}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402058,"byte_end":402066,"line_start":883,"line_end":883,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3285}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402268,"byte_end":402276,"line_start":891,"line_end":891,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3289}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402517,"byte_end":402525,"line_start":901,"line_end":901,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3293}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402663,"byte_end":402671,"line_start":907,"line_end":907,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3297},{"krate":0,"index":3298},{"krate":0,"index":3299},{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404420,"byte_end":404428,"line_start":978,"line_end":978,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3313},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408297,"byte_end":408305,"line_start":1133,"line_end":1133,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3328},{"krate":0,"index":3329}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408892,"byte_end":408900,"line_start":1155,"line_end":1155,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3337},{"krate":0,"index":3338},{"krate":0,"index":3339},{"krate":0,"index":3340}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411231,"byte_end":411239,"line_start":1240,"line_end":1240,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3344},{"krate":0,"index":3345}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412393,"byte_end":412401,"line_start":1275,"line_end":1275,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3349},{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413907,"byte_end":413915,"line_start":1329,"line_end":1329,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3357},{"krate":0,"index":3358}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414533,"byte_end":414541,"line_start":1351,"line_end":1351,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3362},{"krate":0,"index":3364},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417470,"byte_end":417478,"line_start":1433,"line_end":1433,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3375},{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417652,"byte_end":417660,"line_start":1442,"line_end":1442,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3380},{"krate":0,"index":3381}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417902,"byte_end":417910,"line_start":1451,"line_end":1451,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3385}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418040,"byte_end":418048,"line_start":1458,"line_end":1458,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3389},{"krate":0,"index":3390}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418306,"byte_end":418314,"line_start":1467,"line_end":1467,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3394}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418454,"byte_end":418462,"line_start":1474,"line_end":1474,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3398},{"krate":0,"index":3399}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418745,"byte_end":418753,"line_start":1487,"line_end":1487,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3403}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418910,"byte_end":418918,"line_start":1494,"line_end":1494,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3408},{"krate":0,"index":3409}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419228,"byte_end":419236,"line_start":1507,"line_end":1507,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3413}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419437,"byte_end":419445,"line_start":1516,"line_end":1516,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3417},{"krate":0,"index":3418}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419728,"byte_end":419736,"line_start":1529,"line_end":1529,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3422}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419893,"byte_end":419901,"line_start":1536,"line_end":1536,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3427},{"krate":0,"index":3428}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420211,"byte_end":420219,"line_start":1549,"line_end":1549,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3432}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420414,"byte_end":420422,"line_start":1558,"line_end":1558,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420579,"byte_end":420587,"line_start":1566,"line_end":1566,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3440}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420742,"byte_end":420750,"line_start":1574,"line_end":1574,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3444}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420934,"byte_end":420942,"line_start":1582,"line_end":1582,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3448},{"krate":0,"index":3449}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421399,"byte_end":421407,"line_start":1600,"line_end":1600,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421516,"byte_end":421524,"line_start":1606,"line_end":1606,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3460}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421636,"byte_end":421644,"line_start":1612,"line_end":1612,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3465}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421759,"byte_end":421767,"line_start":1618,"line_end":1618,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3469}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422261,"byte_end":422273,"line_start":1639,"line_end":1639,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3476},{"krate":0,"index":3477},{"krate":0,"index":3480},{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Inherent","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424705,"byte_end":424717,"line_start":1716,"line_end":1716,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3487},{"krate":0,"index":3488},{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491},{"krate":0,"index":3492},{"krate":0,"index":3493},{"krate":0,"index":3496},{"krate":0,"index":3499},{"krate":0,"index":3502},{"krate":0,"index":3503},{"krate":0,"index":3504}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2692,"byte_end":2700,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":150}},{"kind":"Mod","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2710,"byte_end":2719,"line_start":68,"line_end":68,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":157}},{"kind":"Mod","span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/lib.rs","byte_start":2776,"byte_end":2779,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":778}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6586,"byte_end":6591,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":6765,"byte_end":6770,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7038,"byte_end":7043,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":7582,"byte_end":7587,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8272,"byte_end":8277,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8428,"byte_end":8433,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8537,"byte_end":8542,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":8982,"byte_end":8987,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9702,"byte_end":9707,"line_start":176,"line_end":176,"column_start":37,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":9887,"byte_end":9892,"line_start":183,"line_end":183,"column_start":37,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10040,"byte_end":10045,"line_start":189,"line_end":189,"column_start":47,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10238,"byte_end":10243,"line_start":196,"line_end":196,"column_start":37,"column_end":42},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10391,"byte_end":10396,"line_start":202,"line_end":202,"column_start":47,"column_end":52},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10563,"byte_end":10568,"line_start":210,"line_end":210,"column_start":40,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10752,"byte_end":10757,"line_start":218,"line_end":218,"column_start":40,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":10885,"byte_end":10890,"line_start":224,"line_end":224,"column_start":40,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11074,"byte_end":11079,"line_start":232,"line_end":232,"column_start":40,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11201,"byte_end":11206,"line_start":238,"line_end":238,"column_start":34,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3555},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/angle.rs","byte_start":11347,"byte_end":11352,"line_start":245,"line_end":245,"column_start":38,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3555},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18757,"byte_end":18762,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18901,"byte_end":18906,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":18945,"byte_end":18950,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19088,"byte_end":19093,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19233,"byte_end":19238,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19287,"byte_end":19292,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19493,"byte_end":19498,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":19660,"byte_end":19665,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":21377,"byte_end":21382,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":22824,"byte_end":22829,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23114,"byte_end":23119,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":23601,"byte_end":23606,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":24821,"byte_end":24826,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26082,"byte_end":26087,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26400,"byte_end":26405,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26626,"byte_end":26631,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":26830,"byte_end":26835,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27035,"byte_end":27040,"line_start":376,"line_end":376,"column_start":35,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27258,"byte_end":27263,"line_start":385,"line_end":385,"column_start":47,"column_end":52},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27406,"byte_end":27411,"line_start":392,"line_end":392,"column_start":35,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27629,"byte_end":27634,"line_start":401,"line_end":401,"column_start":47,"column_end":52},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":27797,"byte_end":27802,"line_start":408,"line_end":408,"column_start":55,"column_end":60},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28050,"byte_end":28055,"line_start":417,"line_end":417,"column_start":60,"column_end":65},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28249,"byte_end":28254,"line_start":425,"line_end":425,"column_start":55,"column_end":60},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28502,"byte_end":28507,"line_start":434,"line_end":434,"column_start":60,"column_end":65},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":28658,"byte_end":28663,"line_start":442,"line_end":442,"column_start":12,"column_end":17},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":29545,"byte_end":29550,"line_start":476,"line_end":476,"column_start":28,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":32389,"byte_end":32394,"line_start":554,"line_end":554,"column_start":12,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33069,"byte_end":33074,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box2d.rs","byte_start":33736,"byte_end":33741,"line_start":596,"line_end":596,"column_start":35,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":192},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42137,"byte_end":42142,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42281,"byte_end":42286,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42325,"byte_end":42330,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42468,"byte_end":42473,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42613,"byte_end":42618,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42667,"byte_end":42672,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":42873,"byte_end":42878,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":43040,"byte_end":43045,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":45071,"byte_end":45076,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46522,"byte_end":46527,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":46830,"byte_end":46835,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47354,"byte_end":47359,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":47825,"byte_end":47830,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49271,"byte_end":49276,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49593,"byte_end":49598,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":49819,"byte_end":49824,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50394,"byte_end":50399,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50599,"byte_end":50604,"line_start":369,"line_end":369,"column_start":35,"column_end":40},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50822,"byte_end":50827,"line_start":378,"line_end":378,"column_start":47,"column_end":52},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":50988,"byte_end":50993,"line_start":386,"line_end":386,"column_start":35,"column_end":40},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51219,"byte_end":51224,"line_start":395,"line_end":395,"column_start":47,"column_end":52},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51405,"byte_end":51410,"line_start":403,"line_end":403,"column_start":55,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51666,"byte_end":51671,"line_start":412,"line_end":412,"column_start":60,"column_end":65},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":51873,"byte_end":51878,"line_start":420,"line_end":420,"column_start":55,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52134,"byte_end":52139,"line_start":429,"line_end":429,"column_start":60,"column_end":65},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":52298,"byte_end":52303,"line_start":437,"line_end":437,"column_start":12,"column_end":17},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":53311,"byte_end":53316,"line_start":477,"line_end":477,"column_start":28,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56175,"byte_end":56180,"line_start":555,"line_end":555,"column_start":12,"column_end":17},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":56859,"byte_end":56864,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/box3d.rs","byte_start":57532,"byte_end":57537,"line_start":599,"line_end":599,"column_start":35,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67772,"byte_end":67789,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":67828,"byte_end":67845,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":68881,"byte_end":68898,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":68946,"byte_end":68963,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69155,"byte_end":69172,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69371,"byte_end":69388,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":69714,"byte_end":69731,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70536,"byte_end":70553,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70731,"byte_end":70748,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":70925,"byte_end":70942,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":71116,"byte_end":71133,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/homogen.rs","byte_start":71299,"byte_end":71316,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74035,"byte_end":74041,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74159,"byte_end":74165,"line_start":49,"line_end":49,"column_start":27,"column_end":33},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74733,"byte_end":74739,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":74907,"byte_end":74913,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":75982,"byte_end":75988,"line_start":123,"line_end":123,"column_start":24,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76335,"byte_end":76341,"line_start":137,"line_end":137,"column_start":29,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76793,"byte_end":76799,"line_start":150,"line_end":150,"column_start":39,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":76930,"byte_end":76936,"line_start":156,"line_end":156,"column_start":33,"column_end":39},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77061,"byte_end":77067,"line_start":163,"line_end":163,"column_start":27,"column_end":33},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77195,"byte_end":77201,"line_start":170,"line_end":170,"column_start":25,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77402,"byte_end":77408,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77540,"byte_end":77546,"line_start":186,"line_end":186,"column_start":25,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77755,"byte_end":77761,"line_start":195,"line_end":195,"column_start":37,"column_end":43},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":77939,"byte_end":77945,"line_start":202,"line_end":202,"column_start":39,"column_end":45},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":641},"to":{"krate":4,"index":431}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78242,"byte_end":78248,"line_start":213,"line_end":213,"column_start":48,"column_end":54},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78470,"byte_end":78476,"line_start":223,"line_end":223,"column_start":28,"column_end":34},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78705,"byte_end":78711,"line_start":233,"line_end":233,"column_start":56,"column_end":62},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":78860,"byte_end":78866,"line_start":241,"line_end":241,"column_start":28,"column_end":34},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79095,"byte_end":79101,"line_start":251,"line_end":251,"column_start":56,"column_end":62},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79279,"byte_end":79285,"line_start":259,"line_end":259,"column_start":52,"column_end":58},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79537,"byte_end":79543,"line_start":269,"line_end":269,"column_start":52,"column_end":58},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79755,"byte_end":79761,"line_start":279,"line_end":279,"column_start":25,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":79934,"byte_end":79940,"line_start":288,"line_end":288,"column_start":37,"column_end":43},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80065,"byte_end":80071,"line_start":294,"line_end":294,"column_start":39,"column_end":45},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1734}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80210,"byte_end":80216,"line_start":300,"line_end":300,"column_start":23,"column_end":29},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80251,"byte_end":80257,"line_start":302,"line_end":302,"column_start":25,"column_end":31},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":1723}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80376,"byte_end":80382,"line_start":308,"line_end":308,"column_start":27,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":641},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/length.rs","byte_start":80512,"byte_end":80518,"line_start":315,"line_end":315,"column_start":41,"column_end":47},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":641},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":88994,"byte_end":88995,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":783},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89135,"byte_end":89136,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":788},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89277,"byte_end":89281,"line_start":49,"line_end":49,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89552,"byte_end":89556,"line_start":57,"line_end":57,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/num.rs","byte_start":89862,"byte_end":89866,"line_start":65,"line_end":65,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92350,"byte_end":92357,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":92396,"byte_end":92403,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93283,"byte_end":93290,"line_start":81,"line_end":81,"column_start":19,"column_end":26},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93338,"byte_end":93345,"line_start":83,"line_end":83,"column_start":26,"column_end":33},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93495,"byte_end":93502,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93716,"byte_end":93723,"line_start":104,"line_end":104,"column_start":39,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":93897,"byte_end":93904,"line_start":110,"line_end":110,"column_start":33,"column_end":40},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94021,"byte_end":94028,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":94925,"byte_end":94932,"line_start":158,"line_end":158,"column_start":18,"column_end":25},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":99994,"byte_end":100001,"line_start":358,"line_end":358,"column_start":24,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":100602,"byte_end":100609,"line_start":382,"line_end":382,"column_start":28,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103443,"byte_end":103450,"line_start":460,"line_end":460,"column_start":39,"column_end":46},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103639,"byte_end":103646,"line_start":467,"line_end":467,"column_start":40,"column_end":47},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103783,"byte_end":103790,"line_start":474,"line_end":474,"column_start":25,"column_end":32},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":103970,"byte_end":103977,"line_start":483,"line_end":483,"column_start":39,"column_end":46},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104217,"byte_end":104224,"line_start":492,"line_end":492,"column_start":51,"column_end":58},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104411,"byte_end":104418,"line_start":500,"line_end":500,"column_start":41,"column_end":48},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104669,"byte_end":104676,"line_start":509,"line_end":509,"column_start":69,"column_end":76},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":104816,"byte_end":104823,"line_start":516,"line_end":516,"column_start":25,"column_end":32},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105033,"byte_end":105040,"line_start":525,"line_end":525,"column_start":39,"column_end":46},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105280,"byte_end":105287,"line_start":534,"line_end":534,"column_start":51,"column_end":58},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105474,"byte_end":105481,"line_start":542,"line_end":542,"column_start":41,"column_end":48},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105732,"byte_end":105739,"line_start":551,"line_end":551,"column_start":69,"column_end":76},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":105889,"byte_end":105896,"line_start":558,"line_end":558,"column_start":35,"column_end":42},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106117,"byte_end":106124,"line_start":567,"line_end":567,"column_start":56,"column_end":63},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106281,"byte_end":106288,"line_start":574,"line_end":574,"column_start":55,"column_end":62},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106534,"byte_end":106541,"line_start":583,"line_end":583,"column_start":60,"column_end":67},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106715,"byte_end":106722,"line_start":591,"line_end":591,"column_start":35,"column_end":42},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":106943,"byte_end":106950,"line_start":600,"line_end":600,"column_start":56,"column_end":63},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107107,"byte_end":107114,"line_start":607,"line_end":607,"column_start":55,"column_end":62},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107360,"byte_end":107367,"line_start":616,"line_end":616,"column_start":60,"column_end":67},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107533,"byte_end":107540,"line_start":624,"line_end":624,"column_start":27,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107647,"byte_end":107654,"line_start":631,"line_end":631,"column_start":29,"column_end":36},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107808,"byte_end":107815,"line_start":639,"line_end":639,"column_start":27,"column_end":34},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":107967,"byte_end":107974,"line_start":647,"line_end":647,"column_start":29,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108154,"byte_end":108161,"line_start":655,"line_end":655,"column_start":53,"column_end":60},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108486,"byte_end":108493,"line_start":667,"line_end":667,"column_start":29,"column_end":36},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108594,"byte_end":108601,"line_start":673,"line_end":673,"column_start":29,"column_end":36},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108706,"byte_end":108713,"line_start":679,"line_end":679,"column_start":29,"column_end":36},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":108814,"byte_end":108821,"line_start":685,"line_end":685,"column_start":29,"column_end":36},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109142,"byte_end":109149,"line_start":703,"line_end":703,"column_start":27,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":109188,"byte_end":109195,"line_start":705,"line_end":705,"column_start":29,"column_end":36},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110133,"byte_end":110140,"line_start":748,"line_end":748,"column_start":19,"column_end":26},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110188,"byte_end":110195,"line_start":750,"line_end":750,"column_start":26,"column_end":33},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110366,"byte_end":110373,"line_start":759,"line_end":759,"column_start":21,"column_end":28},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110575,"byte_end":110582,"line_start":770,"line_end":770,"column_start":39,"column_end":46},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110823,"byte_end":110830,"line_start":780,"line_end":780,"column_start":33,"column_end":40},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":110967,"byte_end":110974,"line_start":786,"line_end":786,"column_start":12,"column_end":19},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":111933,"byte_end":111940,"line_start":829,"line_end":829,"column_start":18,"column_end":25},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":117531,"byte_end":117538,"line_start":1044,"line_end":1044,"column_start":24,"column_end":31},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":118277,"byte_end":118284,"line_start":1076,"line_end":1076,"column_start":28,"column_end":35},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121204,"byte_end":121211,"line_start":1158,"line_end":1158,"column_start":39,"column_end":46},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121468,"byte_end":121475,"line_start":1169,"line_end":1169,"column_start":40,"column_end":47},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121612,"byte_end":121619,"line_start":1176,"line_end":1176,"column_start":25,"column_end":32},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":121808,"byte_end":121815,"line_start":1185,"line_end":1185,"column_start":39,"column_end":46},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122124,"byte_end":122131,"line_start":1198,"line_end":1198,"column_start":51,"column_end":58},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122349,"byte_end":122356,"line_start":1207,"line_end":1207,"column_start":41,"column_end":48},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122625,"byte_end":122632,"line_start":1216,"line_end":1216,"column_start":69,"column_end":76},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":122772,"byte_end":122779,"line_start":1223,"line_end":1223,"column_start":25,"column_end":32},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123007,"byte_end":123014,"line_start":1232,"line_end":1232,"column_start":39,"column_end":46},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123323,"byte_end":123330,"line_start":1245,"line_end":1245,"column_start":51,"column_end":58},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123548,"byte_end":123555,"line_start":1254,"line_end":1254,"column_start":41,"column_end":48},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123824,"byte_end":123831,"line_start":1263,"line_end":1263,"column_start":69,"column_end":76},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":123981,"byte_end":123988,"line_start":1270,"line_end":1270,"column_start":35,"column_end":42},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124263,"byte_end":124270,"line_start":1283,"line_end":1283,"column_start":47,"column_end":54},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124472,"byte_end":124479,"line_start":1292,"line_end":1292,"column_start":55,"column_end":62},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124790,"byte_end":124797,"line_start":1305,"line_end":1305,"column_start":60,"column_end":67},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":124943,"byte_end":124950,"line_start":1312,"line_end":1312,"column_start":35,"column_end":42},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125225,"byte_end":125232,"line_start":1325,"line_end":1325,"column_start":47,"column_end":54},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125434,"byte_end":125441,"line_start":1334,"line_end":1334,"column_start":55,"column_end":62},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125752,"byte_end":125759,"line_start":1347,"line_end":1347,"column_start":60,"column_end":67},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":125897,"byte_end":125904,"line_start":1354,"line_end":1354,"column_start":27,"column_end":34},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1044},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126011,"byte_end":126018,"line_start":1361,"line_end":1361,"column_start":29,"column_end":36},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1044},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126172,"byte_end":126179,"line_start":1369,"line_end":1369,"column_start":27,"column_end":34},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1044},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126331,"byte_end":126338,"line_start":1377,"line_end":1377,"column_start":29,"column_end":36},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1044},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126518,"byte_end":126525,"line_start":1385,"line_end":1385,"column_start":53,"column_end":60},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1044},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":126984,"byte_end":126991,"line_start":1403,"line_end":1403,"column_start":29,"column_end":36},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127100,"byte_end":127107,"line_start":1409,"line_end":1409,"column_start":29,"column_end":36},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127221,"byte_end":127228,"line_start":1415,"line_end":1415,"column_start":32,"column_end":39},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/point.rs","byte_start":127343,"byte_end":127350,"line_start":1421,"line_end":1421,"column_start":32,"column_end":39},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142687,"byte_end":142691,"line_start":57,"line_end":57,"column_start":27,"column_end":31},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142834,"byte_end":142838,"line_start":64,"line_end":64,"column_start":27,"column_end":31},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":142877,"byte_end":142881,"line_start":66,"line_end":66,"column_start":29,"column_end":33},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143023,"byte_end":143027,"line_start":72,"line_end":72,"column_start":37,"column_end":41},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143175,"byte_end":143179,"line_start":78,"line_end":78,"column_start":23,"column_end":27},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143228,"byte_end":143232,"line_start":80,"line_end":80,"column_start":39,"column_end":43},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143505,"byte_end":143509,"line_start":90,"line_end":90,"column_start":33,"column_end":37},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143623,"byte_end":143627,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":143795,"byte_end":143799,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":144200,"byte_end":144204,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145472,"byte_end":145476,"line_start":194,"line_end":194,"column_start":12,"column_end":16},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":145995,"byte_end":145999,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146355,"byte_end":146359,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":146779,"byte_end":146783,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":147353,"byte_end":147357,"line_start":262,"line_end":262,"column_start":12,"column_end":16},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148204,"byte_end":148208,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":148826,"byte_end":148830,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":149643,"byte_end":149647,"line_start":326,"line_end":326,"column_start":12,"column_end":16},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150015,"byte_end":150019,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150242,"byte_end":150246,"line_start":350,"line_end":350,"column_start":12,"column_end":16},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150630,"byte_end":150634,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":150972,"byte_end":150976,"line_start":380,"line_end":380,"column_start":39,"column_end":43},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151100,"byte_end":151104,"line_start":387,"line_end":387,"column_start":38,"column_end":42},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151239,"byte_end":151243,"line_start":394,"line_end":394,"column_start":38,"column_end":42},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151443,"byte_end":151447,"line_start":405,"line_end":405,"column_start":35,"column_end":39},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151667,"byte_end":151671,"line_start":414,"line_end":414,"column_start":47,"column_end":51},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":151814,"byte_end":151818,"line_start":421,"line_end":421,"column_start":35,"column_end":39},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152046,"byte_end":152050,"line_start":430,"line_end":430,"column_start":47,"column_end":51},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152213,"byte_end":152217,"line_start":437,"line_end":437,"column_start":55,"column_end":59},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152475,"byte_end":152479,"line_start":446,"line_end":446,"column_start":60,"column_end":64},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152685,"byte_end":152689,"line_start":454,"line_end":454,"column_start":55,"column_end":59},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":152947,"byte_end":152951,"line_start":463,"line_end":463,"column_start":60,"column_end":64},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153120,"byte_end":153124,"line_start":471,"line_end":471,"column_start":18,"column_end":22},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":153765,"byte_end":153769,"line_start":494,"line_end":494,"column_start":28,"column_end":32},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":157113,"byte_end":157117,"line_start":582,"line_end":582,"column_start":76,"column_end":80},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rect.rs","byte_start":159179,"byte_end":159183,"line_start":633,"line_end":633,"column_start":35,"column_end":39},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1289},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":169706,"byte_end":169722,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":3657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170035,"byte_end":170051,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":170333,"byte_end":170349,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":3657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174735,"byte_end":174751,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":3657},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rigid.rs","byte_start":174927,"byte_end":174943,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":3657},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178832,"byte_end":178842,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":178895,"byte_end":178905,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179087,"byte_end":179097,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179159,"byte_end":179169,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179320,"byte_end":179330,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":179475,"byte_end":179485,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":180036,"byte_end":180046,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181691,"byte_end":181701,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":181906,"byte_end":181916,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":183315,"byte_end":183325,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184745,"byte_end":184755,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":184808,"byte_end":184818,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185085,"byte_end":185095,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185157,"byte_end":185167,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185373,"byte_end":185383,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":185596,"byte_end":185606,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":1620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":186477,"byte_end":186487,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":1620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":189034,"byte_end":189044,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":1620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":198682,"byte_end":198692,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":1620},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/rotation.rs","byte_start":198947,"byte_end":198957,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":1620},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":209557,"byte_end":209562,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":1729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":214224,"byte_end":214229,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":1729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216115,"byte_end":216120,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216343,"byte_end":216348,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216583,"byte_end":216588,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":216946,"byte_end":216951,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217086,"byte_end":217091,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217154,"byte_end":217159,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1734}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217314,"byte_end":217319,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1723}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217454,"byte_end":217459,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217596,"byte_end":217601,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217664,"byte_end":217669,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217814,"byte_end":217819,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":217936,"byte_end":217941,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1729},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/scale.rs","byte_start":218071,"byte_end":218076,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":1729},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220618,"byte_end":220631,"line_start":42,"line_end":42,"column_start":27,"column_end":40},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220670,"byte_end":220683,"line_start":44,"line_end":44,"column_start":29,"column_end":42},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":220967,"byte_end":220980,"line_start":56,"line_end":56,"column_start":19,"column_end":32},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221028,"byte_end":221041,"line_start":58,"line_end":58,"column_start":26,"column_end":39},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221297,"byte_end":221310,"line_start":70,"line_end":70,"column_start":21,"column_end":34},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221550,"byte_end":221563,"line_start":82,"line_end":82,"column_start":39,"column_end":52},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":221807,"byte_end":221820,"line_start":92,"line_end":92,"column_start":33,"column_end":46},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":222096,"byte_end":222109,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":1846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225187,"byte_end":225200,"line_start":211,"line_end":211,"column_start":20,"column_end":33},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225535,"byte_end":225548,"line_start":226,"line_end":226,"column_start":35,"column_end":48},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":225883,"byte_end":225896,"line_start":240,"line_end":240,"column_start":47,"column_end":60},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226137,"byte_end":226150,"line_start":250,"line_end":250,"column_start":55,"column_end":68},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226523,"byte_end":226536,"line_start":264,"line_end":264,"column_start":60,"column_end":73},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":226682,"byte_end":226695,"line_start":271,"line_end":271,"column_start":35,"column_end":48},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227030,"byte_end":227043,"line_start":285,"line_end":285,"column_start":47,"column_end":60},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227284,"byte_end":227297,"line_start":295,"line_end":295,"column_start":55,"column_end":68},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/side_offsets.rs","byte_start":227670,"byte_end":227683,"line_start":309,"line_end":309,"column_start":60,"column_end":73},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232104,"byte_end":232110,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":232149,"byte_end":232155,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233194,"byte_end":233200,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233248,"byte_end":233254,"line_start":87,"line_end":87,"column_start":26,"column_end":32},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233422,"byte_end":233428,"line_start":96,"line_end":96,"column_start":21,"column_end":27},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233615,"byte_end":233621,"line_start":106,"line_end":106,"column_start":39,"column_end":45},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233838,"byte_end":233844,"line_start":114,"line_end":114,"column_start":33,"column_end":39},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":233960,"byte_end":233966,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":234837,"byte_end":234843,"line_start":154,"line_end":154,"column_start":18,"column_end":24},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":238210,"byte_end":238216,"line_start":277,"line_end":277,"column_start":28,"column_end":34},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241384,"byte_end":241390,"line_start":365,"line_end":365,"column_start":20,"column_end":26},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":241983,"byte_end":241989,"line_start":381,"line_end":381,"column_start":24,"column_end":30},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":243661,"byte_end":243667,"line_start":434,"line_end":434,"column_start":23,"column_end":29},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":1972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244226,"byte_end":244232,"line_start":452,"line_end":452,"column_start":29,"column_end":35},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":1972},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244388,"byte_end":244394,"line_start":460,"line_end":460,"column_start":27,"column_end":33},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":1972},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244548,"byte_end":244554,"line_start":468,"line_end":468,"column_start":29,"column_end":35},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":1972},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244710,"byte_end":244716,"line_start":476,"line_end":476,"column_start":27,"column_end":33},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":1972},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":244844,"byte_end":244850,"line_start":483,"line_end":483,"column_start":25,"column_end":31},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245029,"byte_end":245035,"line_start":492,"line_end":492,"column_start":25,"column_end":31},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245266,"byte_end":245272,"line_start":501,"line_end":501,"column_start":37,"column_end":43},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245444,"byte_end":245450,"line_start":509,"line_end":509,"column_start":25,"column_end":31},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245681,"byte_end":245687,"line_start":518,"line_end":518,"column_start":37,"column_end":43},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":245869,"byte_end":245875,"line_start":526,"line_end":526,"column_start":35,"column_end":41},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246100,"byte_end":246106,"line_start":535,"line_end":535,"column_start":47,"column_end":53},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246292,"byte_end":246298,"line_start":543,"line_end":543,"column_start":55,"column_end":61},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246557,"byte_end":246563,"line_start":552,"line_end":552,"column_start":60,"column_end":66},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246709,"byte_end":246715,"line_start":559,"line_end":559,"column_start":35,"column_end":41},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":246940,"byte_end":246946,"line_start":568,"line_end":568,"column_start":47,"column_end":53},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247132,"byte_end":247138,"line_start":576,"line_end":576,"column_start":55,"column_end":61},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":247397,"byte_end":247403,"line_start":585,"line_end":585,"column_start":60,"column_end":66},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248161,"byte_end":248167,"line_start":620,"line_end":620,"column_start":37,"column_end":43},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248292,"byte_end":248298,"line_start":627,"line_end":627,"column_start":29,"column_end":35},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248422,"byte_end":248428,"line_start":634,"line_end":634,"column_start":29,"column_end":35},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248546,"byte_end":248552,"line_start":641,"line_end":641,"column_start":29,"column_end":35},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":248676,"byte_end":248682,"line_start":648,"line_end":648,"column_start":29,"column_end":35},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":1972},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254823,"byte_end":254829,"line_start":869,"line_end":869,"column_start":27,"column_end":33},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":254868,"byte_end":254874,"line_start":871,"line_end":871,"column_start":29,"column_end":35},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":255873,"byte_end":255879,"line_start":914,"line_end":914,"column_start":19,"column_end":25},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":255927,"byte_end":255933,"line_start":916,"line_end":916,"column_start":26,"column_end":32},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256130,"byte_end":256136,"line_start":925,"line_end":925,"column_start":21,"column_end":27},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256351,"byte_end":256357,"line_start":936,"line_end":936,"column_start":39,"column_end":45},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256641,"byte_end":256647,"line_start":946,"line_end":946,"column_start":33,"column_end":39},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":256783,"byte_end":256789,"line_start":952,"line_end":952,"column_start":12,"column_end":18},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":257729,"byte_end":257735,"line_start":987,"line_end":987,"column_start":18,"column_end":24},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":261323,"byte_end":261329,"line_start":1110,"line_end":1110,"column_start":28,"column_end":34},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264229,"byte_end":264235,"line_start":1192,"line_end":1192,"column_start":20,"column_end":26},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":264873,"byte_end":264879,"line_start":1208,"line_end":1208,"column_start":24,"column_end":30},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":266701,"byte_end":266707,"line_start":1269,"line_end":1269,"column_start":23,"column_end":29},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267350,"byte_end":267356,"line_start":1289,"line_end":1289,"column_start":29,"column_end":35},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267512,"byte_end":267518,"line_start":1297,"line_end":1297,"column_start":27,"column_end":33},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267672,"byte_end":267678,"line_start":1305,"line_end":1305,"column_start":29,"column_end":35},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267834,"byte_end":267840,"line_start":1313,"line_end":1313,"column_start":27,"column_end":33},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":267982,"byte_end":267988,"line_start":1320,"line_end":1320,"column_start":25,"column_end":31},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268180,"byte_end":268186,"line_start":1329,"line_end":1329,"column_start":25,"column_end":31},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268490,"byte_end":268496,"line_start":1342,"line_end":1342,"column_start":37,"column_end":43},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":268703,"byte_end":268709,"line_start":1351,"line_end":1351,"column_start":25,"column_end":31},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269013,"byte_end":269019,"line_start":1364,"line_end":1364,"column_start":37,"column_end":43},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269236,"byte_end":269242,"line_start":1373,"line_end":1373,"column_start":35,"column_end":41},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269534,"byte_end":269540,"line_start":1386,"line_end":1386,"column_start":47,"column_end":53},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":269755,"byte_end":269761,"line_start":1395,"line_end":1395,"column_start":55,"column_end":61},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270089,"byte_end":270095,"line_start":1408,"line_end":1408,"column_start":60,"column_end":66},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270241,"byte_end":270247,"line_start":1415,"line_end":1415,"column_start":35,"column_end":41},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270539,"byte_end":270545,"line_start":1428,"line_end":1428,"column_start":47,"column_end":53},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":270760,"byte_end":270766,"line_start":1437,"line_end":1437,"column_start":55,"column_end":61},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271094,"byte_end":271100,"line_start":1450,"line_end":1450,"column_start":60,"column_end":66},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271677,"byte_end":271683,"line_start":1476,"line_end":1476,"column_start":37,"column_end":43},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271813,"byte_end":271819,"line_start":1483,"line_end":1483,"column_start":29,"column_end":35},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":271955,"byte_end":271961,"line_start":1490,"line_end":1490,"column_start":29,"column_end":35},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272088,"byte_end":272094,"line_start":1497,"line_end":1497,"column_start":32,"column_end":38},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/size.rs","byte_start":272236,"byte_end":272242,"line_start":1504,"line_end":1504,"column_start":32,"column_end":38},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2164},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280828,"byte_end":280839,"line_start":72,"line_end":72,"column_start":34,"column_end":45},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":280892,"byte_end":280903,"line_start":74,"line_end":74,"column_start":36,"column_end":47},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281257,"byte_end":281268,"line_start":88,"line_end":88,"column_start":26,"column_end":37},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281330,"byte_end":281341,"line_start":90,"line_end":90,"column_start":33,"column_end":44},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281672,"byte_end":281683,"line_start":103,"line_end":103,"column_start":28,"column_end":39},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":281956,"byte_end":281967,"line_start":117,"line_end":117,"column_start":19,"column_end":30},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":283632,"byte_end":283643,"line_start":167,"line_end":167,"column_start":25,"column_end":36},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":287391,"byte_end":287402,"line_start":291,"line_end":291,"column_start":35,"column_end":46},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288321,"byte_end":288332,"line_start":317,"line_end":317,"column_start":19,"column_end":30},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":288966,"byte_end":288977,"line_start":346,"line_end":346,"column_start":19,"column_end":30},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":289764,"byte_end":289775,"line_start":368,"line_end":368,"column_start":19,"column_end":30},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":290877,"byte_end":290888,"line_start":413,"line_end":413,"column_start":19,"column_end":30},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":291856,"byte_end":291867,"line_start":446,"line_end":446,"column_start":19,"column_end":30},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":292959,"byte_end":292970,"line_start":494,"line_end":494,"column_start":19,"column_end":30},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":294794,"byte_end":294805,"line_start":553,"line_end":553,"column_start":19,"column_end":30},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":295940,"byte_end":295951,"line_start":592,"line_end":592,"column_start":32,"column_end":43},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":296159,"byte_end":296170,"line_start":601,"line_end":601,"column_start":48,"column_end":59},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2387},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform2d.rs","byte_start":296756,"byte_end":296767,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2387},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304719,"byte_end":304730,"line_start":73,"line_end":73,"column_start":34,"column_end":45},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":304783,"byte_end":304794,"line_start":75,"line_end":75,"column_start":36,"column_end":47},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":305498,"byte_end":305509,"line_start":99,"line_end":99,"column_start":26,"column_end":37},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":305571,"byte_end":305582,"line_start":101,"line_end":101,"column_start":33,"column_end":44},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306283,"byte_end":306294,"line_start":124,"line_end":124,"column_start":28,"column_end":39},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":306827,"byte_end":306838,"line_start":148,"line_end":148,"column_start":19,"column_end":30},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":309246,"byte_end":309257,"line_start":229,"line_end":229,"column_start":25,"column_end":36},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":314702,"byte_end":314713,"line_start":381,"line_end":381,"column_start":20,"column_end":31},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":316552,"byte_end":316563,"line_start":456,"line_end":456,"column_start":20,"column_end":31},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":318831,"byte_end":318842,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":320012,"byte_end":320023,"line_start":536,"line_end":536,"column_start":19,"column_end":30},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":321699,"byte_end":321710,"line_start":592,"line_end":592,"column_start":19,"column_end":30},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":323059,"byte_end":323070,"line_start":642,"line_end":642,"column_start":19,"column_end":30},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":328758,"byte_end":328769,"line_start":782,"line_end":782,"column_start":20,"column_end":31},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":336319,"byte_end":336330,"line_start":953,"line_end":953,"column_start":20,"column_end":31},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":337876,"byte_end":337887,"line_start":994,"line_end":994,"column_start":35,"column_end":46},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":339386,"byte_end":339397,"line_start":1025,"line_end":1025,"column_start":32,"column_end":43},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":340365,"byte_end":340376,"line_start":1050,"line_end":1050,"column_start":48,"column_end":59},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":2566},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":341310,"byte_end":341321,"line_start":1066,"line_end":1066,"column_start":32,"column_end":43},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/transform3d.rs","byte_start":341515,"byte_end":341526,"line_start":1075,"line_end":1075,"column_start":34,"column_end":45},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":2566},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354483,"byte_end":354496,"line_start":58,"line_end":58,"column_start":34,"column_end":47},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354549,"byte_end":354562,"line_start":60,"line_end":60,"column_start":36,"column_end":49},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354770,"byte_end":354783,"line_start":70,"line_end":70,"column_start":26,"column_end":39},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":354845,"byte_end":354858,"line_start":72,"line_end":72,"column_start":33,"column_end":46},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355022,"byte_end":355035,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":355200,"byte_end":355213,"line_start":91,"line_end":91,"column_start":19,"column_end":32},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":2779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":356373,"byte_end":356386,"line_start":136,"line_end":136,"column_start":25,"column_end":38},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":2779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358611,"byte_end":358624,"line_start":227,"line_end":227,"column_start":69,"column_end":82},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":358912,"byte_end":358925,"line_start":235,"line_end":235,"column_start":72,"column_end":85},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359138,"byte_end":359151,"line_start":242,"line_end":242,"column_start":69,"column_end":82},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359439,"byte_end":359452,"line_start":250,"line_end":250,"column_start":72,"column_end":85},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359642,"byte_end":359655,"line_start":257,"line_end":257,"column_start":46,"column_end":59},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359805,"byte_end":359818,"line_start":263,"line_end":263,"column_start":46,"column_end":59},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":359965,"byte_end":359978,"line_start":269,"line_end":269,"column_start":54,"column_end":67},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360155,"byte_end":360168,"line_start":278,"line_end":278,"column_start":31,"column_end":44},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360309,"byte_end":360322,"line_start":287,"line_end":287,"column_start":46,"column_end":59},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":2779},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360862,"byte_end":360875,"line_start":306,"line_end":306,"column_start":34,"column_end":47},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":360928,"byte_end":360941,"line_start":308,"line_end":308,"column_start":36,"column_end":49},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":361945,"byte_end":361958,"line_start":351,"line_end":351,"column_start":26,"column_end":39},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362020,"byte_end":362033,"line_start":353,"line_end":353,"column_start":33,"column_end":46},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362218,"byte_end":362231,"line_start":362,"line_end":362,"column_start":28,"column_end":41},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":362420,"byte_end":362433,"line_start":373,"line_end":373,"column_start":19,"column_end":32},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":2882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":363732,"byte_end":363745,"line_start":420,"line_end":420,"column_start":25,"column_end":38},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":2882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366601,"byte_end":366614,"line_start":534,"line_end":534,"column_start":69,"column_end":82},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":366920,"byte_end":366933,"line_start":542,"line_end":542,"column_start":72,"column_end":85},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367173,"byte_end":367186,"line_start":550,"line_end":550,"column_start":69,"column_end":82},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367492,"byte_end":367505,"line_start":558,"line_end":558,"column_start":72,"column_end":85},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367722,"byte_end":367735,"line_start":566,"line_end":566,"column_start":46,"column_end":59},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":367890,"byte_end":367903,"line_start":572,"line_end":572,"column_start":46,"column_end":59},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368058,"byte_end":368071,"line_start":578,"line_end":578,"column_start":54,"column_end":67},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368256,"byte_end":368269,"line_start":587,"line_end":587,"column_start":31,"column_end":44},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/translation.rs","byte_start":368410,"byte_end":368423,"line_start":596,"line_end":596,"column_start":46,"column_end":59},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2882},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380055,"byte_end":380063,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380102,"byte_end":380110,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":380998,"byte_end":381006,"line_start":89,"line_end":89,"column_start":23,"column_end":31},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381053,"byte_end":381061,"line_start":91,"line_end":91,"column_start":37,"column_end":45},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381193,"byte_end":381201,"line_start":97,"line_end":97,"column_start":27,"column_end":35},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381348,"byte_end":381356,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":3040},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381553,"byte_end":381561,"line_start":112,"line_end":112,"column_start":39,"column_end":47},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381735,"byte_end":381743,"line_start":118,"line_end":118,"column_start":33,"column_end":41},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":381861,"byte_end":381869,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":383990,"byte_end":383998,"line_start":210,"line_end":210,"column_start":18,"column_end":26},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":387513,"byte_end":387521,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":388407,"byte_end":388415,"line_start":385,"line_end":385,"column_start":19,"column_end":27},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":390404,"byte_end":390412,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":391524,"byte_end":391532,"line_start":492,"line_end":492,"column_start":24,"column_end":32},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":392834,"byte_end":392842,"line_start":536,"line_end":536,"column_start":23,"column_end":31},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":393392,"byte_end":393400,"line_start":556,"line_end":556,"column_start":28,"column_end":36},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":3040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396252,"byte_end":396260,"line_start":634,"line_end":634,"column_start":25,"column_end":33},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396425,"byte_end":396433,"line_start":643,"line_end":643,"column_start":25,"column_end":33},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396666,"byte_end":396674,"line_start":652,"line_end":652,"column_start":53,"column_end":61},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":396804,"byte_end":396812,"line_start":659,"line_end":659,"column_start":25,"column_end":33},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397052,"byte_end":397060,"line_start":668,"line_end":668,"column_start":69,"column_end":77},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397200,"byte_end":397208,"line_start":675,"line_end":675,"column_start":35,"column_end":43},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397428,"byte_end":397436,"line_start":684,"line_end":684,"column_start":56,"column_end":64},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397593,"byte_end":397601,"line_start":691,"line_end":691,"column_start":55,"column_end":63},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":397846,"byte_end":397854,"line_start":700,"line_end":700,"column_start":60,"column_end":68},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398028,"byte_end":398036,"line_start":708,"line_end":708,"column_start":35,"column_end":43},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398256,"byte_end":398264,"line_start":717,"line_end":717,"column_start":56,"column_end":64},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398421,"byte_end":398429,"line_start":724,"line_end":724,"column_start":55,"column_end":63},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398674,"byte_end":398682,"line_start":733,"line_end":733,"column_start":60,"column_end":68},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":398850,"byte_end":398858,"line_start":741,"line_end":741,"column_start":29,"column_end":37},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":3040},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399015,"byte_end":399023,"line_start":749,"line_end":749,"column_start":27,"column_end":35},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":3040},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399178,"byte_end":399186,"line_start":757,"line_end":757,"column_start":29,"column_end":37},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":3040},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399370,"byte_end":399378,"line_start":765,"line_end":765,"column_start":54,"column_end":62},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":3040},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399701,"byte_end":399709,"line_start":777,"line_end":777,"column_start":29,"column_end":37},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399810,"byte_end":399818,"line_start":783,"line_end":783,"column_start":29,"column_end":37},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":399921,"byte_end":399929,"line_start":789,"line_end":789,"column_start":29,"column_end":37},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400030,"byte_end":400038,"line_start":795,"line_end":795,"column_start":29,"column_end":37},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400158,"byte_end":400166,"line_start":801,"line_end":801,"column_start":35,"column_end":43},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":3040},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400662,"byte_end":400670,"line_start":822,"line_end":822,"column_start":27,"column_end":35},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1981}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":400709,"byte_end":400717,"line_start":824,"line_end":824,"column_start":29,"column_end":37},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1669}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401663,"byte_end":401671,"line_start":867,"line_end":867,"column_start":23,"column_end":31},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1702}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401718,"byte_end":401726,"line_start":869,"line_end":869,"column_start":37,"column_end":45},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":401879,"byte_end":401887,"line_start":875,"line_end":875,"column_start":27,"column_end":35},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":6503}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402058,"byte_end":402066,"line_start":883,"line_end":883,"column_start":27,"column_end":35},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":3256},"to":{"krate":0,"index":780}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402268,"byte_end":402276,"line_start":891,"line_end":891,"column_start":39,"column_end":47},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402517,"byte_end":402525,"line_start":901,"line_end":901,"column_start":33,"column_end":41},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1959}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":402663,"byte_end":402671,"line_start":907,"line_end":907,"column_start":12,"column_end":20},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":404420,"byte_end":404428,"line_start":978,"line_end":978,"column_start":18,"column_end":26},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408297,"byte_end":408305,"line_start":1133,"line_end":1133,"column_start":12,"column_end":20},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":408892,"byte_end":408900,"line_start":1155,"line_end":1155,"column_start":19,"column_end":27},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":411231,"byte_end":411239,"line_start":1240,"line_end":1240,"column_start":12,"column_end":20},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":412393,"byte_end":412401,"line_start":1275,"line_end":1275,"column_start":24,"column_end":32},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":413907,"byte_end":413915,"line_start":1329,"line_end":1329,"column_start":23,"column_end":31},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":414533,"byte_end":414541,"line_start":1351,"line_end":1351,"column_start":28,"column_end":36},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417470,"byte_end":417478,"line_start":1433,"line_end":1433,"column_start":25,"column_end":33},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2063}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417652,"byte_end":417660,"line_start":1442,"line_end":1442,"column_start":25,"column_end":33},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2036}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":417902,"byte_end":417910,"line_start":1451,"line_end":1451,"column_start":53,"column_end":61},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2067}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418040,"byte_end":418048,"line_start":1458,"line_end":1458,"column_start":25,"column_end":33},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2041}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418306,"byte_end":418314,"line_start":1467,"line_end":1467,"column_start":69,"column_end":77},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2071}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418454,"byte_end":418462,"line_start":1474,"line_end":1474,"column_start":35,"column_end":43},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418745,"byte_end":418753,"line_start":1487,"line_end":1487,"column_start":56,"column_end":64},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":418910,"byte_end":418918,"line_start":1494,"line_end":1494,"column_start":55,"column_end":63},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2046}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419228,"byte_end":419236,"line_start":1507,"line_end":1507,"column_start":60,"column_end":68},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2075}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419437,"byte_end":419445,"line_start":1516,"line_end":1516,"column_start":35,"column_end":43},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419728,"byte_end":419736,"line_start":1529,"line_end":1529,"column_start":56,"column_end":64},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":419893,"byte_end":419901,"line_start":1536,"line_end":1536,"column_start":55,"column_end":63},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2051}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420211,"byte_end":420219,"line_start":1549,"line_end":1549,"column_start":60,"column_end":68},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":2079}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420414,"byte_end":420422,"line_start":1558,"line_end":1558,"column_start":29,"column_end":37},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":3256},"to":{"krate":0,"index":790}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420579,"byte_end":420587,"line_start":1566,"line_end":1566,"column_start":27,"column_end":35},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":3256},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420742,"byte_end":420750,"line_start":1574,"line_end":1574,"column_start":29,"column_end":37},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":3256},"to":{"krate":0,"index":792}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":420934,"byte_end":420942,"line_start":1582,"line_end":1582,"column_start":54,"column_end":62},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":3256},"to":{"krate":0,"index":151}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421399,"byte_end":421407,"line_start":1600,"line_end":1600,"column_start":29,"column_end":37},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421516,"byte_end":421524,"line_start":1606,"line_end":1606,"column_start":29,"column_end":37},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421636,"byte_end":421644,"line_start":1612,"line_end":1612,"column_start":32,"column_end":40},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1886}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":421759,"byte_end":421767,"line_start":1618,"line_end":1618,"column_start":32,"column_end":40},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":3256},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":422261,"byte_end":422273,"line_start":1639,"line_end":1639,"column_start":6,"column_end":18},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":3718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/astrale/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.1/src/vector.rs","byte_start":424705,"byte_end":424717,"line_start":1716,"line_end":1716,"column_start":6,"column_end":18},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":3736},"to":{"krate":4294967295,"index":4294967295}}]}